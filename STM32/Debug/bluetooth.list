
bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000818c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08008330  08008330  00009330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800879c  0800879c  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800879c  0800879c  0000979c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087a4  080087a4  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087a4  080087a4  000097a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087a8  080087a8  000097a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080087ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200001d4  08008980  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08008980  0000a588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db2b  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f92  00000000  00000000  00017d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00019cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5c  00000000  00000000  0001aa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001720f  00000000  00000000  0001b464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed65  00000000  00000000  00032673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009003d  00000000  00000000  000413d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1415  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad0  00000000  00000000  000d1458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d5f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008314 	.word	0x08008314

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008314 	.word	0x08008314

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ed0:	1d39      	adds	r1, r7, #4
 8000ed2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <__io_putchar+0x20>)
 8000eda:	f003 fac7 	bl	800446c <HAL_UART_Transmit>
  return ch;
 8000ede:	687b      	ldr	r3, [r7, #4]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200002c8 	.word	0x200002c8

08000eec <delay_us>:
static void MX_TIM3_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void delay_us(uint16_t us)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);			// TIM1 CNT=0
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <delay_us+0x30>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	@ 0x24
  while(__HAL_TIM_GET_COUNTER(&htim1) < us);// TIM1 CNT us compare
 8000efe:	bf00      	nop
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <delay_us+0x30>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d3f9      	bcc.n	8000f00 <delay_us+0x14>
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	200001f0 	.word	0x200001f0

08000f20 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)	// Input Capture Interrupt occur -> ISR Start
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f6c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d117      	bne.n	8000f62 <HAL_TIM_IC_CaptureCallback+0x42>
  {
	  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7f1b      	ldrb	r3, [r3, #28]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d107      	bne.n	8000f4a <HAL_TIM_IC_CaptureCallback+0x2a>
	  {
		risingCnt = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f002 feed 	bl	8003d1c <HAL_TIM_ReadCapturedValue>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000f48:	801a      	strh	r2, [r3, #0]
	  }
	  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	7f1b      	ldrb	r3, [r3, #28]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d107      	bne.n	8000f62 <HAL_TIM_IC_CaptureCallback+0x42>
	  {
		fallingCnt = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000f52:	2104      	movs	r1, #4
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f002 fee1 	bl	8003d1c <HAL_TIM_ReadCapturedValue>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000f60:	801a      	strh	r2, [r3, #0]
	  }
  }

}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40010000 	.word	0x40010000
 8000f70:	20000422 	.word	0x20000422
 8000f74:	20000424 	.word	0x20000424

08000f78 <SendDistanceData>:
void SendDistanceData(uint16_t distance) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b090      	sub	sp, #64	@ 0x40
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
    char buffer[50];
    snprintf(buffer, sizeof(buffer), "[JSH_ARD]%d\n", distance);
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	f107 000c 	add.w	r0, r7, #12
 8000f88:	4a11      	ldr	r2, [pc, #68]	@ (8000fd0 <SendDistanceData+0x58>)
 8000f8a:	2132      	movs	r1, #50	@ 0x32
 8000f8c:	f004 fffe 	bl	8005f8c <sniprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff f983 	bl	80002a0 <strlen>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	f107 010c 	add.w	r1, r7, #12
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	480b      	ldr	r0, [pc, #44]	@ (8000fd4 <SendDistanceData+0x5c>)
 8000fa8:	f003 fa60 	bl	800446c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff f975 	bl	80002a0 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	f107 010c 	add.w	r1, r7, #12
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <SendDistanceData+0x60>)
 8000fc4:	f003 fa52 	bl	800446c <HAL_UART_Transmit>

}
 8000fc8:	bf00      	nop
 8000fca:	3740      	adds	r7, #64	@ 0x40
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	08008330 	.word	0x08008330
 8000fd4:	20000310 	.word	0x20000310
 8000fd8:	200002c8 	.word	0x200002c8

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe2:	f000 fef5 	bl	8001dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe6:	f000 f893 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fea:	f000 fa87 	bl	80014fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000fee:	f000 fa65 	bl	80014bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ff2:	f000 fa0f 	bl	8001414 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000ff6:	f000 fa37 	bl	8001468 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8000ffa:	f000 f9bd 	bl	8001378 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000ffe:	f000 f96f 	bl	80012e0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001002:	f000 f8ed 	bl	80011e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001006:	4835      	ldr	r0, [pc, #212]	@ (80010dc <main+0x100>)
 8001008:	f002 fa66 	bl	80034d8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800100c:	2100      	movs	r1, #0
 800100e:	4833      	ldr	r0, [pc, #204]	@ (80010dc <main+0x100>)
 8001010:	f002 fb16 	bl	8003640 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001014:	2104      	movs	r1, #4
 8001016:	4831      	ldr	r0, [pc, #196]	@ (80010dc <main+0x100>)
 8001018:	f002 fb12 	bl	8003640 <HAL_TIM_IC_Start_IT>
  //HAL_UART_Receive_IT(&huart2, &rx2char,1);
  //HAL_UART_Receive_IT(&huart6, &btchar,1);
  printf("start main2()\r\n");
 800101c:	4830      	ldr	r0, [pc, #192]	@ (80010e0 <main+0x104>)
 800101e:	f004 ffad 	bl	8005f7c <puts>
  char buf[10] = "Hello\r";
 8001022:	4a30      	ldr	r2, [pc, #192]	@ (80010e4 <main+0x108>)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102a:	6018      	str	r0, [r3, #0]
 800102c:	3304      	adds	r3, #4
 800102e:	8019      	strh	r1, [r3, #0]
 8001030:	3302      	adds	r3, #2
 8001032:	0c0a      	lsrs	r2, r1, #16
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	f107 030b 	add.w	r3, r7, #11
 800103a:	2200      	movs	r2, #0
 800103c:	801a      	strh	r2, [r3, #0]
 800103e:	709a      	strb	r2, [r3, #2]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001046:	4828      	ldr	r0, [pc, #160]	@ (80010e8 <main+0x10c>)
 8001048:	f001 fd6a 	bl	8002b20 <HAL_GPIO_WritePin>
	  delay_us(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f7ff ff4d 	bl	8000eec <delay_us>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001058:	4823      	ldr	r0, [pc, #140]	@ (80010e8 <main+0x10c>)
 800105a:	f001 fd61 	bl	8002b20 <HAL_GPIO_WritePin>
	  delay_us(10);
 800105e:	200a      	movs	r0, #10
 8001060:	f7ff ff44 	bl	8000eec <delay_us>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800106a:	481f      	ldr	r0, [pc, #124]	@ (80010e8 <main+0x10c>)
 800106c:	f001 fd58 	bl	8002b20 <HAL_GPIO_WritePin>

	  cntBuffer = fallingCnt - risingCnt;
 8001070:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <main+0x110>)
 8001072:	881a      	ldrh	r2, [r3, #0]
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <main+0x114>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	b29a      	uxth	r2, r3
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <main+0x118>)
 800107e:	801a      	strh	r2, [r3, #0]
	  // Tx_data[0] = cntBuffer/58;
	  distance = cntBuffer/58;
 8001080:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <main+0x118>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	4a1c      	ldr	r2, [pc, #112]	@ (80010f8 <main+0x11c>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	b29a      	uxth	r2, r3
 800108e:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <main+0x120>)
 8001090:	801a      	strh	r2, [r3, #0]
	  htim1.Instance->CCR1 = 0;
 8001092:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <main+0x100>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	635a      	str	r2, [r3, #52]	@ 0x34

      SendDistanceData(distance);
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <main+0x120>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff6a 	bl	8000f78 <SendDistanceData>

      //printf("%3dcm\n", distance);
	  // HAL_UART_Transmit_DMA(&huart2, Tx_data, sizeof(Tx_data));
	  HAL_Delay(500);
 80010a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010a8:	f000 ff04 	bl	8001eb4 <HAL_Delay>


	  if(rx2Flag)
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <main+0x124>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <main+0xe8>
	  {
		printf("recv2 : %s\r\n",rx2Data);
 80010b6:	4913      	ldr	r1, [pc, #76]	@ (8001104 <main+0x128>)
 80010b8:	4813      	ldr	r0, [pc, #76]	@ (8001108 <main+0x12c>)
 80010ba:	f004 fef7 	bl	8005eac <iprintf>
		rx2Flag =0;
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <main+0x124>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
//	    HAL_UART_Transmit(&huart3, (uint8_t *)buf, strlen(buf), 0xFFFF);
	  }
	  if(btFlag)
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <main+0x130>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0b8      	beq.n	8001040 <main+0x64>
	  {
//		printf("bt : %s\r\n",btData);
		btFlag =0;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <main+0x130>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
		bluetooth_Event();
 80010d4:	f000 fa64 	bl	80015a0 <bluetooth_Event>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 80010d8:	e7b2      	b.n	8001040 <main+0x64>
 80010da:	bf00      	nop
 80010dc:	200001f0 	.word	0x200001f0
 80010e0:	08008340 	.word	0x08008340
 80010e4:	08008360 	.word	0x08008360
 80010e8:	40020800 	.word	0x40020800
 80010ec:	20000424 	.word	0x20000424
 80010f0:	20000422 	.word	0x20000422
 80010f4:	20000426 	.word	0x20000426
 80010f8:	8d3dcb09 	.word	0x8d3dcb09
 80010fc:	20000428 	.word	0x20000428
 8001100:	200003b9 	.word	0x200003b9
 8001104:	200003bc 	.word	0x200003bc
 8001108:	08008350 	.word	0x08008350
 800110c:	200003ee 	.word	0x200003ee

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	@ 0x50
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	2230      	movs	r2, #48	@ 0x30
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f005 f860 	bl	80061e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	4b27      	ldr	r3, [pc, #156]	@ (80011d8 <SystemClock_Config+0xc8>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	4a26      	ldr	r2, [pc, #152]	@ (80011d8 <SystemClock_Config+0xc8>)
 800113e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	@ 0x40
 8001144:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <SystemClock_Config+0xc8>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <SystemClock_Config+0xcc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a20      	ldr	r2, [pc, #128]	@ (80011dc <SystemClock_Config+0xcc>)
 800115a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <SystemClock_Config+0xcc>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	2301      	movs	r3, #1
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001174:	2310      	movs	r3, #16
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001178:	2302      	movs	r3, #2
 800117a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117c:	2300      	movs	r3, #0
 800117e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001180:	2308      	movs	r3, #8
 8001182:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001184:	2364      	movs	r3, #100	@ 0x64
 8001186:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001188:	2302      	movs	r3, #2
 800118a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800118c:	2304      	movs	r3, #4
 800118e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fcf7 	bl	8002b88 <HAL_RCC_OscConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011a0:	f000 fb30 	bl	8001804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a4:	230f      	movs	r3, #15
 80011a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a8:	2302      	movs	r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	2103      	movs	r1, #3
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 ff59 	bl	8003078 <HAL_RCC_ClockConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011cc:	f000 fb1a 	bl	8001804 <Error_Handler>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3750      	adds	r7, #80	@ 0x50
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000

080011e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e6:	f107 0318 	add.w	r3, r7, #24
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011fe:	463b      	mov	r3, r7
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800120a:	4b33      	ldr	r3, [pc, #204]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 800120c:	4a33      	ldr	r2, [pc, #204]	@ (80012dc <MX_TIM1_Init+0xfc>)
 800120e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8001210:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 8001212:	2263      	movs	r2, #99	@ 0x63
 8001214:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b30      	ldr	r3, [pc, #192]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800121c:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 800121e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001222:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b2c      	ldr	r3, [pc, #176]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800122a:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001230:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 8001232:	2280      	movs	r2, #128	@ 0x80
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001236:	4828      	ldr	r0, [pc, #160]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 8001238:	f002 f8fe 	bl	8003438 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001242:	f000 fadf 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800124c:	f107 0318 	add.w	r3, r7, #24
 8001250:	4619      	mov	r1, r3
 8001252:	4821      	ldr	r0, [pc, #132]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 8001254:	f002 fc9a 	bl	8003b8c <HAL_TIM_ConfigClockSource>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800125e:	f000 fad1 	bl	8001804 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001262:	481d      	ldr	r0, [pc, #116]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 8001264:	f002 f992 	bl	800358c <HAL_TIM_IC_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800126e:	f000 fac9 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	4619      	mov	r1, r3
 8001280:	4815      	ldr	r0, [pc, #84]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 8001282:	f003 f821 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800128c:	f000 faba 	bl	8001804 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001290:	2300      	movs	r3, #0
 8001292:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001294:	2301      	movs	r3, #1
 8001296:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 800129c:	2304      	movs	r3, #4
 800129e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 80012a8:	f002 fbd4 	bl	8003a54 <HAL_TIM_IC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80012b2:	f000 faa7 	bl	8001804 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012b6:	2302      	movs	r3, #2
 80012b8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	2204      	movs	r2, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_TIM1_Init+0xf8>)
 80012c2:	f002 fbc7 	bl	8003a54 <HAL_TIM_IC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80012cc:	f000 fa9a 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	@ 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200001f0 	.word	0x200001f0
 80012dc:	40010000 	.word	0x40010000

080012e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0308 	add.w	r3, r7, #8
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <MX_TIM2_Init+0x94>)
 80012fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001302:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <MX_TIM2_Init+0x94>)
 8001306:	2259      	movs	r2, #89	@ 0x59
 8001308:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <MX_TIM2_Init+0x94>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001310:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <MX_TIM2_Init+0x94>)
 8001312:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_TIM2_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <MX_TIM2_Init+0x94>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001324:	4813      	ldr	r0, [pc, #76]	@ (8001374 <MX_TIM2_Init+0x94>)
 8001326:	f002 f887 	bl	8003438 <HAL_TIM_Base_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001330:	f000 fa68 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133a:	f107 0308 	add.w	r3, r7, #8
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	@ (8001374 <MX_TIM2_Init+0x94>)
 8001342:	f002 fc23 	bl	8003b8c <HAL_TIM_ConfigClockSource>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800134c:	f000 fa5a 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	@ (8001374 <MX_TIM2_Init+0x94>)
 800135e:	f002 ffb3 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001368:	f000 fa4c 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000238 	.word	0x20000238

08001378 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	463b      	mov	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_TIM3_Init+0x94>)
 8001396:	4a1e      	ldr	r2, [pc, #120]	@ (8001410 <MX_TIM3_Init+0x98>)
 8001398:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <MX_TIM3_Init+0x94>)
 800139c:	2259      	movs	r2, #89	@ 0x59
 800139e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <MX_TIM3_Init+0x94>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <MX_TIM3_Init+0x94>)
 80013a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_TIM3_Init+0x94>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <MX_TIM3_Init+0x94>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013ba:	4814      	ldr	r0, [pc, #80]	@ (800140c <MX_TIM3_Init+0x94>)
 80013bc:	f002 f83c 	bl	8003438 <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013c6:	f000 fa1d 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_TIM3_Init+0x94>)
 80013d8:	f002 fbd8 	bl	8003b8c <HAL_TIM_ConfigClockSource>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80013e2:	f000 fa0f 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	@ (800140c <MX_TIM3_Init+0x94>)
 80013f4:	f002 ff68 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80013fe:	f000 fa01 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000280 	.word	0x20000280
 8001410:	40000400 	.word	0x40000400

08001414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 800141a:	4a12      	ldr	r2, [pc, #72]	@ (8001464 <MX_USART2_UART_Init+0x50>)
 800141c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800141e:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_USART2_UART_Init+0x4c>)
 800144c:	f002 ffbe 	bl	80043cc <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001456:	f000 f9d5 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200002c8 	.word	0x200002c8
 8001464:	40004400 	.word	0x40004400

08001468 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800146c:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <MX_USART6_UART_Init+0x4c>)
 800146e:	4a12      	ldr	r2, [pc, #72]	@ (80014b8 <MX_USART6_UART_Init+0x50>)
 8001470:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <MX_USART6_UART_Init+0x4c>)
 8001474:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001478:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <MX_USART6_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <MX_USART6_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <MX_USART6_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800148c:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <MX_USART6_UART_Init+0x4c>)
 800148e:	220c      	movs	r2, #12
 8001490:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <MX_USART6_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <MX_USART6_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <MX_USART6_UART_Init+0x4c>)
 80014a0:	f002 ff94 	bl	80043cc <HAL_UART_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014aa:	f000 f9ab 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000310 	.word	0x20000310
 80014b8:	40011400 	.word	0x40011400

080014bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <MX_DMA_Init+0x3c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <MX_DMA_Init+0x3c>)
 80014cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <MX_DMA_Init+0x3c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2011      	movs	r0, #17
 80014e4:	f000 fde5 	bl	80020b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014e8:	2011      	movs	r0, #17
 80014ea:	f000 fdfe 	bl	80020ea <HAL_NVIC_EnableIRQ>

}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800

080014fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <MX_GPIO_Init+0x9c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a1f      	ldr	r2, [pc, #124]	@ (8001598 <MX_GPIO_Init+0x9c>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <MX_GPIO_Init+0x9c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <MX_GPIO_Init+0x9c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a18      	ldr	r2, [pc, #96]	@ (8001598 <MX_GPIO_Init+0x9c>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <MX_GPIO_Init+0x9c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <MX_GPIO_Init+0x9c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a11      	ldr	r2, [pc, #68]	@ (8001598 <MX_GPIO_Init+0x9c>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_GPIO_Init+0x9c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800156c:	480b      	ldr	r0, [pc, #44]	@ (800159c <MX_GPIO_Init+0xa0>)
 800156e:	f001 fad7 	bl	8002b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	4619      	mov	r1, r3
 800158a:	4804      	ldr	r0, [pc, #16]	@ (800159c <MX_GPIO_Init+0xa0>)
 800158c:	f001 f944 	bl	8002818 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001590:	bf00      	nop
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	40020800 	.word	0x40020800

080015a0 <bluetooth_Event>:

/* USER CODE BEGIN 4 */

void bluetooth_Event()
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0a4      	sub	sp, #144	@ 0x90
 80015a4:	af02      	add	r7, sp, #8

  int i=0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80015ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE]={0};
 80015bc:	2300      	movs	r3, #0
 80015be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80015c4:	222e      	movs	r2, #46	@ 0x2e
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fe0b 	bl	80061e4 <memset>
  char sendBuf[CMD_SIZE]={0};
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	222e      	movs	r2, #46	@ 0x2e
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 fe02 	bl	80061e4 <memset>
  strcpy(recvBuf,btData);
 80015e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015e4:	493d      	ldr	r1, [pc, #244]	@ (80016dc <bluetooth_Event+0x13c>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 fed7 	bl	800639a <strcpy>

  printf("btData : %s\r\n",btData);
 80015ec:	493b      	ldr	r1, [pc, #236]	@ (80016dc <bluetooth_Event+0x13c>)
 80015ee:	483c      	ldr	r0, [pc, #240]	@ (80016e0 <bluetooth_Event+0x140>)
 80015f0:	f004 fc5c 	bl	8005eac <iprintf>

  pToken = strtok(recvBuf,"[@]");
 80015f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015f8:	493a      	ldr	r1, [pc, #232]	@ (80016e4 <bluetooth_Event+0x144>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 fdfa 	bl	80061f4 <strtok>
 8001600:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8001604:	e017      	b.n	8001636 <bluetooth_Event+0x96>
  {
    pArray[i] =  pToken;
 8001606:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	3388      	adds	r3, #136	@ 0x88
 800160e:	443b      	add	r3, r7
 8001610:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001614:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8001618:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800161c:	3301      	adds	r3, #1
 800161e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001622:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001626:	2b04      	cmp	r3, #4
 8001628:	dc0a      	bgt.n	8001640 <bluetooth_Event+0xa0>
      break;
    pToken = strtok(NULL,"[@]");
 800162a:	492e      	ldr	r1, [pc, #184]	@ (80016e4 <bluetooth_Event+0x144>)
 800162c:	2000      	movs	r0, #0
 800162e:	f004 fde1 	bl	80061f4 <strtok>
 8001632:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8001636:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1e3      	bne.n	8001606 <bluetooth_Event+0x66>
 800163e:	e000      	b.n	8001642 <bluetooth_Event+0xa2>
      break;
 8001640:	bf00      	nop
  }
//  printf("pArray[0] : %s\r\n",pArray[0]);
//  printf("pArray[1] : %s\r\n",pArray[1]);
//  printf("pArray[2] : %s\r\n",pArray[2]);

  if(!strcmp(pArray[1],"LED"))
 8001642:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001644:	4928      	ldr	r1, [pc, #160]	@ (80016e8 <bluetooth_Event+0x148>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fdca 	bl	80001e0 <strcmp>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d119      	bne.n	8001686 <bluetooth_Event+0xe6>
  {
	if(!strcmp(pArray[2],"ON"))
 8001652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001654:	4925      	ldr	r1, [pc, #148]	@ (80016ec <bluetooth_Event+0x14c>)
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fdc2 	bl	80001e0 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d104      	bne.n	800166c <bluetooth_Event+0xcc>
	{
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001662:	2120      	movs	r1, #32
 8001664:	4822      	ldr	r0, [pc, #136]	@ (80016f0 <bluetooth_Event+0x150>)
 8001666:	f001 fa74 	bl	8002b52 <HAL_GPIO_TogglePin>
 800166a:	e01c      	b.n	80016a6 <bluetooth_Event+0x106>
	}
	else if(!strcmp(pArray[2],"OFF"))
 800166c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800166e:	4921      	ldr	r1, [pc, #132]	@ (80016f4 <bluetooth_Event+0x154>)
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fdb5 	bl	80001e0 <strcmp>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d114      	bne.n	80016a6 <bluetooth_Event+0x106>
	{
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800167c:	2120      	movs	r1, #32
 800167e:	481c      	ldr	r0, [pc, #112]	@ (80016f0 <bluetooth_Event+0x150>)
 8001680:	f001 fa67 	bl	8002b52 <HAL_GPIO_TogglePin>
 8001684:	e00f      	b.n	80016a6 <bluetooth_Event+0x106>
	}
  }
  else if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 8001686:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001688:	491b      	ldr	r1, [pc, #108]	@ (80016f8 <bluetooth_Event+0x158>)
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fda8 	bl	80001e0 <strcmp>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01d      	beq.n	80016d2 <bluetooth_Event+0x132>
  {
      return;
  }
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 8001696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001698:	4918      	ldr	r1, [pc, #96]	@ (80016fc <bluetooth_Event+0x15c>)
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fda0 	bl	80001e0 <strcmp>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
  {
      return;
  }
  else
      return;
 80016a4:	e016      	b.n	80016d4 <bluetooth_Event+0x134>

  sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 80016a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016a8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80016aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016ac:	1d38      	adds	r0, r7, #4
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	460b      	mov	r3, r1
 80016b2:	4913      	ldr	r1, [pc, #76]	@ (8001700 <bluetooth_Event+0x160>)
 80016b4:	f004 fc9e 	bl	8005ff4 <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fdf0 	bl	80002a0 <strlen>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	1d39      	adds	r1, r7, #4
 80016c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016ca:	480e      	ldr	r0, [pc, #56]	@ (8001704 <bluetooth_Event+0x164>)
 80016cc:	f002 fece 	bl	800446c <HAL_UART_Transmit>
 80016d0:	e000      	b.n	80016d4 <bluetooth_Event+0x134>
      return;
 80016d2:	bf00      	nop

}
 80016d4:	3788      	adds	r7, #136	@ 0x88
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200003f0 	.word	0x200003f0
 80016e0:	0800836c 	.word	0x0800836c
 80016e4:	0800837c 	.word	0x0800837c
 80016e8:	08008380 	.word	0x08008380
 80016ec:	08008384 	.word	0x08008384
 80016f0:	40020000 	.word	0x40020000
 80016f4:	08008388 	.word	0x08008388
 80016f8:	0800838c 	.word	0x0800838c
 80016fc:	08008398 	.word	0x08008398
 8001700:	080083a8 	.word	0x080083a8
 8001704:	20000310 	.word	0x20000310

08001708 <HAL_UART_RxCpltCallback>:
  * @param  None
  * @retval None
  */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a2f      	ldr	r2, [pc, #188]	@ (80017d4 <HAL_UART_RxCpltCallback+0xcc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d129      	bne.n	800176e <HAL_UART_RxCpltCallback+0x66>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 800171a:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <HAL_UART_RxCpltCallback+0xd0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a2f      	ldr	r2, [pc, #188]	@ (80017dc <HAL_UART_RxCpltCallback+0xd4>)
 8001720:	7811      	ldrb	r1, [r2, #0]
 8001722:	4a2f      	ldr	r2, [pc, #188]	@ (80017e0 <HAL_UART_RxCpltCallback+0xd8>)
 8001724:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 8001726:	4b2c      	ldr	r3, [pc, #176]	@ (80017d8 <HAL_UART_RxCpltCallback+0xd0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a2d      	ldr	r2, [pc, #180]	@ (80017e0 <HAL_UART_RxCpltCallback+0xd8>)
 800172c:	5cd3      	ldrb	r3, [r2, r3]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b0d      	cmp	r3, #13
 8001732:	d006      	beq.n	8001742 <HAL_UART_RxCpltCallback+0x3a>
 8001734:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <HAL_UART_RxCpltCallback+0xd0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a2a      	ldr	r2, [pc, #168]	@ (80017e4 <HAL_UART_RxCpltCallback+0xdc>)
 800173a:	5cd3      	ldrb	r3, [r2, r3]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b0a      	cmp	r3, #10
 8001740:	d10b      	bne.n	800175a <HAL_UART_RxCpltCallback+0x52>
    	{
    		rx2Data[i] = '\0';
 8001742:	4b25      	ldr	r3, [pc, #148]	@ (80017d8 <HAL_UART_RxCpltCallback+0xd0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a26      	ldr	r2, [pc, #152]	@ (80017e0 <HAL_UART_RxCpltCallback+0xd8>)
 8001748:	2100      	movs	r1, #0
 800174a:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 800174c:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <HAL_UART_RxCpltCallback+0xe0>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001752:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <HAL_UART_RxCpltCallback+0xd0>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e004      	b.n	8001764 <HAL_UART_RxCpltCallback+0x5c>
    	}
    	else
    	{
    		i++;
 800175a:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <HAL_UART_RxCpltCallback+0xd0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a1d      	ldr	r2, [pc, #116]	@ (80017d8 <HAL_UART_RxCpltCallback+0xd0>)
 8001762:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8001764:	2201      	movs	r2, #1
 8001766:	491d      	ldr	r1, [pc, #116]	@ (80017dc <HAL_UART_RxCpltCallback+0xd4>)
 8001768:	4820      	ldr	r0, [pc, #128]	@ (80017ec <HAL_UART_RxCpltCallback+0xe4>)
 800176a:	f002 ff0a 	bl	8004582 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1f      	ldr	r2, [pc, #124]	@ (80017f0 <HAL_UART_RxCpltCallback+0xe8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d129      	bne.n	80017cc <HAL_UART_RxCpltCallback+0xc4>
    {
    	static int i=0;
    	btData[i] = btchar;
 8001778:	4b1e      	ldr	r3, [pc, #120]	@ (80017f4 <HAL_UART_RxCpltCallback+0xec>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1e      	ldr	r2, [pc, #120]	@ (80017f8 <HAL_UART_RxCpltCallback+0xf0>)
 800177e:	7811      	ldrb	r1, [r2, #0]
 8001780:	4a18      	ldr	r2, [pc, #96]	@ (80017e4 <HAL_UART_RxCpltCallback+0xdc>)
 8001782:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 8001784:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <HAL_UART_RxCpltCallback+0xec>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a16      	ldr	r2, [pc, #88]	@ (80017e4 <HAL_UART_RxCpltCallback+0xdc>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b0a      	cmp	r3, #10
 8001790:	d006      	beq.n	80017a0 <HAL_UART_RxCpltCallback+0x98>
 8001792:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <HAL_UART_RxCpltCallback+0xec>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a13      	ldr	r2, [pc, #76]	@ (80017e4 <HAL_UART_RxCpltCallback+0xdc>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b0d      	cmp	r3, #13
 800179e:	d10b      	bne.n	80017b8 <HAL_UART_RxCpltCallback+0xb0>
    	{
    		btData[i] = '\0';
 80017a0:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <HAL_UART_RxCpltCallback+0xec>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0f      	ldr	r2, [pc, #60]	@ (80017e4 <HAL_UART_RxCpltCallback+0xdc>)
 80017a6:	2100      	movs	r1, #0
 80017a8:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <HAL_UART_RxCpltCallback+0xf4>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80017b0:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <HAL_UART_RxCpltCallback+0xec>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e004      	b.n	80017c2 <HAL_UART_RxCpltCallback+0xba>
    	}
    	else
    	{
    		i++;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_UART_RxCpltCallback+0xec>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <HAL_UART_RxCpltCallback+0xec>)
 80017c0:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 80017c2:	2201      	movs	r2, #1
 80017c4:	490c      	ldr	r1, [pc, #48]	@ (80017f8 <HAL_UART_RxCpltCallback+0xf0>)
 80017c6:	480e      	ldr	r0, [pc, #56]	@ (8001800 <HAL_UART_RxCpltCallback+0xf8>)
 80017c8:	f002 fedb 	bl	8004582 <HAL_UART_Receive_IT>
    }
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40004400 	.word	0x40004400
 80017d8:	2000042c 	.word	0x2000042c
 80017dc:	200003b8 	.word	0x200003b8
 80017e0:	200003bc 	.word	0x200003bc
 80017e4:	200003f0 	.word	0x200003f0
 80017e8:	200003b9 	.word	0x200003b9
 80017ec:	200002c8 	.word	0x200002c8
 80017f0:	40011400 	.word	0x40011400
 80017f4:	20000430 	.word	0x20000430
 80017f8:	200003ef 	.word	0x200003ef
 80017fc:	200003ee 	.word	0x200003ee
 8001800:	20000310 	.word	0x20000310

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
}
 800180a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <Error_Handler+0x8>

08001810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <HAL_MspInit+0x4c>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181e:	4a0f      	ldr	r2, [pc, #60]	@ (800185c <HAL_MspInit+0x4c>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001824:	6453      	str	r3, [r2, #68]	@ 0x44
 8001826:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <HAL_MspInit+0x4c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_MspInit+0x4c>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_MspInit+0x4c>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001840:	6413      	str	r3, [r2, #64]	@ 0x40
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_MspInit+0x4c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800

08001860 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	@ 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a39      	ldr	r2, [pc, #228]	@ (8001964 <HAL_TIM_Base_MspInit+0x104>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d135      	bne.n	80018ee <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	4b38      	ldr	r3, [pc, #224]	@ (8001968 <HAL_TIM_Base_MspInit+0x108>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	4a37      	ldr	r2, [pc, #220]	@ (8001968 <HAL_TIM_Base_MspInit+0x108>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6453      	str	r3, [r2, #68]	@ 0x44
 8001892:	4b35      	ldr	r3, [pc, #212]	@ (8001968 <HAL_TIM_Base_MspInit+0x108>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	4b31      	ldr	r3, [pc, #196]	@ (8001968 <HAL_TIM_Base_MspInit+0x108>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a30      	ldr	r2, [pc, #192]	@ (8001968 <HAL_TIM_Base_MspInit+0x108>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001968 <HAL_TIM_Base_MspInit+0x108>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	4825      	ldr	r0, [pc, #148]	@ (800196c <HAL_TIM_Base_MspInit+0x10c>)
 80018d8:	f000 ff9e 	bl	8002818 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	201b      	movs	r0, #27
 80018e2:	f000 fbe6 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018e6:	201b      	movs	r0, #27
 80018e8:	f000 fbff 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018ec:	e036      	b.n	800195c <HAL_TIM_Base_MspInit+0xfc>
  else if(htim_base->Instance==TIM2)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018f6:	d116      	bne.n	8001926 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001968 <HAL_TIM_Base_MspInit+0x108>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	4a19      	ldr	r2, [pc, #100]	@ (8001968 <HAL_TIM_Base_MspInit+0x108>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6413      	str	r3, [r2, #64]	@ 0x40
 8001908:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <HAL_TIM_Base_MspInit+0x108>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	201c      	movs	r0, #28
 800191a:	f000 fbca 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800191e:	201c      	movs	r0, #28
 8001920:	f000 fbe3 	bl	80020ea <HAL_NVIC_EnableIRQ>
}
 8001924:	e01a      	b.n	800195c <HAL_TIM_Base_MspInit+0xfc>
  else if(htim_base->Instance==TIM3)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a11      	ldr	r2, [pc, #68]	@ (8001970 <HAL_TIM_Base_MspInit+0x110>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d115      	bne.n	800195c <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <HAL_TIM_Base_MspInit+0x108>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	4a0b      	ldr	r2, [pc, #44]	@ (8001968 <HAL_TIM_Base_MspInit+0x108>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001940:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <HAL_TIM_Base_MspInit+0x108>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	201d      	movs	r0, #29
 8001952:	f000 fbae 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001956:	201d      	movs	r0, #29
 8001958:	f000 fbc7 	bl	80020ea <HAL_NVIC_EnableIRQ>
}
 800195c:	bf00      	nop
 800195e:	3730      	adds	r7, #48	@ 0x30
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40010000 	.word	0x40010000
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000
 8001970:	40000400 	.word	0x40000400

08001974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08c      	sub	sp, #48	@ 0x30
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a51      	ldr	r2, [pc, #324]	@ (8001ad8 <HAL_UART_MspInit+0x164>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d162      	bne.n	8001a5c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	4b50      	ldr	r3, [pc, #320]	@ (8001adc <HAL_UART_MspInit+0x168>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	4a4f      	ldr	r2, [pc, #316]	@ (8001adc <HAL_UART_MspInit+0x168>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a6:	4b4d      	ldr	r3, [pc, #308]	@ (8001adc <HAL_UART_MspInit+0x168>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	4b49      	ldr	r3, [pc, #292]	@ (8001adc <HAL_UART_MspInit+0x168>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a48      	ldr	r2, [pc, #288]	@ (8001adc <HAL_UART_MspInit+0x168>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b46      	ldr	r3, [pc, #280]	@ (8001adc <HAL_UART_MspInit+0x168>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ce:	230c      	movs	r3, #12
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019de:	2307      	movs	r3, #7
 80019e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	483d      	ldr	r0, [pc, #244]	@ (8001ae0 <HAL_UART_MspInit+0x16c>)
 80019ea:	f000 ff15 	bl	8002818 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80019ee:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 80019f0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ae8 <HAL_UART_MspInit+0x174>)
 80019f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80019f4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 80019f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019fc:	4b39      	ldr	r3, [pc, #228]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 80019fe:	2240      	movs	r2, #64	@ 0x40
 8001a00:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a02:	4b38      	ldr	r3, [pc, #224]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a08:	4b36      	ldr	r3, [pc, #216]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 8001a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a0e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a10:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a16:	4b33      	ldr	r3, [pc, #204]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a1c:	4b31      	ldr	r3, [pc, #196]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a22:	4b30      	ldr	r3, [pc, #192]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a2e:	482d      	ldr	r0, [pc, #180]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 8001a30:	f000 fb76 	bl	8002120 <HAL_DMA_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001a3a:	f7ff fee3 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a28      	ldr	r2, [pc, #160]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 8001a42:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a44:	4a27      	ldr	r2, [pc, #156]	@ (8001ae4 <HAL_UART_MspInit+0x170>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2026      	movs	r0, #38	@ 0x26
 8001a50:	f000 fb2f 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a54:	2026      	movs	r0, #38	@ 0x26
 8001a56:	f000 fb48 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a5a:	e038      	b.n	8001ace <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART6)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a22      	ldr	r2, [pc, #136]	@ (8001aec <HAL_UART_MspInit+0x178>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d133      	bne.n	8001ace <HAL_UART_MspInit+0x15a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <HAL_UART_MspInit+0x168>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001adc <HAL_UART_MspInit+0x168>)
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_UART_MspInit+0x168>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_UART_MspInit+0x168>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	4a14      	ldr	r2, [pc, #80]	@ (8001adc <HAL_UART_MspInit+0x168>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_UART_MspInit+0x168>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a9e:	23c0      	movs	r3, #192	@ 0xc0
 8001aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001aae:	2308      	movs	r3, #8
 8001ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480d      	ldr	r0, [pc, #52]	@ (8001af0 <HAL_UART_MspInit+0x17c>)
 8001aba:	f000 fead 	bl	8002818 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2047      	movs	r0, #71	@ 0x47
 8001ac4:	f000 faf5 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ac8:	2047      	movs	r0, #71	@ 0x47
 8001aca:	f000 fb0e 	bl	80020ea <HAL_NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3730      	adds	r7, #48	@ 0x30
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40004400 	.word	0x40004400
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	20000358 	.word	0x20000358
 8001ae8:	400260a0 	.word	0x400260a0
 8001aec:	40011400 	.word	0x40011400
 8001af0:	40020800 	.word	0x40020800

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <NMI_Handler+0x4>

08001afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4a:	f000 f993 	bl	8001e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <DMA1_Stream6_IRQHandler+0x10>)
 8001b5a:	f000 fc21 	bl	80023a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000358 	.word	0x20000358

08001b68 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	@ (8001b78 <TIM1_CC_IRQHandler+0x10>)
 8001b6e:	f001 fe81 	bl	8003874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200001f0 	.word	0x200001f0

08001b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b80:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <TIM2_IRQHandler+0x10>)
 8001b82:	f001 fe77 	bl	8003874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000238 	.word	0x20000238

08001b90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <TIM3_IRQHandler+0x10>)
 8001b96:	f001 fe6d 	bl	8003874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000280 	.word	0x20000280

08001ba4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ba8:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <USART2_IRQHandler+0x10>)
 8001baa:	f002 fd0f 	bl	80045cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200002c8 	.word	0x200002c8

08001bb8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001bbc:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <USART6_IRQHandler+0x10>)
 8001bbe:	f002 fd05 	bl	80045cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000310 	.word	0x20000310

08001bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return 1;
 8001bd0:	2301      	movs	r3, #1
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_kill>:

int _kill(int pid, int sig)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001be6:	f004 fbab 	bl	8006340 <__errno>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2216      	movs	r2, #22
 8001bee:	601a      	str	r2, [r3, #0]
  return -1;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_exit>:

void _exit (int status)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ffe7 	bl	8001bdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c0e:	bf00      	nop
 8001c10:	e7fd      	b.n	8001c0e <_exit+0x12>

08001c12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	e00a      	b.n	8001c3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c24:	f3af 8000 	nop.w
 8001c28:	4601      	mov	r1, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	60ba      	str	r2, [r7, #8]
 8001c30:	b2ca      	uxtb	r2, r1
 8001c32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dbf0      	blt.n	8001c24 <_read+0x12>
  }

  return len;
 8001c42:	687b      	ldr	r3, [r7, #4]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	e009      	b.n	8001c72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	60ba      	str	r2, [r7, #8]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f92e 	bl	8000ec8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dbf1      	blt.n	8001c5e <_write+0x12>
  }
  return len;
 8001c7a:	687b      	ldr	r3, [r7, #4]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_close>:

int _close(int file)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cac:	605a      	str	r2, [r3, #4]
  return 0;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_isatty>:

int _isatty(int file)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cc4:	2301      	movs	r3, #1
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	@ (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f004 fb10 	bl	8006340 <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	@ (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20020000 	.word	0x20020000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	20000434 	.word	0x20000434
 8001d54:	20000588 	.word	0x20000588

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <SystemInit+0x20>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <SystemInit+0x20>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001db4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d80:	f7ff ffea 	bl	8001d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d84:	480c      	ldr	r0, [pc, #48]	@ (8001db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d86:	490d      	ldr	r1, [pc, #52]	@ (8001dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d88:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d8c:	e002      	b.n	8001d94 <LoopCopyDataInit>

08001d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d92:	3304      	adds	r3, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d98:	d3f9      	bcc.n	8001d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da0:	e001      	b.n	8001da6 <LoopFillZerobss>

08001da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da4:	3204      	adds	r2, #4

08001da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da8:	d3fb      	bcc.n	8001da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001daa:	f004 facf 	bl	800634c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dae:	f7ff f915 	bl	8000fdc <main>
  bx  lr    
 8001db2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001dc0:	080087ac 	.word	0x080087ac
  ldr r2, =_sbss
 8001dc4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001dc8:	20000588 	.word	0x20000588

08001dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e10 <HAL_Init+0x40>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <HAL_Init+0x40>)
 8001de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a07      	ldr	r2, [pc, #28]	@ (8001e10 <HAL_Init+0x40>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f000 f94f 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfe:	200f      	movs	r0, #15
 8001e00:	f000 f808 	bl	8001e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e04:	f7ff fd04 	bl	8001810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e1c:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_InitTick+0x54>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_InitTick+0x58>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f967 	bl	8002106 <HAL_SYSTICK_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00e      	b.n	8001e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d80a      	bhi.n	8001e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f000 f92f 	bl	80020b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e54:	4a06      	ldr	r2, [pc, #24]	@ (8001e70 <HAL_InitTick+0x5c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e000      	b.n	8001e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e78:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_IncTick+0x20>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_IncTick+0x24>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <HAL_IncTick+0x24>)
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000438 	.word	0x20000438

08001e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	@ (8001eb0 <HAL_GetTick+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000438 	.word	0x20000438

08001eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7ff ffee 	bl	8001e9c <HAL_GetTick>
 8001ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d005      	beq.n	8001eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <HAL_Delay+0x44>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eda:	bf00      	nop
 8001edc:	f7ff ffde 	bl	8001e9c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d8f7      	bhi.n	8001edc <HAL_Delay+0x28>
  {
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000008 	.word	0x20000008

08001efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db0b      	blt.n	8001f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4907      	ldr	r1, [pc, #28]	@ (8001f98 <__NVIC_EnableIRQ+0x38>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	@ (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	@ (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	@ 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	@ 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002068:	d301      	bcc.n	800206e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206e:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <SysTick_Config+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002076:	210f      	movs	r1, #15
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f7ff ff8e 	bl	8001f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <SysTick_Config+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <SysTick_Config+0x40>)
 8002088:	2207      	movs	r2, #7
 800208a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff29 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c4:	f7ff ff3e 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 80020c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff ff8e 	bl	8001ff0 <NVIC_EncodePriority>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff5d 	bl	8001f9c <__NVIC_SetPriority>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff31 	bl	8001f60 <__NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffa2 	bl	8002058 <SysTick_Config>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff feb6 	bl	8001e9c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e099      	b.n	8002270 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800215c:	e00f      	b.n	800217e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800215e:	f7ff fe9d 	bl	8001e9c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b05      	cmp	r3, #5
 800216a:	d908      	bls.n	800217e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2220      	movs	r2, #32
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2203      	movs	r2, #3
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e078      	b.n	8002270 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e8      	bne.n	800215e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	4b38      	ldr	r3, [pc, #224]	@ (8002278 <HAL_DMA_Init+0x158>)
 8002198:	4013      	ands	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d107      	bne.n	80021e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	4313      	orrs	r3, r2
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f023 0307 	bic.w	r3, r3, #7
 80021fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	2b04      	cmp	r3, #4
 8002210:	d117      	bne.n	8002242 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00e      	beq.n	8002242 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fa7b 	bl	8002720 <DMA_CheckFifoParam>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2240      	movs	r2, #64	@ 0x40
 8002234:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800223e:	2301      	movs	r3, #1
 8002240:	e016      	b.n	8002270 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fa32 	bl	80026b4 <DMA_CalcBaseAndBitshift>
 8002250:	4603      	mov	r3, r0
 8002252:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	223f      	movs	r2, #63	@ 0x3f
 800225a:	409a      	lsls	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	f010803f 	.word	0xf010803f

0800227c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002288:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800228a:	f7ff fe07 	bl	8001e9c <HAL_GetTick>
 800228e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d008      	beq.n	80022ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2280      	movs	r2, #128	@ 0x80
 80022a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e052      	b.n	8002354 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0216 	bic.w	r2, r2, #22
 80022bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <HAL_DMA_Abort+0x62>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0208 	bic.w	r2, r2, #8
 80022ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0201 	bic.w	r2, r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fe:	e013      	b.n	8002328 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002300:	f7ff fdcc 	bl	8001e9c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b05      	cmp	r3, #5
 800230c:	d90c      	bls.n	8002328 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2220      	movs	r2, #32
 8002312:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2203      	movs	r2, #3
 8002318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e015      	b.n	8002354 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1e4      	bne.n	8002300 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233a:	223f      	movs	r2, #63	@ 0x3f
 800233c:	409a      	lsls	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d004      	beq.n	800237a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2280      	movs	r2, #128	@ 0x80
 8002374:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e00c      	b.n	8002394 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2205      	movs	r2, #5
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023ac:	4b8e      	ldr	r3, [pc, #568]	@ (80025e8 <HAL_DMA_IRQHandler+0x248>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a8e      	ldr	r2, [pc, #568]	@ (80025ec <HAL_DMA_IRQHandler+0x24c>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	0a9b      	lsrs	r3, r3, #10
 80023b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ca:	2208      	movs	r2, #8
 80023cc:	409a      	lsls	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01a      	beq.n	800240c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0204 	bic.w	r2, r2, #4
 80023f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f8:	2208      	movs	r2, #8
 80023fa:	409a      	lsls	r2, r3
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002410:	2201      	movs	r2, #1
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d012      	beq.n	8002442 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	2201      	movs	r2, #1
 8002430:	409a      	lsls	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243a:	f043 0202 	orr.w	r2, r3, #2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002446:	2204      	movs	r2, #4
 8002448:	409a      	lsls	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d012      	beq.n	8002478 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002464:	2204      	movs	r2, #4
 8002466:	409a      	lsls	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002470:	f043 0204 	orr.w	r2, r3, #4
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247c:	2210      	movs	r2, #16
 800247e:	409a      	lsls	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d043      	beq.n	8002510 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d03c      	beq.n	8002510 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249a:	2210      	movs	r2, #16
 800249c:	409a      	lsls	r2, r3
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d018      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d108      	bne.n	80024d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d024      	beq.n	8002510 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	4798      	blx	r3
 80024ce:	e01f      	b.n	8002510 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01b      	beq.n	8002510 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
 80024e0:	e016      	b.n	8002510 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d107      	bne.n	8002500 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0208 	bic.w	r2, r2, #8
 80024fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002514:	2220      	movs	r2, #32
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 808f 	beq.w	8002640 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 8087 	beq.w	8002640 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002536:	2220      	movs	r2, #32
 8002538:	409a      	lsls	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b05      	cmp	r3, #5
 8002548:	d136      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0216 	bic.w	r2, r2, #22
 8002558:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002568:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d103      	bne.n	800257a <HAL_DMA_IRQHandler+0x1da>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0208 	bic.w	r2, r2, #8
 8002588:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	223f      	movs	r2, #63	@ 0x3f
 8002590:	409a      	lsls	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d07e      	beq.n	80026ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
        }
        return;
 80025b6:	e079      	b.n	80026ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01d      	beq.n	8002602 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10d      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d031      	beq.n	8002640 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4798      	blx	r3
 80025e4:	e02c      	b.n	8002640 <HAL_DMA_IRQHandler+0x2a0>
 80025e6:	bf00      	nop
 80025e8:	20000000 	.word	0x20000000
 80025ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d023      	beq.n	8002640 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	4798      	blx	r3
 8002600:	e01e      	b.n	8002640 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10f      	bne.n	8002630 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0210 	bic.w	r2, r2, #16
 800261e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002644:	2b00      	cmp	r3, #0
 8002646:	d032      	beq.n	80026ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d022      	beq.n	800269a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2205      	movs	r2, #5
 8002658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	3301      	adds	r3, #1
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	429a      	cmp	r2, r3
 8002676:	d307      	bcc.n	8002688 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f2      	bne.n	800266c <HAL_DMA_IRQHandler+0x2cc>
 8002686:	e000      	b.n	800268a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002688:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
 80026aa:	e000      	b.n	80026ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80026ac:	bf00      	nop
    }
  }
}
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3b10      	subs	r3, #16
 80026c4:	4a14      	ldr	r2, [pc, #80]	@ (8002718 <DMA_CalcBaseAndBitshift+0x64>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ce:	4a13      	ldr	r2, [pc, #76]	@ (800271c <DMA_CalcBaseAndBitshift+0x68>)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d909      	bls.n	80026f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	1d1a      	adds	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80026f4:	e007      	b.n	8002706 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	aaaaaaab 	.word	0xaaaaaaab
 800271c:	080083cc 	.word	0x080083cc

08002720 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d11f      	bne.n	800277a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d856      	bhi.n	80027ee <DMA_CheckFifoParam+0xce>
 8002740:	a201      	add	r2, pc, #4	@ (adr r2, 8002748 <DMA_CheckFifoParam+0x28>)
 8002742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002746:	bf00      	nop
 8002748:	08002759 	.word	0x08002759
 800274c:	0800276b 	.word	0x0800276b
 8002750:	08002759 	.word	0x08002759
 8002754:	080027ef 	.word	0x080027ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d046      	beq.n	80027f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002768:	e043      	b.n	80027f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002772:	d140      	bne.n	80027f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002778:	e03d      	b.n	80027f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002782:	d121      	bne.n	80027c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d837      	bhi.n	80027fa <DMA_CheckFifoParam+0xda>
 800278a:	a201      	add	r2, pc, #4	@ (adr r2, 8002790 <DMA_CheckFifoParam+0x70>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	080027a1 	.word	0x080027a1
 8002794:	080027a7 	.word	0x080027a7
 8002798:	080027a1 	.word	0x080027a1
 800279c:	080027b9 	.word	0x080027b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      break;
 80027a4:	e030      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d025      	beq.n	80027fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b6:	e022      	b.n	80027fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027c0:	d11f      	bne.n	8002802 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027c6:	e01c      	b.n	8002802 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d903      	bls.n	80027d6 <DMA_CheckFifoParam+0xb6>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d003      	beq.n	80027dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027d4:	e018      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
      break;
 80027da:	e015      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00e      	beq.n	8002806 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e00b      	b.n	8002806 <DMA_CheckFifoParam+0xe6>
      break;
 80027ee:	bf00      	nop
 80027f0:	e00a      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 80027f2:	bf00      	nop
 80027f4:	e008      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
 80027f8:	e006      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 80027fa:	bf00      	nop
 80027fc:	e004      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 80027fe:	bf00      	nop
 8002800:	e002      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;   
 8002802:	bf00      	nop
 8002804:	e000      	b.n	8002808 <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
    }
  } 
  
  return status; 
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop

08002818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	@ 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	e159      	b.n	8002ae8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	429a      	cmp	r2, r3
 800284e:	f040 8148 	bne.w	8002ae2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d005      	beq.n	800286a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	2b02      	cmp	r3, #2
 8002868:	d130      	bne.n	80028cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	2203      	movs	r2, #3
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 0201 	and.w	r2, r3, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d017      	beq.n	8002908 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d123      	bne.n	800295c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	69b9      	ldr	r1, [r7, #24]
 8002958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0203 	and.w	r2, r3, #3
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a2 	beq.w	8002ae2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b57      	ldr	r3, [pc, #348]	@ (8002b00 <HAL_GPIO_Init+0x2e8>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	4a56      	ldr	r2, [pc, #344]	@ (8002b00 <HAL_GPIO_Init+0x2e8>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ae:	4b54      	ldr	r3, [pc, #336]	@ (8002b00 <HAL_GPIO_Init+0x2e8>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ba:	4a52      	ldr	r2, [pc, #328]	@ (8002b04 <HAL_GPIO_Init+0x2ec>)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a49      	ldr	r2, [pc, #292]	@ (8002b08 <HAL_GPIO_Init+0x2f0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d019      	beq.n	8002a1a <HAL_GPIO_Init+0x202>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a48      	ldr	r2, [pc, #288]	@ (8002b0c <HAL_GPIO_Init+0x2f4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <HAL_GPIO_Init+0x1fe>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a47      	ldr	r2, [pc, #284]	@ (8002b10 <HAL_GPIO_Init+0x2f8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00d      	beq.n	8002a12 <HAL_GPIO_Init+0x1fa>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a46      	ldr	r2, [pc, #280]	@ (8002b14 <HAL_GPIO_Init+0x2fc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d007      	beq.n	8002a0e <HAL_GPIO_Init+0x1f6>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a45      	ldr	r2, [pc, #276]	@ (8002b18 <HAL_GPIO_Init+0x300>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <HAL_GPIO_Init+0x1f2>
 8002a06:	2304      	movs	r3, #4
 8002a08:	e008      	b.n	8002a1c <HAL_GPIO_Init+0x204>
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x204>
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e004      	b.n	8002a1c <HAL_GPIO_Init+0x204>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e002      	b.n	8002a1c <HAL_GPIO_Init+0x204>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_GPIO_Init+0x204>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	f002 0203 	and.w	r2, r2, #3
 8002a22:	0092      	lsls	r2, r2, #2
 8002a24:	4093      	lsls	r3, r2
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a2c:	4935      	ldr	r1, [pc, #212]	@ (8002b04 <HAL_GPIO_Init+0x2ec>)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3a:	4b38      	ldr	r3, [pc, #224]	@ (8002b1c <HAL_GPIO_Init+0x304>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b1c <HAL_GPIO_Init+0x304>)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a64:	4b2d      	ldr	r3, [pc, #180]	@ (8002b1c <HAL_GPIO_Init+0x304>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a88:	4a24      	ldr	r2, [pc, #144]	@ (8002b1c <HAL_GPIO_Init+0x304>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a8e:	4b23      	ldr	r3, [pc, #140]	@ (8002b1c <HAL_GPIO_Init+0x304>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b1c <HAL_GPIO_Init+0x304>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab8:	4b18      	ldr	r3, [pc, #96]	@ (8002b1c <HAL_GPIO_Init+0x304>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002adc:	4a0f      	ldr	r2, [pc, #60]	@ (8002b1c <HAL_GPIO_Init+0x304>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	f67f aea2 	bls.w	8002834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3724      	adds	r7, #36	@ 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40013800 	.word	0x40013800
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	40020400 	.word	0x40020400
 8002b10:	40020800 	.word	0x40020800
 8002b14:	40020c00 	.word	0x40020c00
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40013c00 	.word	0x40013c00

08002b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	807b      	strh	r3, [r7, #2]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b30:	787b      	ldrb	r3, [r7, #1]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b3c:	e003      	b.n	8002b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b3e:	887b      	ldrh	r3, [r7, #2]
 8002b40:	041a      	lsls	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	619a      	str	r2, [r3, #24]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b64:	887a      	ldrh	r2, [r7, #2]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	041a      	lsls	r2, r3, #16
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	400b      	ands	r3, r1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	619a      	str	r2, [r3, #24]
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e267      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d075      	beq.n	8002c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba6:	4b88      	ldr	r3, [pc, #544]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d00c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb2:	4b85      	ldr	r3, [pc, #532]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d112      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbe:	4b82      	ldr	r3, [pc, #520]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bca:	d10b      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	4b7e      	ldr	r3, [pc, #504]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d05b      	beq.n	8002c90 <HAL_RCC_OscConfig+0x108>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d157      	bne.n	8002c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e242      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bec:	d106      	bne.n	8002bfc <HAL_RCC_OscConfig+0x74>
 8002bee:	4b76      	ldr	r3, [pc, #472]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a75      	ldr	r2, [pc, #468]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e01d      	b.n	8002c38 <HAL_RCC_OscConfig+0xb0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x98>
 8002c06:	4b70      	ldr	r3, [pc, #448]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a6f      	ldr	r2, [pc, #444]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6c      	ldr	r2, [pc, #432]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0xb0>
 8002c20:	4b69      	ldr	r3, [pc, #420]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a68      	ldr	r2, [pc, #416]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b66      	ldr	r3, [pc, #408]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a65      	ldr	r2, [pc, #404]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7ff f92c 	bl	8001e9c <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7ff f928 	bl	8001e9c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	@ 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e207      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0xc0>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff f918 	bl	8001e9c <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c70:	f7ff f914 	bl	8001e9c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	@ 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1f3      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	4b51      	ldr	r3, [pc, #324]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0xe8>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d063      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002caa:	4b47      	ldr	r3, [pc, #284]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d11c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb6:	4b44      	ldr	r3, [pc, #272]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d116      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	4b41      	ldr	r3, [pc, #260]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_RCC_OscConfig+0x152>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d001      	beq.n	8002cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e1c7      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4937      	ldr	r1, [pc, #220]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cee:	e03a      	b.n	8002d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf8:	4b34      	ldr	r3, [pc, #208]	@ (8002dcc <HAL_RCC_OscConfig+0x244>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7ff f8cd 	bl	8001e9c <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d06:	f7ff f8c9 	bl	8001e9c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e1a8      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b28      	ldr	r3, [pc, #160]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4925      	ldr	r1, [pc, #148]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
 8002d38:	e015      	b.n	8002d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3a:	4b24      	ldr	r3, [pc, #144]	@ (8002dcc <HAL_RCC_OscConfig+0x244>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7ff f8ac 	bl	8001e9c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d48:	f7ff f8a8 	bl	8001e9c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e187      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d036      	beq.n	8002de0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d016      	beq.n	8002da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7a:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <HAL_RCC_OscConfig+0x248>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7ff f88c 	bl	8001e9c <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d88:	f7ff f888 	bl	8001e9c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e167      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x200>
 8002da6:	e01b      	b.n	8002de0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da8:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_RCC_OscConfig+0x248>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7ff f875 	bl	8001e9c <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	e00e      	b.n	8002dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db6:	f7ff f871 	bl	8001e9c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d907      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e150      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	42470000 	.word	0x42470000
 8002dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	4b88      	ldr	r3, [pc, #544]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ea      	bne.n	8002db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8097 	beq.w	8002f1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df2:	4b81      	ldr	r3, [pc, #516]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10f      	bne.n	8002e1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	4b7d      	ldr	r3, [pc, #500]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	4a7c      	ldr	r2, [pc, #496]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b77      	ldr	r3, [pc, #476]	@ (8002ffc <HAL_RCC_OscConfig+0x474>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d118      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2a:	4b74      	ldr	r3, [pc, #464]	@ (8002ffc <HAL_RCC_OscConfig+0x474>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a73      	ldr	r2, [pc, #460]	@ (8002ffc <HAL_RCC_OscConfig+0x474>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e36:	f7ff f831 	bl	8001e9c <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7ff f82d 	bl	8001e9c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e10c      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	4b6a      	ldr	r3, [pc, #424]	@ (8002ffc <HAL_RCC_OscConfig+0x474>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x2ea>
 8002e64:	4b64      	ldr	r3, [pc, #400]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e68:	4a63      	ldr	r2, [pc, #396]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e70:	e01c      	b.n	8002eac <HAL_RCC_OscConfig+0x324>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x30c>
 8002e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e86:	4b5c      	ldr	r3, [pc, #368]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e92:	e00b      	b.n	8002eac <HAL_RCC_OscConfig+0x324>
 8002e94:	4b58      	ldr	r3, [pc, #352]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e98:	4a57      	ldr	r2, [pc, #348]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea0:	4b55      	ldr	r3, [pc, #340]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea4:	4a54      	ldr	r2, [pc, #336]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fff2 	bl	8001e9c <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe ffee 	bl	8001e9c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0cb      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed2:	4b49      	ldr	r3, [pc, #292]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0ee      	beq.n	8002ebc <HAL_RCC_OscConfig+0x334>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee0:	f7fe ffdc 	bl	8001e9c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7fe ffd8 	bl	8001e9c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0b5      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efe:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1ee      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f10:	4b39      	ldr	r3, [pc, #228]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	4a38      	ldr	r2, [pc, #224]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80a1 	beq.w	8003068 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f26:	4b34      	ldr	r3, [pc, #208]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d05c      	beq.n	8002fec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d141      	bne.n	8002fbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b31      	ldr	r3, [pc, #196]	@ (8003000 <HAL_RCC_OscConfig+0x478>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe ffac 	bl	8001e9c <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe ffa8 	bl	8001e9c <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e087      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	4b27      	ldr	r3, [pc, #156]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	041b      	lsls	r3, r3, #16
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	491b      	ldr	r1, [pc, #108]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f90:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <HAL_RCC_OscConfig+0x478>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7fe ff81 	bl	8001e9c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fe ff7d 	bl	8001e9c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e05c      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x416>
 8002fbc:	e054      	b.n	8003068 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b10      	ldr	r3, [pc, #64]	@ (8003000 <HAL_RCC_OscConfig+0x478>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fe ff6a 	bl	8001e9c <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe ff66 	bl	8001e9c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e045      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fde:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x444>
 8002fea:	e03d      	b.n	8003068 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e038      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40007000 	.word	0x40007000
 8003000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003004:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_RCC_OscConfig+0x4ec>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d028      	beq.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d121      	bne.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d11a      	bne.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003034:	4013      	ands	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800303a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800303c:	4293      	cmp	r3, r2
 800303e:	d111      	bne.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	3b01      	subs	r3, #1
 800304e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800

08003078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0cc      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b68      	ldr	r3, [pc, #416]	@ (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d90c      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b65      	ldr	r3, [pc, #404]	@ (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b63      	ldr	r3, [pc, #396]	@ (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0b8      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030cc:	4b59      	ldr	r3, [pc, #356]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a58      	ldr	r2, [pc, #352]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e4:	4b53      	ldr	r3, [pc, #332]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a52      	ldr	r2, [pc, #328]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f0:	4b50      	ldr	r3, [pc, #320]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	494d      	ldr	r1, [pc, #308]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d044      	beq.n	8003198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b47      	ldr	r3, [pc, #284]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d119      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e07f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d003      	beq.n	8003136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	2b03      	cmp	r3, #3
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	4b3f      	ldr	r3, [pc, #252]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e067      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003156:	4b37      	ldr	r3, [pc, #220]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f023 0203 	bic.w	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4934      	ldr	r1, [pc, #208]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003168:	f7fe fe98 	bl	8001e9c <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	e00a      	b.n	8003186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003170:	f7fe fe94 	bl	8001e9c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e04f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	4b2b      	ldr	r3, [pc, #172]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 020c 	and.w	r2, r3, #12
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	429a      	cmp	r2, r3
 8003196:	d1eb      	bne.n	8003170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003198:	4b25      	ldr	r3, [pc, #148]	@ (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d20c      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b22      	ldr	r3, [pc, #136]	@ (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e032      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031cc:	4b19      	ldr	r3, [pc, #100]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4916      	ldr	r1, [pc, #88]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ea:	4b12      	ldr	r3, [pc, #72]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	490e      	ldr	r1, [pc, #56]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031fe:	f000 f821 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 8003202:	4602      	mov	r2, r0
 8003204:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	490a      	ldr	r1, [pc, #40]	@ (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	5ccb      	ldrb	r3, [r1, r3]
 8003212:	fa22 f303 	lsr.w	r3, r2, r3
 8003216:	4a09      	ldr	r2, [pc, #36]	@ (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800321a:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fdf8 	bl	8001e14 <HAL_InitTick>

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023c00 	.word	0x40023c00
 8003234:	40023800 	.word	0x40023800
 8003238:	080083b4 	.word	0x080083b4
 800323c:	20000000 	.word	0x20000000
 8003240:	20000004 	.word	0x20000004

08003244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003248:	b090      	sub	sp, #64	@ 0x40
 800324a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003250:	2300      	movs	r3, #0
 8003252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003254:	2300      	movs	r3, #0
 8003256:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800325c:	4b59      	ldr	r3, [pc, #356]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b08      	cmp	r3, #8
 8003266:	d00d      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x40>
 8003268:	2b08      	cmp	r3, #8
 800326a:	f200 80a1 	bhi.w	80033b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x34>
 8003272:	2b04      	cmp	r3, #4
 8003274:	d003      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0x3a>
 8003276:	e09b      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b53      	ldr	r3, [pc, #332]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800327a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800327c:	e09b      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800327e:	4b53      	ldr	r3, [pc, #332]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003280:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003282:	e098      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003284:	4b4f      	ldr	r3, [pc, #316]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800328c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800328e:	4b4d      	ldr	r3, [pc, #308]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d028      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329a:	4b4a      	ldr	r3, [pc, #296]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	2200      	movs	r2, #0
 80032a2:	623b      	str	r3, [r7, #32]
 80032a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032ac:	2100      	movs	r1, #0
 80032ae:	4b47      	ldr	r3, [pc, #284]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x188>)
 80032b0:	fb03 f201 	mul.w	r2, r3, r1
 80032b4:	2300      	movs	r3, #0
 80032b6:	fb00 f303 	mul.w	r3, r0, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	4a43      	ldr	r2, [pc, #268]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x188>)
 80032be:	fba0 1202 	umull	r1, r2, r0, r2
 80032c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032c4:	460a      	mov	r2, r1
 80032c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ca:	4413      	add	r3, r2
 80032cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d0:	2200      	movs	r2, #0
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	61fa      	str	r2, [r7, #28]
 80032d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80032de:	f7fd fc7b 	bl	8000bd8 <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4613      	mov	r3, r2
 80032e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ea:	e053      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ec:	4b35      	ldr	r3, [pc, #212]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	2200      	movs	r2, #0
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	617a      	str	r2, [r7, #20]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032fe:	f04f 0b00 	mov.w	fp, #0
 8003302:	4652      	mov	r2, sl
 8003304:	465b      	mov	r3, fp
 8003306:	f04f 0000 	mov.w	r0, #0
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	0159      	lsls	r1, r3, #5
 8003310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003314:	0150      	lsls	r0, r2, #5
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	ebb2 080a 	subs.w	r8, r2, sl
 800331e:	eb63 090b 	sbc.w	r9, r3, fp
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800332e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003332:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003336:	ebb2 0408 	subs.w	r4, r2, r8
 800333a:	eb63 0509 	sbc.w	r5, r3, r9
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	00eb      	lsls	r3, r5, #3
 8003348:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800334c:	00e2      	lsls	r2, r4, #3
 800334e:	4614      	mov	r4, r2
 8003350:	461d      	mov	r5, r3
 8003352:	eb14 030a 	adds.w	r3, r4, sl
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	eb45 030b 	adc.w	r3, r5, fp
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800336a:	4629      	mov	r1, r5
 800336c:	028b      	lsls	r3, r1, #10
 800336e:	4621      	mov	r1, r4
 8003370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003374:	4621      	mov	r1, r4
 8003376:	028a      	lsls	r2, r1, #10
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337e:	2200      	movs	r2, #0
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	60fa      	str	r2, [r7, #12]
 8003384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003388:	f7fd fc26 	bl	8000bd8 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4613      	mov	r3, r2
 8003392:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	3301      	adds	r3, #1
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80033a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033ae:	e002      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80033b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3740      	adds	r7, #64	@ 0x40
 80033bc:	46bd      	mov	sp, r7
 80033be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
 80033c8:	00f42400 	.word	0x00f42400
 80033cc:	017d7840 	.word	0x017d7840

080033d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d4:	4b03      	ldr	r3, [pc, #12]	@ (80033e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000000 	.word	0x20000000

080033e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033ec:	f7ff fff0 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	@ (8003408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0a9b      	lsrs	r3, r3, #10
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4903      	ldr	r1, [pc, #12]	@ (800340c <HAL_RCC_GetPCLK1Freq+0x24>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	080083c4 	.word	0x080083c4

08003410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003414:	f7ff ffdc 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0b5b      	lsrs	r3, r3, #13
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	4903      	ldr	r1, [pc, #12]	@ (8003434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40023800 	.word	0x40023800
 8003434:	080083c4 	.word	0x080083c4

08003438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e041      	b.n	80034ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fe f9fe 	bl	8001860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f000 fcbc 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d001      	beq.n	80034f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e03c      	b.n	800356a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003578 <HAL_TIM_Base_Start+0xa0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d018      	beq.n	8003534 <HAL_TIM_Base_Start+0x5c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350a:	d013      	beq.n	8003534 <HAL_TIM_Base_Start+0x5c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1a      	ldr	r2, [pc, #104]	@ (800357c <HAL_TIM_Base_Start+0xa4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00e      	beq.n	8003534 <HAL_TIM_Base_Start+0x5c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a19      	ldr	r2, [pc, #100]	@ (8003580 <HAL_TIM_Base_Start+0xa8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_TIM_Base_Start+0x5c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <HAL_TIM_Base_Start+0xac>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIM_Base_Start+0x5c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a16      	ldr	r2, [pc, #88]	@ (8003588 <HAL_TIM_Base_Start+0xb0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b06      	cmp	r3, #6
 8003544:	d010      	beq.n	8003568 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003556:	e007      	b.n	8003568 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40010000 	.word	0x40010000
 800357c:	40000400 	.word	0x40000400
 8003580:	40000800 	.word	0x40000800
 8003584:	40000c00 	.word	0x40000c00
 8003588:	40014000 	.word	0x40014000

0800358c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f839 	bl	800362a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 fc12 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d104      	bne.n	800365e <HAL_TIM_IC_Start_IT+0x1e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800365a:	b2db      	uxtb	r3, r3
 800365c:	e013      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x46>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d104      	bne.n	800366e <HAL_TIM_IC_Start_IT+0x2e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800366a:	b2db      	uxtb	r3, r3
 800366c:	e00b      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x46>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b08      	cmp	r3, #8
 8003672:	d104      	bne.n	800367e <HAL_TIM_IC_Start_IT+0x3e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e003      	b.n	8003686 <HAL_TIM_IC_Start_IT+0x46>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d104      	bne.n	8003698 <HAL_TIM_IC_Start_IT+0x58>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e013      	b.n	80036c0 <HAL_TIM_IC_Start_IT+0x80>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b04      	cmp	r3, #4
 800369c:	d104      	bne.n	80036a8 <HAL_TIM_IC_Start_IT+0x68>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e00b      	b.n	80036c0 <HAL_TIM_IC_Start_IT+0x80>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d104      	bne.n	80036b8 <HAL_TIM_IC_Start_IT+0x78>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e003      	b.n	80036c0 <HAL_TIM_IC_Start_IT+0x80>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80036c2:	7bbb      	ldrb	r3, [r7, #14]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d102      	bne.n	80036ce <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80036c8:	7b7b      	ldrb	r3, [r7, #13]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0c2      	b.n	8003858 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_IC_Start_IT+0xa2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e0:	e013      	b.n	800370a <HAL_TIM_IC_Start_IT+0xca>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d104      	bne.n	80036f2 <HAL_TIM_IC_Start_IT+0xb2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036f0:	e00b      	b.n	800370a <HAL_TIM_IC_Start_IT+0xca>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d104      	bne.n	8003702 <HAL_TIM_IC_Start_IT+0xc2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003700:	e003      	b.n	800370a <HAL_TIM_IC_Start_IT+0xca>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d104      	bne.n	800371a <HAL_TIM_IC_Start_IT+0xda>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003718:	e013      	b.n	8003742 <HAL_TIM_IC_Start_IT+0x102>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d104      	bne.n	800372a <HAL_TIM_IC_Start_IT+0xea>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003728:	e00b      	b.n	8003742 <HAL_TIM_IC_Start_IT+0x102>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d104      	bne.n	800373a <HAL_TIM_IC_Start_IT+0xfa>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003738:	e003      	b.n	8003742 <HAL_TIM_IC_Start_IT+0x102>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b0c      	cmp	r3, #12
 8003746:	d841      	bhi.n	80037cc <HAL_TIM_IC_Start_IT+0x18c>
 8003748:	a201      	add	r2, pc, #4	@ (adr r2, 8003750 <HAL_TIM_IC_Start_IT+0x110>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003785 	.word	0x08003785
 8003754:	080037cd 	.word	0x080037cd
 8003758:	080037cd 	.word	0x080037cd
 800375c:	080037cd 	.word	0x080037cd
 8003760:	08003797 	.word	0x08003797
 8003764:	080037cd 	.word	0x080037cd
 8003768:	080037cd 	.word	0x080037cd
 800376c:	080037cd 	.word	0x080037cd
 8003770:	080037a9 	.word	0x080037a9
 8003774:	080037cd 	.word	0x080037cd
 8003778:	080037cd 	.word	0x080037cd
 800377c:	080037cd 	.word	0x080037cd
 8003780:	080037bb 	.word	0x080037bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0202 	orr.w	r2, r2, #2
 8003792:	60da      	str	r2, [r3, #12]
      break;
 8003794:	e01d      	b.n	80037d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0204 	orr.w	r2, r2, #4
 80037a4:	60da      	str	r2, [r3, #12]
      break;
 80037a6:	e014      	b.n	80037d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0208 	orr.w	r2, r2, #8
 80037b6:	60da      	str	r2, [r3, #12]
      break;
 80037b8:	e00b      	b.n	80037d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0210 	orr.w	r2, r2, #16
 80037c8:	60da      	str	r2, [r3, #12]
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
      break;
 80037d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d13e      	bne.n	8003856 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	6839      	ldr	r1, [r7, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fd4b 	bl	800427c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003860 <HAL_TIM_IC_Start_IT+0x220>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d018      	beq.n	8003822 <HAL_TIM_IC_Start_IT+0x1e2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f8:	d013      	beq.n	8003822 <HAL_TIM_IC_Start_IT+0x1e2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a19      	ldr	r2, [pc, #100]	@ (8003864 <HAL_TIM_IC_Start_IT+0x224>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00e      	beq.n	8003822 <HAL_TIM_IC_Start_IT+0x1e2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a17      	ldr	r2, [pc, #92]	@ (8003868 <HAL_TIM_IC_Start_IT+0x228>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d009      	beq.n	8003822 <HAL_TIM_IC_Start_IT+0x1e2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a16      	ldr	r2, [pc, #88]	@ (800386c <HAL_TIM_IC_Start_IT+0x22c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d004      	beq.n	8003822 <HAL_TIM_IC_Start_IT+0x1e2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a14      	ldr	r2, [pc, #80]	@ (8003870 <HAL_TIM_IC_Start_IT+0x230>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d111      	bne.n	8003846 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b06      	cmp	r3, #6
 8003832:	d010      	beq.n	8003856 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003844:	e007      	b.n	8003856 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003856:	7bfb      	ldrb	r3, [r7, #15]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40010000 	.word	0x40010000
 8003864:	40000400 	.word	0x40000400
 8003868:	40000800 	.word	0x40000800
 800386c:	40000c00 	.word	0x40000c00
 8003870:	40014000 	.word	0x40014000

08003874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d020      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01b      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0202 	mvn.w	r2, #2
 80038a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fd fb2e 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fa76 	bl	8003db8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fa7d 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d020      	beq.n	8003924 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01b      	beq.n	8003924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0204 	mvn.w	r2, #4
 80038f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd fb08 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fa50 	bl	8003db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fa57 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d020      	beq.n	8003970 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01b      	beq.n	8003970 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0208 	mvn.w	r2, #8
 8003940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2204      	movs	r2, #4
 8003946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd fae2 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa2a 	bl	8003db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fa31 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b00      	cmp	r3, #0
 8003978:	d020      	beq.n	80039bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01b      	beq.n	80039bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0210 	mvn.w	r2, #16
 800398c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2208      	movs	r2, #8
 8003992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd fabc 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fa04 	bl	8003db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fa0b 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0201 	mvn.w	r2, #1
 80039d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f9e2 	bl	8003da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00c      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fcda 	bl	80043b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00c      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f9dc 	bl	8003de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00c      	beq.n	8003a4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0220 	mvn.w	r2, #32
 8003a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fcac 	bl	80043a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e088      	b.n	8003b84 <HAL_TIM_IC_ConfigChannel+0x130>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003a90:	f000 fa3c 	bl	8003f0c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 020c 	bic.w	r2, r2, #12
 8003aa2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6999      	ldr	r1, [r3, #24]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	619a      	str	r2, [r3, #24]
 8003ab6:	e060      	b.n	8003b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d11c      	bne.n	8003af8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003ace:	f000 fab4 	bl	800403a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003ae0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6999      	ldr	r1, [r3, #24]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	619a      	str	r2, [r3, #24]
 8003af6:	e040      	b.n	8003b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d11b      	bne.n	8003b36 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003b0e:	f000 fb01 	bl	8004114 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 020c 	bic.w	r2, r2, #12
 8003b20:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]
 8003b34:	e021      	b.n	8003b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b0c      	cmp	r3, #12
 8003b3a:	d11c      	bne.n	8003b76 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003b4c:	f000 fb1e 	bl	800418c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b5e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69d9      	ldr	r1, [r3, #28]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	021a      	lsls	r2, r3, #8
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	61da      	str	r2, [r3, #28]
 8003b74:	e001      	b.n	8003b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e0b4      	b.n	8003d12 <HAL_TIM_ConfigClockSource+0x186>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be0:	d03e      	beq.n	8003c60 <HAL_TIM_ConfigClockSource+0xd4>
 8003be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be6:	f200 8087 	bhi.w	8003cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bee:	f000 8086 	beq.w	8003cfe <HAL_TIM_ConfigClockSource+0x172>
 8003bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf6:	d87f      	bhi.n	8003cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf8:	2b70      	cmp	r3, #112	@ 0x70
 8003bfa:	d01a      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0xa6>
 8003bfc:	2b70      	cmp	r3, #112	@ 0x70
 8003bfe:	d87b      	bhi.n	8003cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003c00:	2b60      	cmp	r3, #96	@ 0x60
 8003c02:	d050      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0x11a>
 8003c04:	2b60      	cmp	r3, #96	@ 0x60
 8003c06:	d877      	bhi.n	8003cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003c08:	2b50      	cmp	r3, #80	@ 0x50
 8003c0a:	d03c      	beq.n	8003c86 <HAL_TIM_ConfigClockSource+0xfa>
 8003c0c:	2b50      	cmp	r3, #80	@ 0x50
 8003c0e:	d873      	bhi.n	8003cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003c10:	2b40      	cmp	r3, #64	@ 0x40
 8003c12:	d058      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0x13a>
 8003c14:	2b40      	cmp	r3, #64	@ 0x40
 8003c16:	d86f      	bhi.n	8003cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003c18:	2b30      	cmp	r3, #48	@ 0x30
 8003c1a:	d064      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c1c:	2b30      	cmp	r3, #48	@ 0x30
 8003c1e:	d86b      	bhi.n	8003cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d060      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d867      	bhi.n	8003cf8 <HAL_TIM_ConfigClockSource+0x16c>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d05c      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d05a      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c30:	e062      	b.n	8003cf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c42:	f000 fafb 	bl	800423c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	609a      	str	r2, [r3, #8]
      break;
 8003c5e:	e04f      	b.n	8003d00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c70:	f000 fae4 	bl	800423c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c82:	609a      	str	r2, [r3, #8]
      break;
 8003c84:	e03c      	b.n	8003d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c92:	461a      	mov	r2, r3
 8003c94:	f000 f9a2 	bl	8003fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2150      	movs	r1, #80	@ 0x50
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fab1 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003ca4:	e02c      	b.n	8003d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f000 f9fe 	bl	80040b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2160      	movs	r1, #96	@ 0x60
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 faa1 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003cc4:	e01c      	b.n	8003d00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f000 f982 	bl	8003fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2140      	movs	r1, #64	@ 0x40
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fa91 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003ce4:	e00c      	b.n	8003d00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f000 fa88 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003cf6:	e003      	b.n	8003d00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cfc:	e000      	b.n	8003d00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b0c      	cmp	r3, #12
 8003d2e:	d831      	bhi.n	8003d94 <HAL_TIM_ReadCapturedValue+0x78>
 8003d30:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d6d 	.word	0x08003d6d
 8003d3c:	08003d95 	.word	0x08003d95
 8003d40:	08003d95 	.word	0x08003d95
 8003d44:	08003d95 	.word	0x08003d95
 8003d48:	08003d77 	.word	0x08003d77
 8003d4c:	08003d95 	.word	0x08003d95
 8003d50:	08003d95 	.word	0x08003d95
 8003d54:	08003d95 	.word	0x08003d95
 8003d58:	08003d81 	.word	0x08003d81
 8003d5c:	08003d95 	.word	0x08003d95
 8003d60:	08003d95 	.word	0x08003d95
 8003d64:	08003d95 	.word	0x08003d95
 8003d68:	08003d8b 	.word	0x08003d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d72:	60fb      	str	r3, [r7, #12]

      break;
 8003d74:	e00f      	b.n	8003d96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	60fb      	str	r3, [r7, #12]

      break;
 8003d7e:	e00a      	b.n	8003d96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d86:	60fb      	str	r3, [r7, #12]

      break;
 8003d88:	e005      	b.n	8003d96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	60fb      	str	r3, [r7, #12]

      break;
 8003d92:	e000      	b.n	8003d96 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003d94:	bf00      	nop
  }

  return tmpreg;
 8003d96:	68fb      	ldr	r3, [r7, #12]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3714      	adds	r7, #20
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3a      	ldr	r2, [pc, #232]	@ (8003ef0 <TIM_Base_SetConfig+0xfc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00f      	beq.n	8003e2c <TIM_Base_SetConfig+0x38>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e12:	d00b      	beq.n	8003e2c <TIM_Base_SetConfig+0x38>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a37      	ldr	r2, [pc, #220]	@ (8003ef4 <TIM_Base_SetConfig+0x100>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d007      	beq.n	8003e2c <TIM_Base_SetConfig+0x38>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a36      	ldr	r2, [pc, #216]	@ (8003ef8 <TIM_Base_SetConfig+0x104>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_Base_SetConfig+0x38>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a35      	ldr	r2, [pc, #212]	@ (8003efc <TIM_Base_SetConfig+0x108>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d108      	bne.n	8003e3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2b      	ldr	r2, [pc, #172]	@ (8003ef0 <TIM_Base_SetConfig+0xfc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01b      	beq.n	8003e7e <TIM_Base_SetConfig+0x8a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e4c:	d017      	beq.n	8003e7e <TIM_Base_SetConfig+0x8a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a28      	ldr	r2, [pc, #160]	@ (8003ef4 <TIM_Base_SetConfig+0x100>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <TIM_Base_SetConfig+0x8a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a27      	ldr	r2, [pc, #156]	@ (8003ef8 <TIM_Base_SetConfig+0x104>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00f      	beq.n	8003e7e <TIM_Base_SetConfig+0x8a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a26      	ldr	r2, [pc, #152]	@ (8003efc <TIM_Base_SetConfig+0x108>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00b      	beq.n	8003e7e <TIM_Base_SetConfig+0x8a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a25      	ldr	r2, [pc, #148]	@ (8003f00 <TIM_Base_SetConfig+0x10c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <TIM_Base_SetConfig+0x8a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a24      	ldr	r2, [pc, #144]	@ (8003f04 <TIM_Base_SetConfig+0x110>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_Base_SetConfig+0x8a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a23      	ldr	r2, [pc, #140]	@ (8003f08 <TIM_Base_SetConfig+0x114>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d108      	bne.n	8003e90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef0 <TIM_Base_SetConfig+0xfc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d103      	bne.n	8003ec4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f023 0201 	bic.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	611a      	str	r2, [r3, #16]
  }
}
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40010000 	.word	0x40010000
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	40000800 	.word	0x40000800
 8003efc:	40000c00 	.word	0x40000c00
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800

08003f0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f023 0201 	bic.w	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4a24      	ldr	r2, [pc, #144]	@ (8003fc8 <TIM_TI1_SetConfig+0xbc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <TIM_TI1_SetConfig+0x56>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f40:	d00f      	beq.n	8003f62 <TIM_TI1_SetConfig+0x56>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a21      	ldr	r2, [pc, #132]	@ (8003fcc <TIM_TI1_SetConfig+0xc0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <TIM_TI1_SetConfig+0x56>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a20      	ldr	r2, [pc, #128]	@ (8003fd0 <TIM_TI1_SetConfig+0xc4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <TIM_TI1_SetConfig+0x56>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd4 <TIM_TI1_SetConfig+0xc8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_TI1_SetConfig+0x56>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd8 <TIM_TI1_SetConfig+0xcc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <TIM_TI1_SetConfig+0x5a>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <TIM_TI1_SetConfig+0x5c>
 8003f66:	2300      	movs	r3, #0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 0303 	bic.w	r3, r3, #3
 8003f72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e003      	b.n	8003f86 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f023 030a 	bic.w	r3, r3, #10
 8003fa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f003 030a 	and.w	r3, r3, #10
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40014000 	.word	0x40014000

08003fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f023 0201 	bic.w	r2, r3, #1
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 030a 	bic.w	r3, r3, #10
 8004018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800403a:	b480      	push	{r7}
 800403c:	b087      	sub	sp, #28
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f023 0210 	bic.w	r2, r3, #16
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	031b      	lsls	r3, r3, #12
 800407e:	b29b      	uxth	r3, r3
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800408c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 0210 	bic.w	r2, r3, #16
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	031b      	lsls	r3, r3, #12
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	621a      	str	r2, [r3, #32]
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f023 0303 	bic.w	r3, r3, #3
 8004140:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004150:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	b2db      	uxtb	r3, r3
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004164:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	621a      	str	r2, [r3, #32]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	031b      	lsls	r3, r3, #12
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80041de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	031b      	lsls	r3, r3, #12
 80041e4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	f043 0307 	orr.w	r3, r3, #7
 8004228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	431a      	orrs	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	609a      	str	r2, [r3, #8]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2201      	movs	r2, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	43db      	mvns	r3, r3
 800429e:	401a      	ands	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1a      	ldr	r2, [r3, #32]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042dc:	2302      	movs	r3, #2
 80042de:	e050      	b.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1c      	ldr	r2, [pc, #112]	@ (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800432c:	d013      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a18      	ldr	r2, [pc, #96]	@ (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a16      	ldr	r2, [pc, #88]	@ (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a15      	ldr	r2, [pc, #84]	@ (800439c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a13      	ldr	r2, [pc, #76]	@ (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d10c      	bne.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800435c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	4313      	orrs	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40010000 	.word	0x40010000
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800
 800439c:	40000c00 	.word	0x40000c00
 80043a0:	40014000 	.word	0x40014000

080043a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e042      	b.n	8004464 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd fabe 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2224      	movs	r2, #36	@ 0x24
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800440e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fdbd 	bl	8004f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004424:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004434:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004444:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	@ 0x28
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	4613      	mov	r3, r2
 800447a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b20      	cmp	r3, #32
 800448a:	d175      	bne.n	8004578 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_UART_Transmit+0x2c>
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e06e      	b.n	800457a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2221      	movs	r2, #33	@ 0x21
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044aa:	f7fd fcf7 	bl	8001e9c <HAL_GetTick>
 80044ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	88fa      	ldrh	r2, [r7, #6]
 80044ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c4:	d108      	bne.n	80044d8 <HAL_UART_Transmit+0x6c>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d104      	bne.n	80044d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	e003      	b.n	80044e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044e0:	e02e      	b.n	8004540 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2200      	movs	r2, #0
 80044ea:	2180      	movs	r1, #128	@ 0x80
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fb1f 	bl	8004b30 <UART_WaitOnFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e03a      	b.n	800457a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004518:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	3302      	adds	r3, #2
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	e007      	b.n	8004532 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	3301      	adds	r3, #1
 8004530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1cb      	bne.n	80044e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	2140      	movs	r1, #64	@ 0x40
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 faeb 	bl	8004b30 <UART_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e006      	b.n	800457a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	e000      	b.n	800457a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004578:	2302      	movs	r3, #2
  }
}
 800457a:	4618      	mov	r0, r3
 800457c:	3720      	adds	r7, #32
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	4613      	mov	r3, r2
 800458e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b20      	cmp	r3, #32
 800459a:	d112      	bne.n	80045c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_UART_Receive_IT+0x26>
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e00b      	b.n	80045c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	461a      	mov	r2, r3
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fb12 	bl	8004be2 <UART_Start_Receive_IT>
 80045be:	4603      	mov	r3, r0
 80045c0:	e000      	b.n	80045c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
  }
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b0ba      	sub	sp, #232	@ 0xe8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800460a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10f      	bne.n	8004632 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_UART_IRQHandler+0x66>
 800461e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fbf2 	bl	8004e14 <UART_Receive_IT>
      return;
 8004630:	e25b      	b.n	8004aea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80de 	beq.w	80047f8 <HAL_UART_IRQHandler+0x22c>
 800463c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800464c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80d1 	beq.w	80047f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <HAL_UART_IRQHandler+0xae>
 8004662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004672:	f043 0201 	orr.w	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800467a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_UART_IRQHandler+0xd2>
 8004686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	f043 0202 	orr.w	r2, r3, #2
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00b      	beq.n	80046c2 <HAL_UART_IRQHandler+0xf6>
 80046aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ba:	f043 0204 	orr.w	r2, r3, #4
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d011      	beq.n	80046f2 <HAL_UART_IRQHandler+0x126>
 80046ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d105      	bne.n	80046e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ea:	f043 0208 	orr.w	r2, r3, #8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 81f2 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_UART_IRQHandler+0x14e>
 8004708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fb7d 	bl	8004e14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004724:	2b40      	cmp	r3, #64	@ 0x40
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d103      	bne.n	8004746 <HAL_UART_IRQHandler+0x17a>
 800473e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d04f      	beq.n	80047e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa85 	bl	8004c56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004756:	2b40      	cmp	r3, #64	@ 0x40
 8004758:	d141      	bne.n	80047de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3314      	adds	r3, #20
 8004760:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004770:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004778:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3314      	adds	r3, #20
 8004782:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004786:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800478a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004792:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800479e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1d9      	bne.n	800475a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d013      	beq.n	80047d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b2:	4a7e      	ldr	r2, [pc, #504]	@ (80049ac <HAL_UART_IRQHandler+0x3e0>)
 80047b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fd fdce 	bl	800235c <HAL_DMA_Abort_IT>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047d0:	4610      	mov	r0, r2
 80047d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	e00e      	b.n	80047f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f994 	bl	8004b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047dc:	e00a      	b.n	80047f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f990 	bl	8004b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e4:	e006      	b.n	80047f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f98c 	bl	8004b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047f2:	e175      	b.n	8004ae0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	bf00      	nop
    return;
 80047f6:	e173      	b.n	8004ae0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	f040 814f 	bne.w	8004aa0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8148 	beq.w	8004aa0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8141 	beq.w	8004aa0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800481e:	2300      	movs	r3, #0
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483e:	2b40      	cmp	r3, #64	@ 0x40
 8004840:	f040 80b6 	bne.w	80049b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004850:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8145 	beq.w	8004ae4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800485e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004862:	429a      	cmp	r2, r3
 8004864:	f080 813e 	bcs.w	8004ae4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800486e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800487a:	f000 8088 	beq.w	800498e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004894:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800489c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80048aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1d9      	bne.n	800487e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3314      	adds	r3, #20
 80048d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004900:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e1      	bne.n	80048ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3314      	adds	r3, #20
 800490c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800491c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800492a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800492c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004930:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004938:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e3      	bne.n	8004906 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800495c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	330c      	adds	r3, #12
 800496c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004970:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004972:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004976:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800497e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e3      	bne.n	800494c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004988:	4618      	mov	r0, r3
 800498a:	f7fd fc77 	bl	800227c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2202      	movs	r2, #2
 8004992:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800499c:	b29b      	uxth	r3, r3
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	4619      	mov	r1, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f8b7 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049aa:	e09b      	b.n	8004ae4 <HAL_UART_IRQHandler+0x518>
 80049ac:	08004d1d 	.word	0x08004d1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 808e 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8089 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80049fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a02:	e841 2300 	strex	r3, r2, [r1]
 8004a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e3      	bne.n	80049d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3314      	adds	r3, #20
 8004a14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3314      	adds	r3, #20
 8004a2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a32:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e3      	bne.n	8004a0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0310 	bic.w	r3, r3, #16
 8004a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a78:	61fa      	str	r2, [r7, #28]
 8004a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	69b9      	ldr	r1, [r7, #24]
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	617b      	str	r3, [r7, #20]
   return(result);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e3      	bne.n	8004a54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f83d 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a9e:	e023      	b.n	8004ae8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d009      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x4f4>
 8004aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f943 	bl	8004d44 <UART_Transmit_IT>
    return;
 8004abe:	e014      	b.n	8004aea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00e      	beq.n	8004aea <HAL_UART_IRQHandler+0x51e>
 8004acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f983 	bl	8004de4 <UART_EndTransmit_IT>
    return;
 8004ade:	e004      	b.n	8004aea <HAL_UART_IRQHandler+0x51e>
    return;
 8004ae0:	bf00      	nop
 8004ae2:	e002      	b.n	8004aea <HAL_UART_IRQHandler+0x51e>
      return;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <HAL_UART_IRQHandler+0x51e>
      return;
 8004ae8:	bf00      	nop
  }
}
 8004aea:	37e8      	adds	r7, #232	@ 0xe8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b40:	e03b      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d037      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4a:	f7fd f9a7 	bl	8001e9c <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	6a3a      	ldr	r2, [r7, #32]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e03a      	b.n	8004bda <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d023      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b80      	cmp	r3, #128	@ 0x80
 8004b76:	d020      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b40      	cmp	r3, #64	@ 0x40
 8004b7c:	d01d      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d116      	bne.n	8004bba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f857 	bl	8004c56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2208      	movs	r2, #8
 8004bac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e00f      	b.n	8004bda <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	bf0c      	ite	eq
 8004bca:	2301      	moveq	r3, #1
 8004bcc:	2300      	movne	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d0b4      	beq.n	8004b42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	4613      	mov	r3, r2
 8004bee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	88fa      	ldrh	r2, [r7, #6]
 8004bfa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	88fa      	ldrh	r2, [r7, #6]
 8004c00:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2222      	movs	r2, #34	@ 0x22
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c26:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0220 	orr.w	r2, r2, #32
 8004c46:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b095      	sub	sp, #84	@ 0x54
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	330c      	adds	r3, #12
 8004c7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c7e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e5      	bne.n	8004c5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3314      	adds	r3, #20
 8004c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3314      	adds	r3, #20
 8004cb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e5      	bne.n	8004c92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d119      	bne.n	8004d02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f023 0310 	bic.w	r3, r3, #16
 8004ce4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	330c      	adds	r3, #12
 8004cec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cee:	61ba      	str	r2, [r7, #24]
 8004cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6979      	ldr	r1, [r7, #20]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e5      	bne.n	8004cce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d10:	bf00      	nop
 8004d12:	3754      	adds	r7, #84	@ 0x54
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff fee4 	bl	8004b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b21      	cmp	r3, #33	@ 0x21
 8004d56:	d13e      	bne.n	8004dd6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d60:	d114      	bne.n	8004d8c <UART_Transmit_IT+0x48>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d110      	bne.n	8004d8c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	1c9a      	adds	r2, r3, #2
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	621a      	str	r2, [r3, #32]
 8004d8a:	e008      	b.n	8004d9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	1c59      	adds	r1, r3, #1
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6211      	str	r1, [r2, #32]
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	4619      	mov	r1, r3
 8004dac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10f      	bne.n	8004dd2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dc0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dd0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e000      	b.n	8004dd8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004dd6:	2302      	movs	r3, #2
  }
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dfa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff fe73 	bl	8004af0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08c      	sub	sp, #48	@ 0x30
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b22      	cmp	r3, #34	@ 0x22
 8004e26:	f040 80ae 	bne.w	8004f86 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e32:	d117      	bne.n	8004e64 <UART_Receive_IT+0x50>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d113      	bne.n	8004e64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e44:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	1c9a      	adds	r2, r3, #2
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e62:	e026      	b.n	8004eb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e76:	d007      	beq.n	8004e88 <UART_Receive_IT+0x74>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <UART_Receive_IT+0x82>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	e008      	b.n	8004ea8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d15d      	bne.n	8004f82 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0220 	bic.w	r2, r2, #32
 8004ed4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ee4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695a      	ldr	r2, [r3, #20]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d135      	bne.n	8004f78 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	613b      	str	r3, [r7, #16]
   return(result);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f023 0310 	bic.w	r3, r3, #16
 8004f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f32:	623a      	str	r2, [r7, #32]
 8004f34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	69f9      	ldr	r1, [r7, #28]
 8004f38:	6a3a      	ldr	r2, [r7, #32]
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e5      	bne.n	8004f12 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d10a      	bne.n	8004f6a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff fdd1 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
 8004f76:	e002      	b.n	8004f7e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fc fbc5 	bl	8001708 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e002      	b.n	8004f88 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e000      	b.n	8004f88 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3730      	adds	r7, #48	@ 0x30
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f94:	b0c0      	sub	sp, #256	@ 0x100
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fac:	68d9      	ldr	r1, [r3, #12]
 8004fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	ea40 0301 	orr.w	r3, r0, r1
 8004fb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004fe8:	f021 010c 	bic.w	r1, r1, #12
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500a:	6999      	ldr	r1, [r3, #24]
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	ea40 0301 	orr.w	r3, r0, r1
 8005016:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b8f      	ldr	r3, [pc, #572]	@ (800525c <UART_SetConfig+0x2cc>)
 8005020:	429a      	cmp	r2, r3
 8005022:	d005      	beq.n	8005030 <UART_SetConfig+0xa0>
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b8d      	ldr	r3, [pc, #564]	@ (8005260 <UART_SetConfig+0x2d0>)
 800502c:	429a      	cmp	r2, r3
 800502e:	d104      	bne.n	800503a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005030:	f7fe f9ee 	bl	8003410 <HAL_RCC_GetPCLK2Freq>
 8005034:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005038:	e003      	b.n	8005042 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800503a:	f7fe f9d5 	bl	80033e8 <HAL_RCC_GetPCLK1Freq>
 800503e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800504c:	f040 810c 	bne.w	8005268 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005054:	2200      	movs	r2, #0
 8005056:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800505a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800505e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005062:	4622      	mov	r2, r4
 8005064:	462b      	mov	r3, r5
 8005066:	1891      	adds	r1, r2, r2
 8005068:	65b9      	str	r1, [r7, #88]	@ 0x58
 800506a:	415b      	adcs	r3, r3
 800506c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800506e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005072:	4621      	mov	r1, r4
 8005074:	eb12 0801 	adds.w	r8, r2, r1
 8005078:	4629      	mov	r1, r5
 800507a:	eb43 0901 	adc.w	r9, r3, r1
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800508a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800508e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005092:	4690      	mov	r8, r2
 8005094:	4699      	mov	r9, r3
 8005096:	4623      	mov	r3, r4
 8005098:	eb18 0303 	adds.w	r3, r8, r3
 800509c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050a0:	462b      	mov	r3, r5
 80050a2:	eb49 0303 	adc.w	r3, r9, r3
 80050a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050be:	460b      	mov	r3, r1
 80050c0:	18db      	adds	r3, r3, r3
 80050c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050c4:	4613      	mov	r3, r2
 80050c6:	eb42 0303 	adc.w	r3, r2, r3
 80050ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80050cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050d4:	f7fb fd80 	bl	8000bd8 <__aeabi_uldivmod>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4b61      	ldr	r3, [pc, #388]	@ (8005264 <UART_SetConfig+0x2d4>)
 80050de:	fba3 2302 	umull	r2, r3, r3, r2
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	011c      	lsls	r4, r3, #4
 80050e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050f8:	4642      	mov	r2, r8
 80050fa:	464b      	mov	r3, r9
 80050fc:	1891      	adds	r1, r2, r2
 80050fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005100:	415b      	adcs	r3, r3
 8005102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005104:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005108:	4641      	mov	r1, r8
 800510a:	eb12 0a01 	adds.w	sl, r2, r1
 800510e:	4649      	mov	r1, r9
 8005110:	eb43 0b01 	adc.w	fp, r3, r1
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005120:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005124:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005128:	4692      	mov	sl, r2
 800512a:	469b      	mov	fp, r3
 800512c:	4643      	mov	r3, r8
 800512e:	eb1a 0303 	adds.w	r3, sl, r3
 8005132:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005136:	464b      	mov	r3, r9
 8005138:	eb4b 0303 	adc.w	r3, fp, r3
 800513c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800514c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005150:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005154:	460b      	mov	r3, r1
 8005156:	18db      	adds	r3, r3, r3
 8005158:	643b      	str	r3, [r7, #64]	@ 0x40
 800515a:	4613      	mov	r3, r2
 800515c:	eb42 0303 	adc.w	r3, r2, r3
 8005160:	647b      	str	r3, [r7, #68]	@ 0x44
 8005162:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005166:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800516a:	f7fb fd35 	bl	8000bd8 <__aeabi_uldivmod>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4611      	mov	r1, r2
 8005174:	4b3b      	ldr	r3, [pc, #236]	@ (8005264 <UART_SetConfig+0x2d4>)
 8005176:	fba3 2301 	umull	r2, r3, r3, r1
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2264      	movs	r2, #100	@ 0x64
 800517e:	fb02 f303 	mul.w	r3, r2, r3
 8005182:	1acb      	subs	r3, r1, r3
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800518a:	4b36      	ldr	r3, [pc, #216]	@ (8005264 <UART_SetConfig+0x2d4>)
 800518c:	fba3 2302 	umull	r2, r3, r3, r2
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005198:	441c      	add	r4, r3
 800519a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051ac:	4642      	mov	r2, r8
 80051ae:	464b      	mov	r3, r9
 80051b0:	1891      	adds	r1, r2, r2
 80051b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051b4:	415b      	adcs	r3, r3
 80051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051bc:	4641      	mov	r1, r8
 80051be:	1851      	adds	r1, r2, r1
 80051c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80051c2:	4649      	mov	r1, r9
 80051c4:	414b      	adcs	r3, r1
 80051c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051d4:	4659      	mov	r1, fp
 80051d6:	00cb      	lsls	r3, r1, #3
 80051d8:	4651      	mov	r1, sl
 80051da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051de:	4651      	mov	r1, sl
 80051e0:	00ca      	lsls	r2, r1, #3
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	4603      	mov	r3, r0
 80051e8:	4642      	mov	r2, r8
 80051ea:	189b      	adds	r3, r3, r2
 80051ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051f0:	464b      	mov	r3, r9
 80051f2:	460a      	mov	r2, r1
 80051f4:	eb42 0303 	adc.w	r3, r2, r3
 80051f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005208:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800520c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005210:	460b      	mov	r3, r1
 8005212:	18db      	adds	r3, r3, r3
 8005214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005216:	4613      	mov	r3, r2
 8005218:	eb42 0303 	adc.w	r3, r2, r3
 800521c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800521e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005222:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005226:	f7fb fcd7 	bl	8000bd8 <__aeabi_uldivmod>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	4b0d      	ldr	r3, [pc, #52]	@ (8005264 <UART_SetConfig+0x2d4>)
 8005230:	fba3 1302 	umull	r1, r3, r3, r2
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	2164      	movs	r1, #100	@ 0x64
 8005238:	fb01 f303 	mul.w	r3, r1, r3
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	3332      	adds	r3, #50	@ 0x32
 8005242:	4a08      	ldr	r2, [pc, #32]	@ (8005264 <UART_SetConfig+0x2d4>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	f003 0207 	and.w	r2, r3, #7
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4422      	add	r2, r4
 8005256:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005258:	e106      	b.n	8005468 <UART_SetConfig+0x4d8>
 800525a:	bf00      	nop
 800525c:	40011000 	.word	0x40011000
 8005260:	40011400 	.word	0x40011400
 8005264:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800526c:	2200      	movs	r2, #0
 800526e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005272:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005276:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800527a:	4642      	mov	r2, r8
 800527c:	464b      	mov	r3, r9
 800527e:	1891      	adds	r1, r2, r2
 8005280:	6239      	str	r1, [r7, #32]
 8005282:	415b      	adcs	r3, r3
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
 8005286:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800528a:	4641      	mov	r1, r8
 800528c:	1854      	adds	r4, r2, r1
 800528e:	4649      	mov	r1, r9
 8005290:	eb43 0501 	adc.w	r5, r3, r1
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	00eb      	lsls	r3, r5, #3
 800529e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052a2:	00e2      	lsls	r2, r4, #3
 80052a4:	4614      	mov	r4, r2
 80052a6:	461d      	mov	r5, r3
 80052a8:	4643      	mov	r3, r8
 80052aa:	18e3      	adds	r3, r4, r3
 80052ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052b0:	464b      	mov	r3, r9
 80052b2:	eb45 0303 	adc.w	r3, r5, r3
 80052b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052d6:	4629      	mov	r1, r5
 80052d8:	008b      	lsls	r3, r1, #2
 80052da:	4621      	mov	r1, r4
 80052dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052e0:	4621      	mov	r1, r4
 80052e2:	008a      	lsls	r2, r1, #2
 80052e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052e8:	f7fb fc76 	bl	8000bd8 <__aeabi_uldivmod>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4b60      	ldr	r3, [pc, #384]	@ (8005474 <UART_SetConfig+0x4e4>)
 80052f2:	fba3 2302 	umull	r2, r3, r3, r2
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	011c      	lsls	r4, r3, #4
 80052fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052fe:	2200      	movs	r2, #0
 8005300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005304:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005308:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800530c:	4642      	mov	r2, r8
 800530e:	464b      	mov	r3, r9
 8005310:	1891      	adds	r1, r2, r2
 8005312:	61b9      	str	r1, [r7, #24]
 8005314:	415b      	adcs	r3, r3
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800531c:	4641      	mov	r1, r8
 800531e:	1851      	adds	r1, r2, r1
 8005320:	6139      	str	r1, [r7, #16]
 8005322:	4649      	mov	r1, r9
 8005324:	414b      	adcs	r3, r1
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005334:	4659      	mov	r1, fp
 8005336:	00cb      	lsls	r3, r1, #3
 8005338:	4651      	mov	r1, sl
 800533a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800533e:	4651      	mov	r1, sl
 8005340:	00ca      	lsls	r2, r1, #3
 8005342:	4610      	mov	r0, r2
 8005344:	4619      	mov	r1, r3
 8005346:	4603      	mov	r3, r0
 8005348:	4642      	mov	r2, r8
 800534a:	189b      	adds	r3, r3, r2
 800534c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005350:	464b      	mov	r3, r9
 8005352:	460a      	mov	r2, r1
 8005354:	eb42 0303 	adc.w	r3, r2, r3
 8005358:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005366:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005374:	4649      	mov	r1, r9
 8005376:	008b      	lsls	r3, r1, #2
 8005378:	4641      	mov	r1, r8
 800537a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800537e:	4641      	mov	r1, r8
 8005380:	008a      	lsls	r2, r1, #2
 8005382:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005386:	f7fb fc27 	bl	8000bd8 <__aeabi_uldivmod>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4611      	mov	r1, r2
 8005390:	4b38      	ldr	r3, [pc, #224]	@ (8005474 <UART_SetConfig+0x4e4>)
 8005392:	fba3 2301 	umull	r2, r3, r3, r1
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2264      	movs	r2, #100	@ 0x64
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	1acb      	subs	r3, r1, r3
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	3332      	adds	r3, #50	@ 0x32
 80053a4:	4a33      	ldr	r2, [pc, #204]	@ (8005474 <UART_SetConfig+0x4e4>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053b0:	441c      	add	r4, r3
 80053b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b6:	2200      	movs	r2, #0
 80053b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80053ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80053bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053c0:	4642      	mov	r2, r8
 80053c2:	464b      	mov	r3, r9
 80053c4:	1891      	adds	r1, r2, r2
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	415b      	adcs	r3, r3
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053d0:	4641      	mov	r1, r8
 80053d2:	1851      	adds	r1, r2, r1
 80053d4:	6039      	str	r1, [r7, #0]
 80053d6:	4649      	mov	r1, r9
 80053d8:	414b      	adcs	r3, r1
 80053da:	607b      	str	r3, [r7, #4]
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053e8:	4659      	mov	r1, fp
 80053ea:	00cb      	lsls	r3, r1, #3
 80053ec:	4651      	mov	r1, sl
 80053ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053f2:	4651      	mov	r1, sl
 80053f4:	00ca      	lsls	r2, r1, #3
 80053f6:	4610      	mov	r0, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	4642      	mov	r2, r8
 80053fe:	189b      	adds	r3, r3, r2
 8005400:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005402:	464b      	mov	r3, r9
 8005404:	460a      	mov	r2, r1
 8005406:	eb42 0303 	adc.w	r3, r2, r3
 800540a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	663b      	str	r3, [r7, #96]	@ 0x60
 8005416:	667a      	str	r2, [r7, #100]	@ 0x64
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005424:	4649      	mov	r1, r9
 8005426:	008b      	lsls	r3, r1, #2
 8005428:	4641      	mov	r1, r8
 800542a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800542e:	4641      	mov	r1, r8
 8005430:	008a      	lsls	r2, r1, #2
 8005432:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005436:	f7fb fbcf 	bl	8000bd8 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <UART_SetConfig+0x4e4>)
 8005440:	fba3 1302 	umull	r1, r3, r3, r2
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	2164      	movs	r1, #100	@ 0x64
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	3332      	adds	r3, #50	@ 0x32
 8005452:	4a08      	ldr	r2, [pc, #32]	@ (8005474 <UART_SetConfig+0x4e4>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	f003 020f 	and.w	r2, r3, #15
 800545e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4422      	add	r2, r4
 8005466:	609a      	str	r2, [r3, #8]
}
 8005468:	bf00      	nop
 800546a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800546e:	46bd      	mov	sp, r7
 8005470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005474:	51eb851f 	.word	0x51eb851f

08005478 <__cvt>:
 8005478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800547c:	ec57 6b10 	vmov	r6, r7, d0
 8005480:	2f00      	cmp	r7, #0
 8005482:	460c      	mov	r4, r1
 8005484:	4619      	mov	r1, r3
 8005486:	463b      	mov	r3, r7
 8005488:	bfbb      	ittet	lt
 800548a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800548e:	461f      	movlt	r7, r3
 8005490:	2300      	movge	r3, #0
 8005492:	232d      	movlt	r3, #45	@ 0x2d
 8005494:	700b      	strb	r3, [r1, #0]
 8005496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005498:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800549c:	4691      	mov	r9, r2
 800549e:	f023 0820 	bic.w	r8, r3, #32
 80054a2:	bfbc      	itt	lt
 80054a4:	4632      	movlt	r2, r6
 80054a6:	4616      	movlt	r6, r2
 80054a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054ac:	d005      	beq.n	80054ba <__cvt+0x42>
 80054ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80054b2:	d100      	bne.n	80054b6 <__cvt+0x3e>
 80054b4:	3401      	adds	r4, #1
 80054b6:	2102      	movs	r1, #2
 80054b8:	e000      	b.n	80054bc <__cvt+0x44>
 80054ba:	2103      	movs	r1, #3
 80054bc:	ab03      	add	r3, sp, #12
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	ab02      	add	r3, sp, #8
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	ec47 6b10 	vmov	d0, r6, r7
 80054c8:	4653      	mov	r3, sl
 80054ca:	4622      	mov	r2, r4
 80054cc:	f001 f814 	bl	80064f8 <_dtoa_r>
 80054d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80054d4:	4605      	mov	r5, r0
 80054d6:	d119      	bne.n	800550c <__cvt+0x94>
 80054d8:	f019 0f01 	tst.w	r9, #1
 80054dc:	d00e      	beq.n	80054fc <__cvt+0x84>
 80054de:	eb00 0904 	add.w	r9, r0, r4
 80054e2:	2200      	movs	r2, #0
 80054e4:	2300      	movs	r3, #0
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fb fb05 	bl	8000af8 <__aeabi_dcmpeq>
 80054ee:	b108      	cbz	r0, 80054f4 <__cvt+0x7c>
 80054f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80054f4:	2230      	movs	r2, #48	@ 0x30
 80054f6:	9b03      	ldr	r3, [sp, #12]
 80054f8:	454b      	cmp	r3, r9
 80054fa:	d31e      	bcc.n	800553a <__cvt+0xc2>
 80054fc:	9b03      	ldr	r3, [sp, #12]
 80054fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005500:	1b5b      	subs	r3, r3, r5
 8005502:	4628      	mov	r0, r5
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	b004      	add	sp, #16
 8005508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800550c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005510:	eb00 0904 	add.w	r9, r0, r4
 8005514:	d1e5      	bne.n	80054e2 <__cvt+0x6a>
 8005516:	7803      	ldrb	r3, [r0, #0]
 8005518:	2b30      	cmp	r3, #48	@ 0x30
 800551a:	d10a      	bne.n	8005532 <__cvt+0xba>
 800551c:	2200      	movs	r2, #0
 800551e:	2300      	movs	r3, #0
 8005520:	4630      	mov	r0, r6
 8005522:	4639      	mov	r1, r7
 8005524:	f7fb fae8 	bl	8000af8 <__aeabi_dcmpeq>
 8005528:	b918      	cbnz	r0, 8005532 <__cvt+0xba>
 800552a:	f1c4 0401 	rsb	r4, r4, #1
 800552e:	f8ca 4000 	str.w	r4, [sl]
 8005532:	f8da 3000 	ldr.w	r3, [sl]
 8005536:	4499      	add	r9, r3
 8005538:	e7d3      	b.n	80054e2 <__cvt+0x6a>
 800553a:	1c59      	adds	r1, r3, #1
 800553c:	9103      	str	r1, [sp, #12]
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	e7d9      	b.n	80054f6 <__cvt+0x7e>

08005542 <__exponent>:
 8005542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005544:	2900      	cmp	r1, #0
 8005546:	bfba      	itte	lt
 8005548:	4249      	neglt	r1, r1
 800554a:	232d      	movlt	r3, #45	@ 0x2d
 800554c:	232b      	movge	r3, #43	@ 0x2b
 800554e:	2909      	cmp	r1, #9
 8005550:	7002      	strb	r2, [r0, #0]
 8005552:	7043      	strb	r3, [r0, #1]
 8005554:	dd29      	ble.n	80055aa <__exponent+0x68>
 8005556:	f10d 0307 	add.w	r3, sp, #7
 800555a:	461d      	mov	r5, r3
 800555c:	270a      	movs	r7, #10
 800555e:	461a      	mov	r2, r3
 8005560:	fbb1 f6f7 	udiv	r6, r1, r7
 8005564:	fb07 1416 	mls	r4, r7, r6, r1
 8005568:	3430      	adds	r4, #48	@ 0x30
 800556a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800556e:	460c      	mov	r4, r1
 8005570:	2c63      	cmp	r4, #99	@ 0x63
 8005572:	f103 33ff 	add.w	r3, r3, #4294967295
 8005576:	4631      	mov	r1, r6
 8005578:	dcf1      	bgt.n	800555e <__exponent+0x1c>
 800557a:	3130      	adds	r1, #48	@ 0x30
 800557c:	1e94      	subs	r4, r2, #2
 800557e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005582:	1c41      	adds	r1, r0, #1
 8005584:	4623      	mov	r3, r4
 8005586:	42ab      	cmp	r3, r5
 8005588:	d30a      	bcc.n	80055a0 <__exponent+0x5e>
 800558a:	f10d 0309 	add.w	r3, sp, #9
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	42ac      	cmp	r4, r5
 8005592:	bf88      	it	hi
 8005594:	2300      	movhi	r3, #0
 8005596:	3302      	adds	r3, #2
 8005598:	4403      	add	r3, r0
 800559a:	1a18      	subs	r0, r3, r0
 800559c:	b003      	add	sp, #12
 800559e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80055a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80055a8:	e7ed      	b.n	8005586 <__exponent+0x44>
 80055aa:	2330      	movs	r3, #48	@ 0x30
 80055ac:	3130      	adds	r1, #48	@ 0x30
 80055ae:	7083      	strb	r3, [r0, #2]
 80055b0:	70c1      	strb	r1, [r0, #3]
 80055b2:	1d03      	adds	r3, r0, #4
 80055b4:	e7f1      	b.n	800559a <__exponent+0x58>
	...

080055b8 <_printf_float>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	b08d      	sub	sp, #52	@ 0x34
 80055be:	460c      	mov	r4, r1
 80055c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80055c4:	4616      	mov	r6, r2
 80055c6:	461f      	mov	r7, r3
 80055c8:	4605      	mov	r5, r0
 80055ca:	f000 fe6f 	bl	80062ac <_localeconv_r>
 80055ce:	6803      	ldr	r3, [r0, #0]
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fa fe64 	bl	80002a0 <strlen>
 80055d8:	2300      	movs	r3, #0
 80055da:	930a      	str	r3, [sp, #40]	@ 0x28
 80055dc:	f8d8 3000 	ldr.w	r3, [r8]
 80055e0:	9005      	str	r0, [sp, #20]
 80055e2:	3307      	adds	r3, #7
 80055e4:	f023 0307 	bic.w	r3, r3, #7
 80055e8:	f103 0208 	add.w	r2, r3, #8
 80055ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80055f0:	f8d4 b000 	ldr.w	fp, [r4]
 80055f4:	f8c8 2000 	str.w	r2, [r8]
 80055f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005600:	9307      	str	r3, [sp, #28]
 8005602:	f8cd 8018 	str.w	r8, [sp, #24]
 8005606:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800560a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800560e:	4b9c      	ldr	r3, [pc, #624]	@ (8005880 <_printf_float+0x2c8>)
 8005610:	f04f 32ff 	mov.w	r2, #4294967295
 8005614:	f7fb faa2 	bl	8000b5c <__aeabi_dcmpun>
 8005618:	bb70      	cbnz	r0, 8005678 <_printf_float+0xc0>
 800561a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800561e:	4b98      	ldr	r3, [pc, #608]	@ (8005880 <_printf_float+0x2c8>)
 8005620:	f04f 32ff 	mov.w	r2, #4294967295
 8005624:	f7fb fa7c 	bl	8000b20 <__aeabi_dcmple>
 8005628:	bb30      	cbnz	r0, 8005678 <_printf_float+0xc0>
 800562a:	2200      	movs	r2, #0
 800562c:	2300      	movs	r3, #0
 800562e:	4640      	mov	r0, r8
 8005630:	4649      	mov	r1, r9
 8005632:	f7fb fa6b 	bl	8000b0c <__aeabi_dcmplt>
 8005636:	b110      	cbz	r0, 800563e <_printf_float+0x86>
 8005638:	232d      	movs	r3, #45	@ 0x2d
 800563a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800563e:	4a91      	ldr	r2, [pc, #580]	@ (8005884 <_printf_float+0x2cc>)
 8005640:	4b91      	ldr	r3, [pc, #580]	@ (8005888 <_printf_float+0x2d0>)
 8005642:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005646:	bf94      	ite	ls
 8005648:	4690      	movls	r8, r2
 800564a:	4698      	movhi	r8, r3
 800564c:	2303      	movs	r3, #3
 800564e:	6123      	str	r3, [r4, #16]
 8005650:	f02b 0304 	bic.w	r3, fp, #4
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	f04f 0900 	mov.w	r9, #0
 800565a:	9700      	str	r7, [sp, #0]
 800565c:	4633      	mov	r3, r6
 800565e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005660:	4621      	mov	r1, r4
 8005662:	4628      	mov	r0, r5
 8005664:	f000 f9d2 	bl	8005a0c <_printf_common>
 8005668:	3001      	adds	r0, #1
 800566a:	f040 808d 	bne.w	8005788 <_printf_float+0x1d0>
 800566e:	f04f 30ff 	mov.w	r0, #4294967295
 8005672:	b00d      	add	sp, #52	@ 0x34
 8005674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005678:	4642      	mov	r2, r8
 800567a:	464b      	mov	r3, r9
 800567c:	4640      	mov	r0, r8
 800567e:	4649      	mov	r1, r9
 8005680:	f7fb fa6c 	bl	8000b5c <__aeabi_dcmpun>
 8005684:	b140      	cbz	r0, 8005698 <_printf_float+0xe0>
 8005686:	464b      	mov	r3, r9
 8005688:	2b00      	cmp	r3, #0
 800568a:	bfbc      	itt	lt
 800568c:	232d      	movlt	r3, #45	@ 0x2d
 800568e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005692:	4a7e      	ldr	r2, [pc, #504]	@ (800588c <_printf_float+0x2d4>)
 8005694:	4b7e      	ldr	r3, [pc, #504]	@ (8005890 <_printf_float+0x2d8>)
 8005696:	e7d4      	b.n	8005642 <_printf_float+0x8a>
 8005698:	6863      	ldr	r3, [r4, #4]
 800569a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800569e:	9206      	str	r2, [sp, #24]
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	d13b      	bne.n	800571c <_printf_float+0x164>
 80056a4:	2306      	movs	r3, #6
 80056a6:	6063      	str	r3, [r4, #4]
 80056a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80056ac:	2300      	movs	r3, #0
 80056ae:	6022      	str	r2, [r4, #0]
 80056b0:	9303      	str	r3, [sp, #12]
 80056b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80056b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80056b8:	ab09      	add	r3, sp, #36	@ 0x24
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	6861      	ldr	r1, [r4, #4]
 80056be:	ec49 8b10 	vmov	d0, r8, r9
 80056c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80056c6:	4628      	mov	r0, r5
 80056c8:	f7ff fed6 	bl	8005478 <__cvt>
 80056cc:	9b06      	ldr	r3, [sp, #24]
 80056ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80056d0:	2b47      	cmp	r3, #71	@ 0x47
 80056d2:	4680      	mov	r8, r0
 80056d4:	d129      	bne.n	800572a <_printf_float+0x172>
 80056d6:	1cc8      	adds	r0, r1, #3
 80056d8:	db02      	blt.n	80056e0 <_printf_float+0x128>
 80056da:	6863      	ldr	r3, [r4, #4]
 80056dc:	4299      	cmp	r1, r3
 80056de:	dd41      	ble.n	8005764 <_printf_float+0x1ac>
 80056e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80056e4:	fa5f fa8a 	uxtb.w	sl, sl
 80056e8:	3901      	subs	r1, #1
 80056ea:	4652      	mov	r2, sl
 80056ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80056f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80056f2:	f7ff ff26 	bl	8005542 <__exponent>
 80056f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056f8:	1813      	adds	r3, r2, r0
 80056fa:	2a01      	cmp	r2, #1
 80056fc:	4681      	mov	r9, r0
 80056fe:	6123      	str	r3, [r4, #16]
 8005700:	dc02      	bgt.n	8005708 <_printf_float+0x150>
 8005702:	6822      	ldr	r2, [r4, #0]
 8005704:	07d2      	lsls	r2, r2, #31
 8005706:	d501      	bpl.n	800570c <_printf_float+0x154>
 8005708:	3301      	adds	r3, #1
 800570a:	6123      	str	r3, [r4, #16]
 800570c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0a2      	beq.n	800565a <_printf_float+0xa2>
 8005714:	232d      	movs	r3, #45	@ 0x2d
 8005716:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800571a:	e79e      	b.n	800565a <_printf_float+0xa2>
 800571c:	9a06      	ldr	r2, [sp, #24]
 800571e:	2a47      	cmp	r2, #71	@ 0x47
 8005720:	d1c2      	bne.n	80056a8 <_printf_float+0xf0>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1c0      	bne.n	80056a8 <_printf_float+0xf0>
 8005726:	2301      	movs	r3, #1
 8005728:	e7bd      	b.n	80056a6 <_printf_float+0xee>
 800572a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800572e:	d9db      	bls.n	80056e8 <_printf_float+0x130>
 8005730:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005734:	d118      	bne.n	8005768 <_printf_float+0x1b0>
 8005736:	2900      	cmp	r1, #0
 8005738:	6863      	ldr	r3, [r4, #4]
 800573a:	dd0b      	ble.n	8005754 <_printf_float+0x19c>
 800573c:	6121      	str	r1, [r4, #16]
 800573e:	b913      	cbnz	r3, 8005746 <_printf_float+0x18e>
 8005740:	6822      	ldr	r2, [r4, #0]
 8005742:	07d0      	lsls	r0, r2, #31
 8005744:	d502      	bpl.n	800574c <_printf_float+0x194>
 8005746:	3301      	adds	r3, #1
 8005748:	440b      	add	r3, r1
 800574a:	6123      	str	r3, [r4, #16]
 800574c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800574e:	f04f 0900 	mov.w	r9, #0
 8005752:	e7db      	b.n	800570c <_printf_float+0x154>
 8005754:	b913      	cbnz	r3, 800575c <_printf_float+0x1a4>
 8005756:	6822      	ldr	r2, [r4, #0]
 8005758:	07d2      	lsls	r2, r2, #31
 800575a:	d501      	bpl.n	8005760 <_printf_float+0x1a8>
 800575c:	3302      	adds	r3, #2
 800575e:	e7f4      	b.n	800574a <_printf_float+0x192>
 8005760:	2301      	movs	r3, #1
 8005762:	e7f2      	b.n	800574a <_printf_float+0x192>
 8005764:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800576a:	4299      	cmp	r1, r3
 800576c:	db05      	blt.n	800577a <_printf_float+0x1c2>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	6121      	str	r1, [r4, #16]
 8005772:	07d8      	lsls	r0, r3, #31
 8005774:	d5ea      	bpl.n	800574c <_printf_float+0x194>
 8005776:	1c4b      	adds	r3, r1, #1
 8005778:	e7e7      	b.n	800574a <_printf_float+0x192>
 800577a:	2900      	cmp	r1, #0
 800577c:	bfd4      	ite	le
 800577e:	f1c1 0202 	rsble	r2, r1, #2
 8005782:	2201      	movgt	r2, #1
 8005784:	4413      	add	r3, r2
 8005786:	e7e0      	b.n	800574a <_printf_float+0x192>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	055a      	lsls	r2, r3, #21
 800578c:	d407      	bmi.n	800579e <_printf_float+0x1e6>
 800578e:	6923      	ldr	r3, [r4, #16]
 8005790:	4642      	mov	r2, r8
 8005792:	4631      	mov	r1, r6
 8005794:	4628      	mov	r0, r5
 8005796:	47b8      	blx	r7
 8005798:	3001      	adds	r0, #1
 800579a:	d12b      	bne.n	80057f4 <_printf_float+0x23c>
 800579c:	e767      	b.n	800566e <_printf_float+0xb6>
 800579e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057a2:	f240 80dd 	bls.w	8005960 <_printf_float+0x3a8>
 80057a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057aa:	2200      	movs	r2, #0
 80057ac:	2300      	movs	r3, #0
 80057ae:	f7fb f9a3 	bl	8000af8 <__aeabi_dcmpeq>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d033      	beq.n	800581e <_printf_float+0x266>
 80057b6:	4a37      	ldr	r2, [pc, #220]	@ (8005894 <_printf_float+0x2dc>)
 80057b8:	2301      	movs	r3, #1
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	47b8      	blx	r7
 80057c0:	3001      	adds	r0, #1
 80057c2:	f43f af54 	beq.w	800566e <_printf_float+0xb6>
 80057c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80057ca:	4543      	cmp	r3, r8
 80057cc:	db02      	blt.n	80057d4 <_printf_float+0x21c>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	07d8      	lsls	r0, r3, #31
 80057d2:	d50f      	bpl.n	80057f4 <_printf_float+0x23c>
 80057d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f af45 	beq.w	800566e <_printf_float+0xb6>
 80057e4:	f04f 0900 	mov.w	r9, #0
 80057e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80057ec:	f104 0a1a 	add.w	sl, r4, #26
 80057f0:	45c8      	cmp	r8, r9
 80057f2:	dc09      	bgt.n	8005808 <_printf_float+0x250>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	079b      	lsls	r3, r3, #30
 80057f8:	f100 8103 	bmi.w	8005a02 <_printf_float+0x44a>
 80057fc:	68e0      	ldr	r0, [r4, #12]
 80057fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005800:	4298      	cmp	r0, r3
 8005802:	bfb8      	it	lt
 8005804:	4618      	movlt	r0, r3
 8005806:	e734      	b.n	8005672 <_printf_float+0xba>
 8005808:	2301      	movs	r3, #1
 800580a:	4652      	mov	r2, sl
 800580c:	4631      	mov	r1, r6
 800580e:	4628      	mov	r0, r5
 8005810:	47b8      	blx	r7
 8005812:	3001      	adds	r0, #1
 8005814:	f43f af2b 	beq.w	800566e <_printf_float+0xb6>
 8005818:	f109 0901 	add.w	r9, r9, #1
 800581c:	e7e8      	b.n	80057f0 <_printf_float+0x238>
 800581e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	dc39      	bgt.n	8005898 <_printf_float+0x2e0>
 8005824:	4a1b      	ldr	r2, [pc, #108]	@ (8005894 <_printf_float+0x2dc>)
 8005826:	2301      	movs	r3, #1
 8005828:	4631      	mov	r1, r6
 800582a:	4628      	mov	r0, r5
 800582c:	47b8      	blx	r7
 800582e:	3001      	adds	r0, #1
 8005830:	f43f af1d 	beq.w	800566e <_printf_float+0xb6>
 8005834:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005838:	ea59 0303 	orrs.w	r3, r9, r3
 800583c:	d102      	bne.n	8005844 <_printf_float+0x28c>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	07d9      	lsls	r1, r3, #31
 8005842:	d5d7      	bpl.n	80057f4 <_printf_float+0x23c>
 8005844:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005848:	4631      	mov	r1, r6
 800584a:	4628      	mov	r0, r5
 800584c:	47b8      	blx	r7
 800584e:	3001      	adds	r0, #1
 8005850:	f43f af0d 	beq.w	800566e <_printf_float+0xb6>
 8005854:	f04f 0a00 	mov.w	sl, #0
 8005858:	f104 0b1a 	add.w	fp, r4, #26
 800585c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800585e:	425b      	negs	r3, r3
 8005860:	4553      	cmp	r3, sl
 8005862:	dc01      	bgt.n	8005868 <_printf_float+0x2b0>
 8005864:	464b      	mov	r3, r9
 8005866:	e793      	b.n	8005790 <_printf_float+0x1d8>
 8005868:	2301      	movs	r3, #1
 800586a:	465a      	mov	r2, fp
 800586c:	4631      	mov	r1, r6
 800586e:	4628      	mov	r0, r5
 8005870:	47b8      	blx	r7
 8005872:	3001      	adds	r0, #1
 8005874:	f43f aefb 	beq.w	800566e <_printf_float+0xb6>
 8005878:	f10a 0a01 	add.w	sl, sl, #1
 800587c:	e7ee      	b.n	800585c <_printf_float+0x2a4>
 800587e:	bf00      	nop
 8005880:	7fefffff 	.word	0x7fefffff
 8005884:	080083d4 	.word	0x080083d4
 8005888:	080083d8 	.word	0x080083d8
 800588c:	080083dc 	.word	0x080083dc
 8005890:	080083e0 	.word	0x080083e0
 8005894:	080083e4 	.word	0x080083e4
 8005898:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800589a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800589e:	4553      	cmp	r3, sl
 80058a0:	bfa8      	it	ge
 80058a2:	4653      	movge	r3, sl
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	4699      	mov	r9, r3
 80058a8:	dc36      	bgt.n	8005918 <_printf_float+0x360>
 80058aa:	f04f 0b00 	mov.w	fp, #0
 80058ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058b2:	f104 021a 	add.w	r2, r4, #26
 80058b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058b8:	9306      	str	r3, [sp, #24]
 80058ba:	eba3 0309 	sub.w	r3, r3, r9
 80058be:	455b      	cmp	r3, fp
 80058c0:	dc31      	bgt.n	8005926 <_printf_float+0x36e>
 80058c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058c4:	459a      	cmp	sl, r3
 80058c6:	dc3a      	bgt.n	800593e <_printf_float+0x386>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	07da      	lsls	r2, r3, #31
 80058cc:	d437      	bmi.n	800593e <_printf_float+0x386>
 80058ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d0:	ebaa 0903 	sub.w	r9, sl, r3
 80058d4:	9b06      	ldr	r3, [sp, #24]
 80058d6:	ebaa 0303 	sub.w	r3, sl, r3
 80058da:	4599      	cmp	r9, r3
 80058dc:	bfa8      	it	ge
 80058de:	4699      	movge	r9, r3
 80058e0:	f1b9 0f00 	cmp.w	r9, #0
 80058e4:	dc33      	bgt.n	800594e <_printf_float+0x396>
 80058e6:	f04f 0800 	mov.w	r8, #0
 80058ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058ee:	f104 0b1a 	add.w	fp, r4, #26
 80058f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f4:	ebaa 0303 	sub.w	r3, sl, r3
 80058f8:	eba3 0309 	sub.w	r3, r3, r9
 80058fc:	4543      	cmp	r3, r8
 80058fe:	f77f af79 	ble.w	80057f4 <_printf_float+0x23c>
 8005902:	2301      	movs	r3, #1
 8005904:	465a      	mov	r2, fp
 8005906:	4631      	mov	r1, r6
 8005908:	4628      	mov	r0, r5
 800590a:	47b8      	blx	r7
 800590c:	3001      	adds	r0, #1
 800590e:	f43f aeae 	beq.w	800566e <_printf_float+0xb6>
 8005912:	f108 0801 	add.w	r8, r8, #1
 8005916:	e7ec      	b.n	80058f2 <_printf_float+0x33a>
 8005918:	4642      	mov	r2, r8
 800591a:	4631      	mov	r1, r6
 800591c:	4628      	mov	r0, r5
 800591e:	47b8      	blx	r7
 8005920:	3001      	adds	r0, #1
 8005922:	d1c2      	bne.n	80058aa <_printf_float+0x2f2>
 8005924:	e6a3      	b.n	800566e <_printf_float+0xb6>
 8005926:	2301      	movs	r3, #1
 8005928:	4631      	mov	r1, r6
 800592a:	4628      	mov	r0, r5
 800592c:	9206      	str	r2, [sp, #24]
 800592e:	47b8      	blx	r7
 8005930:	3001      	adds	r0, #1
 8005932:	f43f ae9c 	beq.w	800566e <_printf_float+0xb6>
 8005936:	9a06      	ldr	r2, [sp, #24]
 8005938:	f10b 0b01 	add.w	fp, fp, #1
 800593c:	e7bb      	b.n	80058b6 <_printf_float+0x2fe>
 800593e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005942:	4631      	mov	r1, r6
 8005944:	4628      	mov	r0, r5
 8005946:	47b8      	blx	r7
 8005948:	3001      	adds	r0, #1
 800594a:	d1c0      	bne.n	80058ce <_printf_float+0x316>
 800594c:	e68f      	b.n	800566e <_printf_float+0xb6>
 800594e:	9a06      	ldr	r2, [sp, #24]
 8005950:	464b      	mov	r3, r9
 8005952:	4442      	add	r2, r8
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	d1c3      	bne.n	80058e6 <_printf_float+0x32e>
 800595e:	e686      	b.n	800566e <_printf_float+0xb6>
 8005960:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005964:	f1ba 0f01 	cmp.w	sl, #1
 8005968:	dc01      	bgt.n	800596e <_printf_float+0x3b6>
 800596a:	07db      	lsls	r3, r3, #31
 800596c:	d536      	bpl.n	80059dc <_printf_float+0x424>
 800596e:	2301      	movs	r3, #1
 8005970:	4642      	mov	r2, r8
 8005972:	4631      	mov	r1, r6
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	3001      	adds	r0, #1
 800597a:	f43f ae78 	beq.w	800566e <_printf_float+0xb6>
 800597e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005982:	4631      	mov	r1, r6
 8005984:	4628      	mov	r0, r5
 8005986:	47b8      	blx	r7
 8005988:	3001      	adds	r0, #1
 800598a:	f43f ae70 	beq.w	800566e <_printf_float+0xb6>
 800598e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005992:	2200      	movs	r2, #0
 8005994:	2300      	movs	r3, #0
 8005996:	f10a 3aff 	add.w	sl, sl, #4294967295
 800599a:	f7fb f8ad 	bl	8000af8 <__aeabi_dcmpeq>
 800599e:	b9c0      	cbnz	r0, 80059d2 <_printf_float+0x41a>
 80059a0:	4653      	mov	r3, sl
 80059a2:	f108 0201 	add.w	r2, r8, #1
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	d10c      	bne.n	80059ca <_printf_float+0x412>
 80059b0:	e65d      	b.n	800566e <_printf_float+0xb6>
 80059b2:	2301      	movs	r3, #1
 80059b4:	465a      	mov	r2, fp
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	f43f ae56 	beq.w	800566e <_printf_float+0xb6>
 80059c2:	f108 0801 	add.w	r8, r8, #1
 80059c6:	45d0      	cmp	r8, sl
 80059c8:	dbf3      	blt.n	80059b2 <_printf_float+0x3fa>
 80059ca:	464b      	mov	r3, r9
 80059cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80059d0:	e6df      	b.n	8005792 <_printf_float+0x1da>
 80059d2:	f04f 0800 	mov.w	r8, #0
 80059d6:	f104 0b1a 	add.w	fp, r4, #26
 80059da:	e7f4      	b.n	80059c6 <_printf_float+0x40e>
 80059dc:	2301      	movs	r3, #1
 80059de:	4642      	mov	r2, r8
 80059e0:	e7e1      	b.n	80059a6 <_printf_float+0x3ee>
 80059e2:	2301      	movs	r3, #1
 80059e4:	464a      	mov	r2, r9
 80059e6:	4631      	mov	r1, r6
 80059e8:	4628      	mov	r0, r5
 80059ea:	47b8      	blx	r7
 80059ec:	3001      	adds	r0, #1
 80059ee:	f43f ae3e 	beq.w	800566e <_printf_float+0xb6>
 80059f2:	f108 0801 	add.w	r8, r8, #1
 80059f6:	68e3      	ldr	r3, [r4, #12]
 80059f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80059fa:	1a5b      	subs	r3, r3, r1
 80059fc:	4543      	cmp	r3, r8
 80059fe:	dcf0      	bgt.n	80059e2 <_printf_float+0x42a>
 8005a00:	e6fc      	b.n	80057fc <_printf_float+0x244>
 8005a02:	f04f 0800 	mov.w	r8, #0
 8005a06:	f104 0919 	add.w	r9, r4, #25
 8005a0a:	e7f4      	b.n	80059f6 <_printf_float+0x43e>

08005a0c <_printf_common>:
 8005a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a10:	4616      	mov	r6, r2
 8005a12:	4698      	mov	r8, r3
 8005a14:	688a      	ldr	r2, [r1, #8]
 8005a16:	690b      	ldr	r3, [r1, #16]
 8005a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	bfb8      	it	lt
 8005a20:	4613      	movlt	r3, r2
 8005a22:	6033      	str	r3, [r6, #0]
 8005a24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a28:	4607      	mov	r7, r0
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	b10a      	cbz	r2, 8005a32 <_printf_common+0x26>
 8005a2e:	3301      	adds	r3, #1
 8005a30:	6033      	str	r3, [r6, #0]
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	0699      	lsls	r1, r3, #26
 8005a36:	bf42      	ittt	mi
 8005a38:	6833      	ldrmi	r3, [r6, #0]
 8005a3a:	3302      	addmi	r3, #2
 8005a3c:	6033      	strmi	r3, [r6, #0]
 8005a3e:	6825      	ldr	r5, [r4, #0]
 8005a40:	f015 0506 	ands.w	r5, r5, #6
 8005a44:	d106      	bne.n	8005a54 <_printf_common+0x48>
 8005a46:	f104 0a19 	add.w	sl, r4, #25
 8005a4a:	68e3      	ldr	r3, [r4, #12]
 8005a4c:	6832      	ldr	r2, [r6, #0]
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	42ab      	cmp	r3, r5
 8005a52:	dc26      	bgt.n	8005aa2 <_printf_common+0x96>
 8005a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a58:	6822      	ldr	r2, [r4, #0]
 8005a5a:	3b00      	subs	r3, #0
 8005a5c:	bf18      	it	ne
 8005a5e:	2301      	movne	r3, #1
 8005a60:	0692      	lsls	r2, r2, #26
 8005a62:	d42b      	bmi.n	8005abc <_printf_common+0xb0>
 8005a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a68:	4641      	mov	r1, r8
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	47c8      	blx	r9
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d01e      	beq.n	8005ab0 <_printf_common+0xa4>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	6922      	ldr	r2, [r4, #16]
 8005a76:	f003 0306 	and.w	r3, r3, #6
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	bf02      	ittt	eq
 8005a7e:	68e5      	ldreq	r5, [r4, #12]
 8005a80:	6833      	ldreq	r3, [r6, #0]
 8005a82:	1aed      	subeq	r5, r5, r3
 8005a84:	68a3      	ldr	r3, [r4, #8]
 8005a86:	bf0c      	ite	eq
 8005a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a8c:	2500      	movne	r5, #0
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	bfc4      	itt	gt
 8005a92:	1a9b      	subgt	r3, r3, r2
 8005a94:	18ed      	addgt	r5, r5, r3
 8005a96:	2600      	movs	r6, #0
 8005a98:	341a      	adds	r4, #26
 8005a9a:	42b5      	cmp	r5, r6
 8005a9c:	d11a      	bne.n	8005ad4 <_printf_common+0xc8>
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	e008      	b.n	8005ab4 <_printf_common+0xa8>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	4652      	mov	r2, sl
 8005aa6:	4641      	mov	r1, r8
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	47c8      	blx	r9
 8005aac:	3001      	adds	r0, #1
 8005aae:	d103      	bne.n	8005ab8 <_printf_common+0xac>
 8005ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab8:	3501      	adds	r5, #1
 8005aba:	e7c6      	b.n	8005a4a <_printf_common+0x3e>
 8005abc:	18e1      	adds	r1, r4, r3
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	2030      	movs	r0, #48	@ 0x30
 8005ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ac6:	4422      	add	r2, r4
 8005ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005acc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ad0:	3302      	adds	r3, #2
 8005ad2:	e7c7      	b.n	8005a64 <_printf_common+0x58>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	4641      	mov	r1, r8
 8005ada:	4638      	mov	r0, r7
 8005adc:	47c8      	blx	r9
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d0e6      	beq.n	8005ab0 <_printf_common+0xa4>
 8005ae2:	3601      	adds	r6, #1
 8005ae4:	e7d9      	b.n	8005a9a <_printf_common+0x8e>
	...

08005ae8 <_printf_i>:
 8005ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aec:	7e0f      	ldrb	r7, [r1, #24]
 8005aee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005af0:	2f78      	cmp	r7, #120	@ 0x78
 8005af2:	4691      	mov	r9, r2
 8005af4:	4680      	mov	r8, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	469a      	mov	sl, r3
 8005afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005afe:	d807      	bhi.n	8005b10 <_printf_i+0x28>
 8005b00:	2f62      	cmp	r7, #98	@ 0x62
 8005b02:	d80a      	bhi.n	8005b1a <_printf_i+0x32>
 8005b04:	2f00      	cmp	r7, #0
 8005b06:	f000 80d2 	beq.w	8005cae <_printf_i+0x1c6>
 8005b0a:	2f58      	cmp	r7, #88	@ 0x58
 8005b0c:	f000 80b9 	beq.w	8005c82 <_printf_i+0x19a>
 8005b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b18:	e03a      	b.n	8005b90 <_printf_i+0xa8>
 8005b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b1e:	2b15      	cmp	r3, #21
 8005b20:	d8f6      	bhi.n	8005b10 <_printf_i+0x28>
 8005b22:	a101      	add	r1, pc, #4	@ (adr r1, 8005b28 <_printf_i+0x40>)
 8005b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b28:	08005b81 	.word	0x08005b81
 8005b2c:	08005b95 	.word	0x08005b95
 8005b30:	08005b11 	.word	0x08005b11
 8005b34:	08005b11 	.word	0x08005b11
 8005b38:	08005b11 	.word	0x08005b11
 8005b3c:	08005b11 	.word	0x08005b11
 8005b40:	08005b95 	.word	0x08005b95
 8005b44:	08005b11 	.word	0x08005b11
 8005b48:	08005b11 	.word	0x08005b11
 8005b4c:	08005b11 	.word	0x08005b11
 8005b50:	08005b11 	.word	0x08005b11
 8005b54:	08005c95 	.word	0x08005c95
 8005b58:	08005bbf 	.word	0x08005bbf
 8005b5c:	08005c4f 	.word	0x08005c4f
 8005b60:	08005b11 	.word	0x08005b11
 8005b64:	08005b11 	.word	0x08005b11
 8005b68:	08005cb7 	.word	0x08005cb7
 8005b6c:	08005b11 	.word	0x08005b11
 8005b70:	08005bbf 	.word	0x08005bbf
 8005b74:	08005b11 	.word	0x08005b11
 8005b78:	08005b11 	.word	0x08005b11
 8005b7c:	08005c57 	.word	0x08005c57
 8005b80:	6833      	ldr	r3, [r6, #0]
 8005b82:	1d1a      	adds	r2, r3, #4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6032      	str	r2, [r6, #0]
 8005b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b90:	2301      	movs	r3, #1
 8005b92:	e09d      	b.n	8005cd0 <_printf_i+0x1e8>
 8005b94:	6833      	ldr	r3, [r6, #0]
 8005b96:	6820      	ldr	r0, [r4, #0]
 8005b98:	1d19      	adds	r1, r3, #4
 8005b9a:	6031      	str	r1, [r6, #0]
 8005b9c:	0606      	lsls	r6, r0, #24
 8005b9e:	d501      	bpl.n	8005ba4 <_printf_i+0xbc>
 8005ba0:	681d      	ldr	r5, [r3, #0]
 8005ba2:	e003      	b.n	8005bac <_printf_i+0xc4>
 8005ba4:	0645      	lsls	r5, r0, #25
 8005ba6:	d5fb      	bpl.n	8005ba0 <_printf_i+0xb8>
 8005ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	da03      	bge.n	8005bb8 <_printf_i+0xd0>
 8005bb0:	232d      	movs	r3, #45	@ 0x2d
 8005bb2:	426d      	negs	r5, r5
 8005bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bb8:	4859      	ldr	r0, [pc, #356]	@ (8005d20 <_printf_i+0x238>)
 8005bba:	230a      	movs	r3, #10
 8005bbc:	e011      	b.n	8005be2 <_printf_i+0xfa>
 8005bbe:	6821      	ldr	r1, [r4, #0]
 8005bc0:	6833      	ldr	r3, [r6, #0]
 8005bc2:	0608      	lsls	r0, r1, #24
 8005bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bc8:	d402      	bmi.n	8005bd0 <_printf_i+0xe8>
 8005bca:	0649      	lsls	r1, r1, #25
 8005bcc:	bf48      	it	mi
 8005bce:	b2ad      	uxthmi	r5, r5
 8005bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bd2:	4853      	ldr	r0, [pc, #332]	@ (8005d20 <_printf_i+0x238>)
 8005bd4:	6033      	str	r3, [r6, #0]
 8005bd6:	bf14      	ite	ne
 8005bd8:	230a      	movne	r3, #10
 8005bda:	2308      	moveq	r3, #8
 8005bdc:	2100      	movs	r1, #0
 8005bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005be2:	6866      	ldr	r6, [r4, #4]
 8005be4:	60a6      	str	r6, [r4, #8]
 8005be6:	2e00      	cmp	r6, #0
 8005be8:	bfa2      	ittt	ge
 8005bea:	6821      	ldrge	r1, [r4, #0]
 8005bec:	f021 0104 	bicge.w	r1, r1, #4
 8005bf0:	6021      	strge	r1, [r4, #0]
 8005bf2:	b90d      	cbnz	r5, 8005bf8 <_printf_i+0x110>
 8005bf4:	2e00      	cmp	r6, #0
 8005bf6:	d04b      	beq.n	8005c90 <_printf_i+0x1a8>
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bfe:	fb03 5711 	mls	r7, r3, r1, r5
 8005c02:	5dc7      	ldrb	r7, [r0, r7]
 8005c04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c08:	462f      	mov	r7, r5
 8005c0a:	42bb      	cmp	r3, r7
 8005c0c:	460d      	mov	r5, r1
 8005c0e:	d9f4      	bls.n	8005bfa <_printf_i+0x112>
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d10b      	bne.n	8005c2c <_printf_i+0x144>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	07df      	lsls	r7, r3, #31
 8005c18:	d508      	bpl.n	8005c2c <_printf_i+0x144>
 8005c1a:	6923      	ldr	r3, [r4, #16]
 8005c1c:	6861      	ldr	r1, [r4, #4]
 8005c1e:	4299      	cmp	r1, r3
 8005c20:	bfde      	ittt	le
 8005c22:	2330      	movle	r3, #48	@ 0x30
 8005c24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c2c:	1b92      	subs	r2, r2, r6
 8005c2e:	6122      	str	r2, [r4, #16]
 8005c30:	f8cd a000 	str.w	sl, [sp]
 8005c34:	464b      	mov	r3, r9
 8005c36:	aa03      	add	r2, sp, #12
 8005c38:	4621      	mov	r1, r4
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	f7ff fee6 	bl	8005a0c <_printf_common>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d14a      	bne.n	8005cda <_printf_i+0x1f2>
 8005c44:	f04f 30ff 	mov.w	r0, #4294967295
 8005c48:	b004      	add	sp, #16
 8005c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	f043 0320 	orr.w	r3, r3, #32
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	4833      	ldr	r0, [pc, #204]	@ (8005d24 <_printf_i+0x23c>)
 8005c58:	2778      	movs	r7, #120	@ 0x78
 8005c5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	6831      	ldr	r1, [r6, #0]
 8005c62:	061f      	lsls	r7, r3, #24
 8005c64:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c68:	d402      	bmi.n	8005c70 <_printf_i+0x188>
 8005c6a:	065f      	lsls	r7, r3, #25
 8005c6c:	bf48      	it	mi
 8005c6e:	b2ad      	uxthmi	r5, r5
 8005c70:	6031      	str	r1, [r6, #0]
 8005c72:	07d9      	lsls	r1, r3, #31
 8005c74:	bf44      	itt	mi
 8005c76:	f043 0320 	orrmi.w	r3, r3, #32
 8005c7a:	6023      	strmi	r3, [r4, #0]
 8005c7c:	b11d      	cbz	r5, 8005c86 <_printf_i+0x19e>
 8005c7e:	2310      	movs	r3, #16
 8005c80:	e7ac      	b.n	8005bdc <_printf_i+0xf4>
 8005c82:	4827      	ldr	r0, [pc, #156]	@ (8005d20 <_printf_i+0x238>)
 8005c84:	e7e9      	b.n	8005c5a <_printf_i+0x172>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f023 0320 	bic.w	r3, r3, #32
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	e7f6      	b.n	8005c7e <_printf_i+0x196>
 8005c90:	4616      	mov	r6, r2
 8005c92:	e7bd      	b.n	8005c10 <_printf_i+0x128>
 8005c94:	6833      	ldr	r3, [r6, #0]
 8005c96:	6825      	ldr	r5, [r4, #0]
 8005c98:	6961      	ldr	r1, [r4, #20]
 8005c9a:	1d18      	adds	r0, r3, #4
 8005c9c:	6030      	str	r0, [r6, #0]
 8005c9e:	062e      	lsls	r6, r5, #24
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_i+0x1c0>
 8005ca4:	6019      	str	r1, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <_printf_i+0x1c6>
 8005ca8:	0668      	lsls	r0, r5, #25
 8005caa:	d5fb      	bpl.n	8005ca4 <_printf_i+0x1bc>
 8005cac:	8019      	strh	r1, [r3, #0]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6123      	str	r3, [r4, #16]
 8005cb2:	4616      	mov	r6, r2
 8005cb4:	e7bc      	b.n	8005c30 <_printf_i+0x148>
 8005cb6:	6833      	ldr	r3, [r6, #0]
 8005cb8:	1d1a      	adds	r2, r3, #4
 8005cba:	6032      	str	r2, [r6, #0]
 8005cbc:	681e      	ldr	r6, [r3, #0]
 8005cbe:	6862      	ldr	r2, [r4, #4]
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7fa fa9c 	bl	8000200 <memchr>
 8005cc8:	b108      	cbz	r0, 8005cce <_printf_i+0x1e6>
 8005cca:	1b80      	subs	r0, r0, r6
 8005ccc:	6060      	str	r0, [r4, #4]
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cd8:	e7aa      	b.n	8005c30 <_printf_i+0x148>
 8005cda:	6923      	ldr	r3, [r4, #16]
 8005cdc:	4632      	mov	r2, r6
 8005cde:	4649      	mov	r1, r9
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	47d0      	blx	sl
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d0ad      	beq.n	8005c44 <_printf_i+0x15c>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	079b      	lsls	r3, r3, #30
 8005cec:	d413      	bmi.n	8005d16 <_printf_i+0x22e>
 8005cee:	68e0      	ldr	r0, [r4, #12]
 8005cf0:	9b03      	ldr	r3, [sp, #12]
 8005cf2:	4298      	cmp	r0, r3
 8005cf4:	bfb8      	it	lt
 8005cf6:	4618      	movlt	r0, r3
 8005cf8:	e7a6      	b.n	8005c48 <_printf_i+0x160>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4640      	mov	r0, r8
 8005d02:	47d0      	blx	sl
 8005d04:	3001      	adds	r0, #1
 8005d06:	d09d      	beq.n	8005c44 <_printf_i+0x15c>
 8005d08:	3501      	adds	r5, #1
 8005d0a:	68e3      	ldr	r3, [r4, #12]
 8005d0c:	9903      	ldr	r1, [sp, #12]
 8005d0e:	1a5b      	subs	r3, r3, r1
 8005d10:	42ab      	cmp	r3, r5
 8005d12:	dcf2      	bgt.n	8005cfa <_printf_i+0x212>
 8005d14:	e7eb      	b.n	8005cee <_printf_i+0x206>
 8005d16:	2500      	movs	r5, #0
 8005d18:	f104 0619 	add.w	r6, r4, #25
 8005d1c:	e7f5      	b.n	8005d0a <_printf_i+0x222>
 8005d1e:	bf00      	nop
 8005d20:	080083e6 	.word	0x080083e6
 8005d24:	080083f7 	.word	0x080083f7

08005d28 <std>:
 8005d28:	2300      	movs	r3, #0
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d36:	6083      	str	r3, [r0, #8]
 8005d38:	8181      	strh	r1, [r0, #12]
 8005d3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d3c:	81c2      	strh	r2, [r0, #14]
 8005d3e:	6183      	str	r3, [r0, #24]
 8005d40:	4619      	mov	r1, r3
 8005d42:	2208      	movs	r2, #8
 8005d44:	305c      	adds	r0, #92	@ 0x5c
 8005d46:	f000 fa4d 	bl	80061e4 <memset>
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <std+0x58>)
 8005d4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d84 <std+0x5c>)
 8005d50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d52:	4b0d      	ldr	r3, [pc, #52]	@ (8005d88 <std+0x60>)
 8005d54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d56:	4b0d      	ldr	r3, [pc, #52]	@ (8005d8c <std+0x64>)
 8005d58:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d90 <std+0x68>)
 8005d5c:	6224      	str	r4, [r4, #32]
 8005d5e:	429c      	cmp	r4, r3
 8005d60:	d006      	beq.n	8005d70 <std+0x48>
 8005d62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d66:	4294      	cmp	r4, r2
 8005d68:	d002      	beq.n	8005d70 <std+0x48>
 8005d6a:	33d0      	adds	r3, #208	@ 0xd0
 8005d6c:	429c      	cmp	r4, r3
 8005d6e:	d105      	bne.n	8005d7c <std+0x54>
 8005d70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d78:	f000 bb0c 	b.w	8006394 <__retarget_lock_init_recursive>
 8005d7c:	bd10      	pop	{r4, pc}
 8005d7e:	bf00      	nop
 8005d80:	08006035 	.word	0x08006035
 8005d84:	08006057 	.word	0x08006057
 8005d88:	0800608f 	.word	0x0800608f
 8005d8c:	080060b3 	.word	0x080060b3
 8005d90:	2000043c 	.word	0x2000043c

08005d94 <stdio_exit_handler>:
 8005d94:	4a02      	ldr	r2, [pc, #8]	@ (8005da0 <stdio_exit_handler+0xc>)
 8005d96:	4903      	ldr	r1, [pc, #12]	@ (8005da4 <stdio_exit_handler+0x10>)
 8005d98:	4803      	ldr	r0, [pc, #12]	@ (8005da8 <stdio_exit_handler+0x14>)
 8005d9a:	f000 b869 	b.w	8005e70 <_fwalk_sglue>
 8005d9e:	bf00      	nop
 8005da0:	2000000c 	.word	0x2000000c
 8005da4:	08007fc1 	.word	0x08007fc1
 8005da8:	2000001c 	.word	0x2000001c

08005dac <cleanup_stdio>:
 8005dac:	6841      	ldr	r1, [r0, #4]
 8005dae:	4b0c      	ldr	r3, [pc, #48]	@ (8005de0 <cleanup_stdio+0x34>)
 8005db0:	4299      	cmp	r1, r3
 8005db2:	b510      	push	{r4, lr}
 8005db4:	4604      	mov	r4, r0
 8005db6:	d001      	beq.n	8005dbc <cleanup_stdio+0x10>
 8005db8:	f002 f902 	bl	8007fc0 <_fflush_r>
 8005dbc:	68a1      	ldr	r1, [r4, #8]
 8005dbe:	4b09      	ldr	r3, [pc, #36]	@ (8005de4 <cleanup_stdio+0x38>)
 8005dc0:	4299      	cmp	r1, r3
 8005dc2:	d002      	beq.n	8005dca <cleanup_stdio+0x1e>
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f002 f8fb 	bl	8007fc0 <_fflush_r>
 8005dca:	68e1      	ldr	r1, [r4, #12]
 8005dcc:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <cleanup_stdio+0x3c>)
 8005dce:	4299      	cmp	r1, r3
 8005dd0:	d004      	beq.n	8005ddc <cleanup_stdio+0x30>
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd8:	f002 b8f2 	b.w	8007fc0 <_fflush_r>
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	bf00      	nop
 8005de0:	2000043c 	.word	0x2000043c
 8005de4:	200004a4 	.word	0x200004a4
 8005de8:	2000050c 	.word	0x2000050c

08005dec <global_stdio_init.part.0>:
 8005dec:	b510      	push	{r4, lr}
 8005dee:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <global_stdio_init.part.0+0x30>)
 8005df0:	4c0b      	ldr	r4, [pc, #44]	@ (8005e20 <global_stdio_init.part.0+0x34>)
 8005df2:	4a0c      	ldr	r2, [pc, #48]	@ (8005e24 <global_stdio_init.part.0+0x38>)
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	4620      	mov	r0, r4
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2104      	movs	r1, #4
 8005dfc:	f7ff ff94 	bl	8005d28 <std>
 8005e00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e04:	2201      	movs	r2, #1
 8005e06:	2109      	movs	r1, #9
 8005e08:	f7ff ff8e 	bl	8005d28 <std>
 8005e0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e10:	2202      	movs	r2, #2
 8005e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e16:	2112      	movs	r1, #18
 8005e18:	f7ff bf86 	b.w	8005d28 <std>
 8005e1c:	20000574 	.word	0x20000574
 8005e20:	2000043c 	.word	0x2000043c
 8005e24:	08005d95 	.word	0x08005d95

08005e28 <__sfp_lock_acquire>:
 8005e28:	4801      	ldr	r0, [pc, #4]	@ (8005e30 <__sfp_lock_acquire+0x8>)
 8005e2a:	f000 bab4 	b.w	8006396 <__retarget_lock_acquire_recursive>
 8005e2e:	bf00      	nop
 8005e30:	2000057d 	.word	0x2000057d

08005e34 <__sfp_lock_release>:
 8005e34:	4801      	ldr	r0, [pc, #4]	@ (8005e3c <__sfp_lock_release+0x8>)
 8005e36:	f000 baaf 	b.w	8006398 <__retarget_lock_release_recursive>
 8005e3a:	bf00      	nop
 8005e3c:	2000057d 	.word	0x2000057d

08005e40 <__sinit>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	4604      	mov	r4, r0
 8005e44:	f7ff fff0 	bl	8005e28 <__sfp_lock_acquire>
 8005e48:	6a23      	ldr	r3, [r4, #32]
 8005e4a:	b11b      	cbz	r3, 8005e54 <__sinit+0x14>
 8005e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e50:	f7ff bff0 	b.w	8005e34 <__sfp_lock_release>
 8005e54:	4b04      	ldr	r3, [pc, #16]	@ (8005e68 <__sinit+0x28>)
 8005e56:	6223      	str	r3, [r4, #32]
 8005e58:	4b04      	ldr	r3, [pc, #16]	@ (8005e6c <__sinit+0x2c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f5      	bne.n	8005e4c <__sinit+0xc>
 8005e60:	f7ff ffc4 	bl	8005dec <global_stdio_init.part.0>
 8005e64:	e7f2      	b.n	8005e4c <__sinit+0xc>
 8005e66:	bf00      	nop
 8005e68:	08005dad 	.word	0x08005dad
 8005e6c:	20000574 	.word	0x20000574

08005e70 <_fwalk_sglue>:
 8005e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e74:	4607      	mov	r7, r0
 8005e76:	4688      	mov	r8, r1
 8005e78:	4614      	mov	r4, r2
 8005e7a:	2600      	movs	r6, #0
 8005e7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e80:	f1b9 0901 	subs.w	r9, r9, #1
 8005e84:	d505      	bpl.n	8005e92 <_fwalk_sglue+0x22>
 8005e86:	6824      	ldr	r4, [r4, #0]
 8005e88:	2c00      	cmp	r4, #0
 8005e8a:	d1f7      	bne.n	8005e7c <_fwalk_sglue+0xc>
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e92:	89ab      	ldrh	r3, [r5, #12]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d907      	bls.n	8005ea8 <_fwalk_sglue+0x38>
 8005e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	d003      	beq.n	8005ea8 <_fwalk_sglue+0x38>
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	47c0      	blx	r8
 8005ea6:	4306      	orrs	r6, r0
 8005ea8:	3568      	adds	r5, #104	@ 0x68
 8005eaa:	e7e9      	b.n	8005e80 <_fwalk_sglue+0x10>

08005eac <iprintf>:
 8005eac:	b40f      	push	{r0, r1, r2, r3}
 8005eae:	b507      	push	{r0, r1, r2, lr}
 8005eb0:	4906      	ldr	r1, [pc, #24]	@ (8005ecc <iprintf+0x20>)
 8005eb2:	ab04      	add	r3, sp, #16
 8005eb4:	6808      	ldr	r0, [r1, #0]
 8005eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eba:	6881      	ldr	r1, [r0, #8]
 8005ebc:	9301      	str	r3, [sp, #4]
 8005ebe:	f001 fee3 	bl	8007c88 <_vfiprintf_r>
 8005ec2:	b003      	add	sp, #12
 8005ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ec8:	b004      	add	sp, #16
 8005eca:	4770      	bx	lr
 8005ecc:	20000018 	.word	0x20000018

08005ed0 <_puts_r>:
 8005ed0:	6a03      	ldr	r3, [r0, #32]
 8005ed2:	b570      	push	{r4, r5, r6, lr}
 8005ed4:	6884      	ldr	r4, [r0, #8]
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	460e      	mov	r6, r1
 8005eda:	b90b      	cbnz	r3, 8005ee0 <_puts_r+0x10>
 8005edc:	f7ff ffb0 	bl	8005e40 <__sinit>
 8005ee0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ee2:	07db      	lsls	r3, r3, #31
 8005ee4:	d405      	bmi.n	8005ef2 <_puts_r+0x22>
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	0598      	lsls	r0, r3, #22
 8005eea:	d402      	bmi.n	8005ef2 <_puts_r+0x22>
 8005eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eee:	f000 fa52 	bl	8006396 <__retarget_lock_acquire_recursive>
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	0719      	lsls	r1, r3, #28
 8005ef6:	d502      	bpl.n	8005efe <_puts_r+0x2e>
 8005ef8:	6923      	ldr	r3, [r4, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d135      	bne.n	8005f6a <_puts_r+0x9a>
 8005efe:	4621      	mov	r1, r4
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 f919 	bl	8006138 <__swsetup_r>
 8005f06:	b380      	cbz	r0, 8005f6a <_puts_r+0x9a>
 8005f08:	f04f 35ff 	mov.w	r5, #4294967295
 8005f0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f0e:	07da      	lsls	r2, r3, #31
 8005f10:	d405      	bmi.n	8005f1e <_puts_r+0x4e>
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	059b      	lsls	r3, r3, #22
 8005f16:	d402      	bmi.n	8005f1e <_puts_r+0x4e>
 8005f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f1a:	f000 fa3d 	bl	8006398 <__retarget_lock_release_recursive>
 8005f1e:	4628      	mov	r0, r5
 8005f20:	bd70      	pop	{r4, r5, r6, pc}
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	da04      	bge.n	8005f30 <_puts_r+0x60>
 8005f26:	69a2      	ldr	r2, [r4, #24]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	dc17      	bgt.n	8005f5c <_puts_r+0x8c>
 8005f2c:	290a      	cmp	r1, #10
 8005f2e:	d015      	beq.n	8005f5c <_puts_r+0x8c>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	6022      	str	r2, [r4, #0]
 8005f36:	7019      	strb	r1, [r3, #0]
 8005f38:	68a3      	ldr	r3, [r4, #8]
 8005f3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	60a3      	str	r3, [r4, #8]
 8005f42:	2900      	cmp	r1, #0
 8005f44:	d1ed      	bne.n	8005f22 <_puts_r+0x52>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da11      	bge.n	8005f6e <_puts_r+0x9e>
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	210a      	movs	r1, #10
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f000 f8b3 	bl	80060ba <__swbuf_r>
 8005f54:	3001      	adds	r0, #1
 8005f56:	d0d7      	beq.n	8005f08 <_puts_r+0x38>
 8005f58:	250a      	movs	r5, #10
 8005f5a:	e7d7      	b.n	8005f0c <_puts_r+0x3c>
 8005f5c:	4622      	mov	r2, r4
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f000 f8ab 	bl	80060ba <__swbuf_r>
 8005f64:	3001      	adds	r0, #1
 8005f66:	d1e7      	bne.n	8005f38 <_puts_r+0x68>
 8005f68:	e7ce      	b.n	8005f08 <_puts_r+0x38>
 8005f6a:	3e01      	subs	r6, #1
 8005f6c:	e7e4      	b.n	8005f38 <_puts_r+0x68>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	6022      	str	r2, [r4, #0]
 8005f74:	220a      	movs	r2, #10
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	e7ee      	b.n	8005f58 <_puts_r+0x88>
	...

08005f7c <puts>:
 8005f7c:	4b02      	ldr	r3, [pc, #8]	@ (8005f88 <puts+0xc>)
 8005f7e:	4601      	mov	r1, r0
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	f7ff bfa5 	b.w	8005ed0 <_puts_r>
 8005f86:	bf00      	nop
 8005f88:	20000018 	.word	0x20000018

08005f8c <sniprintf>:
 8005f8c:	b40c      	push	{r2, r3}
 8005f8e:	b530      	push	{r4, r5, lr}
 8005f90:	4b17      	ldr	r3, [pc, #92]	@ (8005ff0 <sniprintf+0x64>)
 8005f92:	1e0c      	subs	r4, r1, #0
 8005f94:	681d      	ldr	r5, [r3, #0]
 8005f96:	b09d      	sub	sp, #116	@ 0x74
 8005f98:	da08      	bge.n	8005fac <sniprintf+0x20>
 8005f9a:	238b      	movs	r3, #139	@ 0x8b
 8005f9c:	602b      	str	r3, [r5, #0]
 8005f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa2:	b01d      	add	sp, #116	@ 0x74
 8005fa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fa8:	b002      	add	sp, #8
 8005faa:	4770      	bx	lr
 8005fac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005fb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005fb4:	bf14      	ite	ne
 8005fb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005fba:	4623      	moveq	r3, r4
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	9307      	str	r3, [sp, #28]
 8005fc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005fc4:	9002      	str	r0, [sp, #8]
 8005fc6:	9006      	str	r0, [sp, #24]
 8005fc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005fcc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005fce:	ab21      	add	r3, sp, #132	@ 0x84
 8005fd0:	a902      	add	r1, sp, #8
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	f001 fd31 	bl	8007a3c <_svfiprintf_r>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	bfbc      	itt	lt
 8005fde:	238b      	movlt	r3, #139	@ 0x8b
 8005fe0:	602b      	strlt	r3, [r5, #0]
 8005fe2:	2c00      	cmp	r4, #0
 8005fe4:	d0dd      	beq.n	8005fa2 <sniprintf+0x16>
 8005fe6:	9b02      	ldr	r3, [sp, #8]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	e7d9      	b.n	8005fa2 <sniprintf+0x16>
 8005fee:	bf00      	nop
 8005ff0:	20000018 	.word	0x20000018

08005ff4 <siprintf>:
 8005ff4:	b40e      	push	{r1, r2, r3}
 8005ff6:	b500      	push	{lr}
 8005ff8:	b09c      	sub	sp, #112	@ 0x70
 8005ffa:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ffc:	9002      	str	r0, [sp, #8]
 8005ffe:	9006      	str	r0, [sp, #24]
 8006000:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006004:	4809      	ldr	r0, [pc, #36]	@ (800602c <siprintf+0x38>)
 8006006:	9107      	str	r1, [sp, #28]
 8006008:	9104      	str	r1, [sp, #16]
 800600a:	4909      	ldr	r1, [pc, #36]	@ (8006030 <siprintf+0x3c>)
 800600c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006010:	9105      	str	r1, [sp, #20]
 8006012:	6800      	ldr	r0, [r0, #0]
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	a902      	add	r1, sp, #8
 8006018:	f001 fd10 	bl	8007a3c <_svfiprintf_r>
 800601c:	9b02      	ldr	r3, [sp, #8]
 800601e:	2200      	movs	r2, #0
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	b01c      	add	sp, #112	@ 0x70
 8006024:	f85d eb04 	ldr.w	lr, [sp], #4
 8006028:	b003      	add	sp, #12
 800602a:	4770      	bx	lr
 800602c:	20000018 	.word	0x20000018
 8006030:	ffff0208 	.word	0xffff0208

08006034 <__sread>:
 8006034:	b510      	push	{r4, lr}
 8006036:	460c      	mov	r4, r1
 8006038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603c:	f000 f95c 	bl	80062f8 <_read_r>
 8006040:	2800      	cmp	r0, #0
 8006042:	bfab      	itete	ge
 8006044:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006046:	89a3      	ldrhlt	r3, [r4, #12]
 8006048:	181b      	addge	r3, r3, r0
 800604a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800604e:	bfac      	ite	ge
 8006050:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006052:	81a3      	strhlt	r3, [r4, #12]
 8006054:	bd10      	pop	{r4, pc}

08006056 <__swrite>:
 8006056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800605a:	461f      	mov	r7, r3
 800605c:	898b      	ldrh	r3, [r1, #12]
 800605e:	05db      	lsls	r3, r3, #23
 8006060:	4605      	mov	r5, r0
 8006062:	460c      	mov	r4, r1
 8006064:	4616      	mov	r6, r2
 8006066:	d505      	bpl.n	8006074 <__swrite+0x1e>
 8006068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800606c:	2302      	movs	r3, #2
 800606e:	2200      	movs	r2, #0
 8006070:	f000 f930 	bl	80062d4 <_lseek_r>
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800607a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800607e:	81a3      	strh	r3, [r4, #12]
 8006080:	4632      	mov	r2, r6
 8006082:	463b      	mov	r3, r7
 8006084:	4628      	mov	r0, r5
 8006086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800608a:	f000 b947 	b.w	800631c <_write_r>

0800608e <__sseek>:
 800608e:	b510      	push	{r4, lr}
 8006090:	460c      	mov	r4, r1
 8006092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006096:	f000 f91d 	bl	80062d4 <_lseek_r>
 800609a:	1c43      	adds	r3, r0, #1
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	bf15      	itete	ne
 80060a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060aa:	81a3      	strheq	r3, [r4, #12]
 80060ac:	bf18      	it	ne
 80060ae:	81a3      	strhne	r3, [r4, #12]
 80060b0:	bd10      	pop	{r4, pc}

080060b2 <__sclose>:
 80060b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b6:	f000 b8fd 	b.w	80062b4 <_close_r>

080060ba <__swbuf_r>:
 80060ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060bc:	460e      	mov	r6, r1
 80060be:	4614      	mov	r4, r2
 80060c0:	4605      	mov	r5, r0
 80060c2:	b118      	cbz	r0, 80060cc <__swbuf_r+0x12>
 80060c4:	6a03      	ldr	r3, [r0, #32]
 80060c6:	b90b      	cbnz	r3, 80060cc <__swbuf_r+0x12>
 80060c8:	f7ff feba 	bl	8005e40 <__sinit>
 80060cc:	69a3      	ldr	r3, [r4, #24]
 80060ce:	60a3      	str	r3, [r4, #8]
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	071a      	lsls	r2, r3, #28
 80060d4:	d501      	bpl.n	80060da <__swbuf_r+0x20>
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	b943      	cbnz	r3, 80060ec <__swbuf_r+0x32>
 80060da:	4621      	mov	r1, r4
 80060dc:	4628      	mov	r0, r5
 80060de:	f000 f82b 	bl	8006138 <__swsetup_r>
 80060e2:	b118      	cbz	r0, 80060ec <__swbuf_r+0x32>
 80060e4:	f04f 37ff 	mov.w	r7, #4294967295
 80060e8:	4638      	mov	r0, r7
 80060ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	6922      	ldr	r2, [r4, #16]
 80060f0:	1a98      	subs	r0, r3, r2
 80060f2:	6963      	ldr	r3, [r4, #20]
 80060f4:	b2f6      	uxtb	r6, r6
 80060f6:	4283      	cmp	r3, r0
 80060f8:	4637      	mov	r7, r6
 80060fa:	dc05      	bgt.n	8006108 <__swbuf_r+0x4e>
 80060fc:	4621      	mov	r1, r4
 80060fe:	4628      	mov	r0, r5
 8006100:	f001 ff5e 	bl	8007fc0 <_fflush_r>
 8006104:	2800      	cmp	r0, #0
 8006106:	d1ed      	bne.n	80060e4 <__swbuf_r+0x2a>
 8006108:	68a3      	ldr	r3, [r4, #8]
 800610a:	3b01      	subs	r3, #1
 800610c:	60a3      	str	r3, [r4, #8]
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	6022      	str	r2, [r4, #0]
 8006114:	701e      	strb	r6, [r3, #0]
 8006116:	6962      	ldr	r2, [r4, #20]
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	429a      	cmp	r2, r3
 800611c:	d004      	beq.n	8006128 <__swbuf_r+0x6e>
 800611e:	89a3      	ldrh	r3, [r4, #12]
 8006120:	07db      	lsls	r3, r3, #31
 8006122:	d5e1      	bpl.n	80060e8 <__swbuf_r+0x2e>
 8006124:	2e0a      	cmp	r6, #10
 8006126:	d1df      	bne.n	80060e8 <__swbuf_r+0x2e>
 8006128:	4621      	mov	r1, r4
 800612a:	4628      	mov	r0, r5
 800612c:	f001 ff48 	bl	8007fc0 <_fflush_r>
 8006130:	2800      	cmp	r0, #0
 8006132:	d0d9      	beq.n	80060e8 <__swbuf_r+0x2e>
 8006134:	e7d6      	b.n	80060e4 <__swbuf_r+0x2a>
	...

08006138 <__swsetup_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4b29      	ldr	r3, [pc, #164]	@ (80061e0 <__swsetup_r+0xa8>)
 800613c:	4605      	mov	r5, r0
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	460c      	mov	r4, r1
 8006142:	b118      	cbz	r0, 800614c <__swsetup_r+0x14>
 8006144:	6a03      	ldr	r3, [r0, #32]
 8006146:	b90b      	cbnz	r3, 800614c <__swsetup_r+0x14>
 8006148:	f7ff fe7a 	bl	8005e40 <__sinit>
 800614c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006150:	0719      	lsls	r1, r3, #28
 8006152:	d422      	bmi.n	800619a <__swsetup_r+0x62>
 8006154:	06da      	lsls	r2, r3, #27
 8006156:	d407      	bmi.n	8006168 <__swsetup_r+0x30>
 8006158:	2209      	movs	r2, #9
 800615a:	602a      	str	r2, [r5, #0]
 800615c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006160:	81a3      	strh	r3, [r4, #12]
 8006162:	f04f 30ff 	mov.w	r0, #4294967295
 8006166:	e033      	b.n	80061d0 <__swsetup_r+0x98>
 8006168:	0758      	lsls	r0, r3, #29
 800616a:	d512      	bpl.n	8006192 <__swsetup_r+0x5a>
 800616c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800616e:	b141      	cbz	r1, 8006182 <__swsetup_r+0x4a>
 8006170:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006174:	4299      	cmp	r1, r3
 8006176:	d002      	beq.n	800617e <__swsetup_r+0x46>
 8006178:	4628      	mov	r0, r5
 800617a:	f000 ff81 	bl	8007080 <_free_r>
 800617e:	2300      	movs	r3, #0
 8006180:	6363      	str	r3, [r4, #52]	@ 0x34
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006188:	81a3      	strh	r3, [r4, #12]
 800618a:	2300      	movs	r3, #0
 800618c:	6063      	str	r3, [r4, #4]
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	f043 0308 	orr.w	r3, r3, #8
 8006198:	81a3      	strh	r3, [r4, #12]
 800619a:	6923      	ldr	r3, [r4, #16]
 800619c:	b94b      	cbnz	r3, 80061b2 <__swsetup_r+0x7a>
 800619e:	89a3      	ldrh	r3, [r4, #12]
 80061a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a8:	d003      	beq.n	80061b2 <__swsetup_r+0x7a>
 80061aa:	4621      	mov	r1, r4
 80061ac:	4628      	mov	r0, r5
 80061ae:	f001 ff67 	bl	8008080 <__smakebuf_r>
 80061b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061b6:	f013 0201 	ands.w	r2, r3, #1
 80061ba:	d00a      	beq.n	80061d2 <__swsetup_r+0x9a>
 80061bc:	2200      	movs	r2, #0
 80061be:	60a2      	str	r2, [r4, #8]
 80061c0:	6962      	ldr	r2, [r4, #20]
 80061c2:	4252      	negs	r2, r2
 80061c4:	61a2      	str	r2, [r4, #24]
 80061c6:	6922      	ldr	r2, [r4, #16]
 80061c8:	b942      	cbnz	r2, 80061dc <__swsetup_r+0xa4>
 80061ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061ce:	d1c5      	bne.n	800615c <__swsetup_r+0x24>
 80061d0:	bd38      	pop	{r3, r4, r5, pc}
 80061d2:	0799      	lsls	r1, r3, #30
 80061d4:	bf58      	it	pl
 80061d6:	6962      	ldrpl	r2, [r4, #20]
 80061d8:	60a2      	str	r2, [r4, #8]
 80061da:	e7f4      	b.n	80061c6 <__swsetup_r+0x8e>
 80061dc:	2000      	movs	r0, #0
 80061de:	e7f7      	b.n	80061d0 <__swsetup_r+0x98>
 80061e0:	20000018 	.word	0x20000018

080061e4 <memset>:
 80061e4:	4402      	add	r2, r0
 80061e6:	4603      	mov	r3, r0
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d100      	bne.n	80061ee <memset+0xa>
 80061ec:	4770      	bx	lr
 80061ee:	f803 1b01 	strb.w	r1, [r3], #1
 80061f2:	e7f9      	b.n	80061e8 <memset+0x4>

080061f4 <strtok>:
 80061f4:	4b16      	ldr	r3, [pc, #88]	@ (8006250 <strtok+0x5c>)
 80061f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fa:	681f      	ldr	r7, [r3, #0]
 80061fc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80061fe:	4605      	mov	r5, r0
 8006200:	460e      	mov	r6, r1
 8006202:	b9ec      	cbnz	r4, 8006240 <strtok+0x4c>
 8006204:	2050      	movs	r0, #80	@ 0x50
 8006206:	f000 ff85 	bl	8007114 <malloc>
 800620a:	4602      	mov	r2, r0
 800620c:	6478      	str	r0, [r7, #68]	@ 0x44
 800620e:	b920      	cbnz	r0, 800621a <strtok+0x26>
 8006210:	4b10      	ldr	r3, [pc, #64]	@ (8006254 <strtok+0x60>)
 8006212:	4811      	ldr	r0, [pc, #68]	@ (8006258 <strtok+0x64>)
 8006214:	215b      	movs	r1, #91	@ 0x5b
 8006216:	f000 f8c9 	bl	80063ac <__assert_func>
 800621a:	e9c0 4400 	strd	r4, r4, [r0]
 800621e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006222:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006226:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800622a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800622e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006232:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006236:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800623a:	6184      	str	r4, [r0, #24]
 800623c:	7704      	strb	r4, [r0, #28]
 800623e:	6244      	str	r4, [r0, #36]	@ 0x24
 8006240:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006242:	4631      	mov	r1, r6
 8006244:	4628      	mov	r0, r5
 8006246:	2301      	movs	r3, #1
 8006248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800624c:	f000 b806 	b.w	800625c <__strtok_r>
 8006250:	20000018 	.word	0x20000018
 8006254:	08008408 	.word	0x08008408
 8006258:	0800841f 	.word	0x0800841f

0800625c <__strtok_r>:
 800625c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625e:	4604      	mov	r4, r0
 8006260:	b908      	cbnz	r0, 8006266 <__strtok_r+0xa>
 8006262:	6814      	ldr	r4, [r2, #0]
 8006264:	b144      	cbz	r4, 8006278 <__strtok_r+0x1c>
 8006266:	4620      	mov	r0, r4
 8006268:	f814 5b01 	ldrb.w	r5, [r4], #1
 800626c:	460f      	mov	r7, r1
 800626e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006272:	b91e      	cbnz	r6, 800627c <__strtok_r+0x20>
 8006274:	b965      	cbnz	r5, 8006290 <__strtok_r+0x34>
 8006276:	6015      	str	r5, [r2, #0]
 8006278:	2000      	movs	r0, #0
 800627a:	e005      	b.n	8006288 <__strtok_r+0x2c>
 800627c:	42b5      	cmp	r5, r6
 800627e:	d1f6      	bne.n	800626e <__strtok_r+0x12>
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f0      	bne.n	8006266 <__strtok_r+0xa>
 8006284:	6014      	str	r4, [r2, #0]
 8006286:	7003      	strb	r3, [r0, #0]
 8006288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800628a:	461c      	mov	r4, r3
 800628c:	e00c      	b.n	80062a8 <__strtok_r+0x4c>
 800628e:	b915      	cbnz	r5, 8006296 <__strtok_r+0x3a>
 8006290:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006294:	460e      	mov	r6, r1
 8006296:	f816 5b01 	ldrb.w	r5, [r6], #1
 800629a:	42ab      	cmp	r3, r5
 800629c:	d1f7      	bne.n	800628e <__strtok_r+0x32>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f3      	beq.n	800628a <__strtok_r+0x2e>
 80062a2:	2300      	movs	r3, #0
 80062a4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80062a8:	6014      	str	r4, [r2, #0]
 80062aa:	e7ed      	b.n	8006288 <__strtok_r+0x2c>

080062ac <_localeconv_r>:
 80062ac:	4800      	ldr	r0, [pc, #0]	@ (80062b0 <_localeconv_r+0x4>)
 80062ae:	4770      	bx	lr
 80062b0:	20000158 	.word	0x20000158

080062b4 <_close_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d06      	ldr	r5, [pc, #24]	@ (80062d0 <_close_r+0x1c>)
 80062b8:	2300      	movs	r3, #0
 80062ba:	4604      	mov	r4, r0
 80062bc:	4608      	mov	r0, r1
 80062be:	602b      	str	r3, [r5, #0]
 80062c0:	f7fb fce0 	bl	8001c84 <_close>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_close_r+0x1a>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_close_r+0x1a>
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	20000578 	.word	0x20000578

080062d4 <_lseek_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4d07      	ldr	r5, [pc, #28]	@ (80062f4 <_lseek_r+0x20>)
 80062d8:	4604      	mov	r4, r0
 80062da:	4608      	mov	r0, r1
 80062dc:	4611      	mov	r1, r2
 80062de:	2200      	movs	r2, #0
 80062e0:	602a      	str	r2, [r5, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f7fb fcf5 	bl	8001cd2 <_lseek>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d102      	bne.n	80062f2 <_lseek_r+0x1e>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	b103      	cbz	r3, 80062f2 <_lseek_r+0x1e>
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
 80062f4:	20000578 	.word	0x20000578

080062f8 <_read_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4d07      	ldr	r5, [pc, #28]	@ (8006318 <_read_r+0x20>)
 80062fc:	4604      	mov	r4, r0
 80062fe:	4608      	mov	r0, r1
 8006300:	4611      	mov	r1, r2
 8006302:	2200      	movs	r2, #0
 8006304:	602a      	str	r2, [r5, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	f7fb fc83 	bl	8001c12 <_read>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_read_r+0x1e>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_read_r+0x1e>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	20000578 	.word	0x20000578

0800631c <_write_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d07      	ldr	r5, [pc, #28]	@ (800633c <_write_r+0x20>)
 8006320:	4604      	mov	r4, r0
 8006322:	4608      	mov	r0, r1
 8006324:	4611      	mov	r1, r2
 8006326:	2200      	movs	r2, #0
 8006328:	602a      	str	r2, [r5, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	f7fb fc8e 	bl	8001c4c <_write>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_write_r+0x1e>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_write_r+0x1e>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	20000578 	.word	0x20000578

08006340 <__errno>:
 8006340:	4b01      	ldr	r3, [pc, #4]	@ (8006348 <__errno+0x8>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000018 	.word	0x20000018

0800634c <__libc_init_array>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4d0d      	ldr	r5, [pc, #52]	@ (8006384 <__libc_init_array+0x38>)
 8006350:	4c0d      	ldr	r4, [pc, #52]	@ (8006388 <__libc_init_array+0x3c>)
 8006352:	1b64      	subs	r4, r4, r5
 8006354:	10a4      	asrs	r4, r4, #2
 8006356:	2600      	movs	r6, #0
 8006358:	42a6      	cmp	r6, r4
 800635a:	d109      	bne.n	8006370 <__libc_init_array+0x24>
 800635c:	4d0b      	ldr	r5, [pc, #44]	@ (800638c <__libc_init_array+0x40>)
 800635e:	4c0c      	ldr	r4, [pc, #48]	@ (8006390 <__libc_init_array+0x44>)
 8006360:	f001 ffd8 	bl	8008314 <_init>
 8006364:	1b64      	subs	r4, r4, r5
 8006366:	10a4      	asrs	r4, r4, #2
 8006368:	2600      	movs	r6, #0
 800636a:	42a6      	cmp	r6, r4
 800636c:	d105      	bne.n	800637a <__libc_init_array+0x2e>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	f855 3b04 	ldr.w	r3, [r5], #4
 8006374:	4798      	blx	r3
 8006376:	3601      	adds	r6, #1
 8006378:	e7ee      	b.n	8006358 <__libc_init_array+0xc>
 800637a:	f855 3b04 	ldr.w	r3, [r5], #4
 800637e:	4798      	blx	r3
 8006380:	3601      	adds	r6, #1
 8006382:	e7f2      	b.n	800636a <__libc_init_array+0x1e>
 8006384:	080087a4 	.word	0x080087a4
 8006388:	080087a4 	.word	0x080087a4
 800638c:	080087a4 	.word	0x080087a4
 8006390:	080087a8 	.word	0x080087a8

08006394 <__retarget_lock_init_recursive>:
 8006394:	4770      	bx	lr

08006396 <__retarget_lock_acquire_recursive>:
 8006396:	4770      	bx	lr

08006398 <__retarget_lock_release_recursive>:
 8006398:	4770      	bx	lr

0800639a <strcpy>:
 800639a:	4603      	mov	r3, r0
 800639c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063a0:	f803 2b01 	strb.w	r2, [r3], #1
 80063a4:	2a00      	cmp	r2, #0
 80063a6:	d1f9      	bne.n	800639c <strcpy+0x2>
 80063a8:	4770      	bx	lr
	...

080063ac <__assert_func>:
 80063ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063ae:	4614      	mov	r4, r2
 80063b0:	461a      	mov	r2, r3
 80063b2:	4b09      	ldr	r3, [pc, #36]	@ (80063d8 <__assert_func+0x2c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4605      	mov	r5, r0
 80063b8:	68d8      	ldr	r0, [r3, #12]
 80063ba:	b954      	cbnz	r4, 80063d2 <__assert_func+0x26>
 80063bc:	4b07      	ldr	r3, [pc, #28]	@ (80063dc <__assert_func+0x30>)
 80063be:	461c      	mov	r4, r3
 80063c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063c4:	9100      	str	r1, [sp, #0]
 80063c6:	462b      	mov	r3, r5
 80063c8:	4905      	ldr	r1, [pc, #20]	@ (80063e0 <__assert_func+0x34>)
 80063ca:	f001 fe21 	bl	8008010 <fiprintf>
 80063ce:	f001 feed 	bl	80081ac <abort>
 80063d2:	4b04      	ldr	r3, [pc, #16]	@ (80063e4 <__assert_func+0x38>)
 80063d4:	e7f4      	b.n	80063c0 <__assert_func+0x14>
 80063d6:	bf00      	nop
 80063d8:	20000018 	.word	0x20000018
 80063dc:	080084b4 	.word	0x080084b4
 80063e0:	08008486 	.word	0x08008486
 80063e4:	08008479 	.word	0x08008479

080063e8 <quorem>:
 80063e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	6903      	ldr	r3, [r0, #16]
 80063ee:	690c      	ldr	r4, [r1, #16]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	4607      	mov	r7, r0
 80063f4:	db7e      	blt.n	80064f4 <quorem+0x10c>
 80063f6:	3c01      	subs	r4, #1
 80063f8:	f101 0814 	add.w	r8, r1, #20
 80063fc:	00a3      	lsls	r3, r4, #2
 80063fe:	f100 0514 	add.w	r5, r0, #20
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800640e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006412:	3301      	adds	r3, #1
 8006414:	429a      	cmp	r2, r3
 8006416:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800641a:	fbb2 f6f3 	udiv	r6, r2, r3
 800641e:	d32e      	bcc.n	800647e <quorem+0x96>
 8006420:	f04f 0a00 	mov.w	sl, #0
 8006424:	46c4      	mov	ip, r8
 8006426:	46ae      	mov	lr, r5
 8006428:	46d3      	mov	fp, sl
 800642a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800642e:	b298      	uxth	r0, r3
 8006430:	fb06 a000 	mla	r0, r6, r0, sl
 8006434:	0c02      	lsrs	r2, r0, #16
 8006436:	0c1b      	lsrs	r3, r3, #16
 8006438:	fb06 2303 	mla	r3, r6, r3, r2
 800643c:	f8de 2000 	ldr.w	r2, [lr]
 8006440:	b280      	uxth	r0, r0
 8006442:	b292      	uxth	r2, r2
 8006444:	1a12      	subs	r2, r2, r0
 8006446:	445a      	add	r2, fp
 8006448:	f8de 0000 	ldr.w	r0, [lr]
 800644c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006450:	b29b      	uxth	r3, r3
 8006452:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006456:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800645a:	b292      	uxth	r2, r2
 800645c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006460:	45e1      	cmp	r9, ip
 8006462:	f84e 2b04 	str.w	r2, [lr], #4
 8006466:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800646a:	d2de      	bcs.n	800642a <quorem+0x42>
 800646c:	9b00      	ldr	r3, [sp, #0]
 800646e:	58eb      	ldr	r3, [r5, r3]
 8006470:	b92b      	cbnz	r3, 800647e <quorem+0x96>
 8006472:	9b01      	ldr	r3, [sp, #4]
 8006474:	3b04      	subs	r3, #4
 8006476:	429d      	cmp	r5, r3
 8006478:	461a      	mov	r2, r3
 800647a:	d32f      	bcc.n	80064dc <quorem+0xf4>
 800647c:	613c      	str	r4, [r7, #16]
 800647e:	4638      	mov	r0, r7
 8006480:	f001 f978 	bl	8007774 <__mcmp>
 8006484:	2800      	cmp	r0, #0
 8006486:	db25      	blt.n	80064d4 <quorem+0xec>
 8006488:	4629      	mov	r1, r5
 800648a:	2000      	movs	r0, #0
 800648c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006490:	f8d1 c000 	ldr.w	ip, [r1]
 8006494:	fa1f fe82 	uxth.w	lr, r2
 8006498:	fa1f f38c 	uxth.w	r3, ip
 800649c:	eba3 030e 	sub.w	r3, r3, lr
 80064a0:	4403      	add	r3, r0
 80064a2:	0c12      	lsrs	r2, r2, #16
 80064a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064b2:	45c1      	cmp	r9, r8
 80064b4:	f841 3b04 	str.w	r3, [r1], #4
 80064b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064bc:	d2e6      	bcs.n	800648c <quorem+0xa4>
 80064be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064c6:	b922      	cbnz	r2, 80064d2 <quorem+0xea>
 80064c8:	3b04      	subs	r3, #4
 80064ca:	429d      	cmp	r5, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	d30b      	bcc.n	80064e8 <quorem+0x100>
 80064d0:	613c      	str	r4, [r7, #16]
 80064d2:	3601      	adds	r6, #1
 80064d4:	4630      	mov	r0, r6
 80064d6:	b003      	add	sp, #12
 80064d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	3b04      	subs	r3, #4
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d1cb      	bne.n	800647c <quorem+0x94>
 80064e4:	3c01      	subs	r4, #1
 80064e6:	e7c6      	b.n	8006476 <quorem+0x8e>
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	3b04      	subs	r3, #4
 80064ec:	2a00      	cmp	r2, #0
 80064ee:	d1ef      	bne.n	80064d0 <quorem+0xe8>
 80064f0:	3c01      	subs	r4, #1
 80064f2:	e7ea      	b.n	80064ca <quorem+0xe2>
 80064f4:	2000      	movs	r0, #0
 80064f6:	e7ee      	b.n	80064d6 <quorem+0xee>

080064f8 <_dtoa_r>:
 80064f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	69c7      	ldr	r7, [r0, #28]
 80064fe:	b099      	sub	sp, #100	@ 0x64
 8006500:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006504:	ec55 4b10 	vmov	r4, r5, d0
 8006508:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800650a:	9109      	str	r1, [sp, #36]	@ 0x24
 800650c:	4683      	mov	fp, r0
 800650e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006510:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006512:	b97f      	cbnz	r7, 8006534 <_dtoa_r+0x3c>
 8006514:	2010      	movs	r0, #16
 8006516:	f000 fdfd 	bl	8007114 <malloc>
 800651a:	4602      	mov	r2, r0
 800651c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006520:	b920      	cbnz	r0, 800652c <_dtoa_r+0x34>
 8006522:	4ba7      	ldr	r3, [pc, #668]	@ (80067c0 <_dtoa_r+0x2c8>)
 8006524:	21ef      	movs	r1, #239	@ 0xef
 8006526:	48a7      	ldr	r0, [pc, #668]	@ (80067c4 <_dtoa_r+0x2cc>)
 8006528:	f7ff ff40 	bl	80063ac <__assert_func>
 800652c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006530:	6007      	str	r7, [r0, #0]
 8006532:	60c7      	str	r7, [r0, #12]
 8006534:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006538:	6819      	ldr	r1, [r3, #0]
 800653a:	b159      	cbz	r1, 8006554 <_dtoa_r+0x5c>
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	604a      	str	r2, [r1, #4]
 8006540:	2301      	movs	r3, #1
 8006542:	4093      	lsls	r3, r2
 8006544:	608b      	str	r3, [r1, #8]
 8006546:	4658      	mov	r0, fp
 8006548:	f000 feda 	bl	8007300 <_Bfree>
 800654c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	1e2b      	subs	r3, r5, #0
 8006556:	bfb9      	ittee	lt
 8006558:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800655c:	9303      	strlt	r3, [sp, #12]
 800655e:	2300      	movge	r3, #0
 8006560:	6033      	strge	r3, [r6, #0]
 8006562:	9f03      	ldr	r7, [sp, #12]
 8006564:	4b98      	ldr	r3, [pc, #608]	@ (80067c8 <_dtoa_r+0x2d0>)
 8006566:	bfbc      	itt	lt
 8006568:	2201      	movlt	r2, #1
 800656a:	6032      	strlt	r2, [r6, #0]
 800656c:	43bb      	bics	r3, r7
 800656e:	d112      	bne.n	8006596 <_dtoa_r+0x9e>
 8006570:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006572:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800657c:	4323      	orrs	r3, r4
 800657e:	f000 854d 	beq.w	800701c <_dtoa_r+0xb24>
 8006582:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006584:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80067dc <_dtoa_r+0x2e4>
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 854f 	beq.w	800702c <_dtoa_r+0xb34>
 800658e:	f10a 0303 	add.w	r3, sl, #3
 8006592:	f000 bd49 	b.w	8007028 <_dtoa_r+0xb30>
 8006596:	ed9d 7b02 	vldr	d7, [sp, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	ec51 0b17 	vmov	r0, r1, d7
 80065a0:	2300      	movs	r3, #0
 80065a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80065a6:	f7fa faa7 	bl	8000af8 <__aeabi_dcmpeq>
 80065aa:	4680      	mov	r8, r0
 80065ac:	b158      	cbz	r0, 80065c6 <_dtoa_r+0xce>
 80065ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80065b0:	2301      	movs	r3, #1
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065b6:	b113      	cbz	r3, 80065be <_dtoa_r+0xc6>
 80065b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80065ba:	4b84      	ldr	r3, [pc, #528]	@ (80067cc <_dtoa_r+0x2d4>)
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80067e0 <_dtoa_r+0x2e8>
 80065c2:	f000 bd33 	b.w	800702c <_dtoa_r+0xb34>
 80065c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80065ca:	aa16      	add	r2, sp, #88	@ 0x58
 80065cc:	a917      	add	r1, sp, #92	@ 0x5c
 80065ce:	4658      	mov	r0, fp
 80065d0:	f001 f980 	bl	80078d4 <__d2b>
 80065d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80065d8:	4681      	mov	r9, r0
 80065da:	2e00      	cmp	r6, #0
 80065dc:	d077      	beq.n	80066ce <_dtoa_r+0x1d6>
 80065de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80065e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80065f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80065f8:	4619      	mov	r1, r3
 80065fa:	2200      	movs	r2, #0
 80065fc:	4b74      	ldr	r3, [pc, #464]	@ (80067d0 <_dtoa_r+0x2d8>)
 80065fe:	f7f9 fe5b 	bl	80002b8 <__aeabi_dsub>
 8006602:	a369      	add	r3, pc, #420	@ (adr r3, 80067a8 <_dtoa_r+0x2b0>)
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	f7fa f80e 	bl	8000628 <__aeabi_dmul>
 800660c:	a368      	add	r3, pc, #416	@ (adr r3, 80067b0 <_dtoa_r+0x2b8>)
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f7f9 fe53 	bl	80002bc <__adddf3>
 8006616:	4604      	mov	r4, r0
 8006618:	4630      	mov	r0, r6
 800661a:	460d      	mov	r5, r1
 800661c:	f7f9 ff9a 	bl	8000554 <__aeabi_i2d>
 8006620:	a365      	add	r3, pc, #404	@ (adr r3, 80067b8 <_dtoa_r+0x2c0>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7f9 ffff 	bl	8000628 <__aeabi_dmul>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4620      	mov	r0, r4
 8006630:	4629      	mov	r1, r5
 8006632:	f7f9 fe43 	bl	80002bc <__adddf3>
 8006636:	4604      	mov	r4, r0
 8006638:	460d      	mov	r5, r1
 800663a:	f7fa faa5 	bl	8000b88 <__aeabi_d2iz>
 800663e:	2200      	movs	r2, #0
 8006640:	4607      	mov	r7, r0
 8006642:	2300      	movs	r3, #0
 8006644:	4620      	mov	r0, r4
 8006646:	4629      	mov	r1, r5
 8006648:	f7fa fa60 	bl	8000b0c <__aeabi_dcmplt>
 800664c:	b140      	cbz	r0, 8006660 <_dtoa_r+0x168>
 800664e:	4638      	mov	r0, r7
 8006650:	f7f9 ff80 	bl	8000554 <__aeabi_i2d>
 8006654:	4622      	mov	r2, r4
 8006656:	462b      	mov	r3, r5
 8006658:	f7fa fa4e 	bl	8000af8 <__aeabi_dcmpeq>
 800665c:	b900      	cbnz	r0, 8006660 <_dtoa_r+0x168>
 800665e:	3f01      	subs	r7, #1
 8006660:	2f16      	cmp	r7, #22
 8006662:	d851      	bhi.n	8006708 <_dtoa_r+0x210>
 8006664:	4b5b      	ldr	r3, [pc, #364]	@ (80067d4 <_dtoa_r+0x2dc>)
 8006666:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006672:	f7fa fa4b 	bl	8000b0c <__aeabi_dcmplt>
 8006676:	2800      	cmp	r0, #0
 8006678:	d048      	beq.n	800670c <_dtoa_r+0x214>
 800667a:	3f01      	subs	r7, #1
 800667c:	2300      	movs	r3, #0
 800667e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006680:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006682:	1b9b      	subs	r3, r3, r6
 8006684:	1e5a      	subs	r2, r3, #1
 8006686:	bf44      	itt	mi
 8006688:	f1c3 0801 	rsbmi	r8, r3, #1
 800668c:	2300      	movmi	r3, #0
 800668e:	9208      	str	r2, [sp, #32]
 8006690:	bf54      	ite	pl
 8006692:	f04f 0800 	movpl.w	r8, #0
 8006696:	9308      	strmi	r3, [sp, #32]
 8006698:	2f00      	cmp	r7, #0
 800669a:	db39      	blt.n	8006710 <_dtoa_r+0x218>
 800669c:	9b08      	ldr	r3, [sp, #32]
 800669e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80066a0:	443b      	add	r3, r7
 80066a2:	9308      	str	r3, [sp, #32]
 80066a4:	2300      	movs	r3, #0
 80066a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066aa:	2b09      	cmp	r3, #9
 80066ac:	d864      	bhi.n	8006778 <_dtoa_r+0x280>
 80066ae:	2b05      	cmp	r3, #5
 80066b0:	bfc4      	itt	gt
 80066b2:	3b04      	subgt	r3, #4
 80066b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80066b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b8:	f1a3 0302 	sub.w	r3, r3, #2
 80066bc:	bfcc      	ite	gt
 80066be:	2400      	movgt	r4, #0
 80066c0:	2401      	movle	r4, #1
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d863      	bhi.n	800678e <_dtoa_r+0x296>
 80066c6:	e8df f003 	tbb	[pc, r3]
 80066ca:	372a      	.short	0x372a
 80066cc:	5535      	.short	0x5535
 80066ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80066d2:	441e      	add	r6, r3
 80066d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80066d8:	2b20      	cmp	r3, #32
 80066da:	bfc1      	itttt	gt
 80066dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80066e0:	409f      	lslgt	r7, r3
 80066e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80066e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066ea:	bfd6      	itet	le
 80066ec:	f1c3 0320 	rsble	r3, r3, #32
 80066f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80066f4:	fa04 f003 	lslle.w	r0, r4, r3
 80066f8:	f7f9 ff1c 	bl	8000534 <__aeabi_ui2d>
 80066fc:	2201      	movs	r2, #1
 80066fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006702:	3e01      	subs	r6, #1
 8006704:	9214      	str	r2, [sp, #80]	@ 0x50
 8006706:	e777      	b.n	80065f8 <_dtoa_r+0x100>
 8006708:	2301      	movs	r3, #1
 800670a:	e7b8      	b.n	800667e <_dtoa_r+0x186>
 800670c:	9012      	str	r0, [sp, #72]	@ 0x48
 800670e:	e7b7      	b.n	8006680 <_dtoa_r+0x188>
 8006710:	427b      	negs	r3, r7
 8006712:	930a      	str	r3, [sp, #40]	@ 0x28
 8006714:	2300      	movs	r3, #0
 8006716:	eba8 0807 	sub.w	r8, r8, r7
 800671a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800671c:	e7c4      	b.n	80066a8 <_dtoa_r+0x1b0>
 800671e:	2300      	movs	r3, #0
 8006720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006724:	2b00      	cmp	r3, #0
 8006726:	dc35      	bgt.n	8006794 <_dtoa_r+0x29c>
 8006728:	2301      	movs	r3, #1
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	9307      	str	r3, [sp, #28]
 800672e:	461a      	mov	r2, r3
 8006730:	920e      	str	r2, [sp, #56]	@ 0x38
 8006732:	e00b      	b.n	800674c <_dtoa_r+0x254>
 8006734:	2301      	movs	r3, #1
 8006736:	e7f3      	b.n	8006720 <_dtoa_r+0x228>
 8006738:	2300      	movs	r3, #0
 800673a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800673c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	3301      	adds	r3, #1
 8006744:	2b01      	cmp	r3, #1
 8006746:	9307      	str	r3, [sp, #28]
 8006748:	bfb8      	it	lt
 800674a:	2301      	movlt	r3, #1
 800674c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006750:	2100      	movs	r1, #0
 8006752:	2204      	movs	r2, #4
 8006754:	f102 0514 	add.w	r5, r2, #20
 8006758:	429d      	cmp	r5, r3
 800675a:	d91f      	bls.n	800679c <_dtoa_r+0x2a4>
 800675c:	6041      	str	r1, [r0, #4]
 800675e:	4658      	mov	r0, fp
 8006760:	f000 fd8e 	bl	8007280 <_Balloc>
 8006764:	4682      	mov	sl, r0
 8006766:	2800      	cmp	r0, #0
 8006768:	d13c      	bne.n	80067e4 <_dtoa_r+0x2ec>
 800676a:	4b1b      	ldr	r3, [pc, #108]	@ (80067d8 <_dtoa_r+0x2e0>)
 800676c:	4602      	mov	r2, r0
 800676e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006772:	e6d8      	b.n	8006526 <_dtoa_r+0x2e>
 8006774:	2301      	movs	r3, #1
 8006776:	e7e0      	b.n	800673a <_dtoa_r+0x242>
 8006778:	2401      	movs	r4, #1
 800677a:	2300      	movs	r3, #0
 800677c:	9309      	str	r3, [sp, #36]	@ 0x24
 800677e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006780:	f04f 33ff 	mov.w	r3, #4294967295
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	9307      	str	r3, [sp, #28]
 8006788:	2200      	movs	r2, #0
 800678a:	2312      	movs	r3, #18
 800678c:	e7d0      	b.n	8006730 <_dtoa_r+0x238>
 800678e:	2301      	movs	r3, #1
 8006790:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006792:	e7f5      	b.n	8006780 <_dtoa_r+0x288>
 8006794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	9307      	str	r3, [sp, #28]
 800679a:	e7d7      	b.n	800674c <_dtoa_r+0x254>
 800679c:	3101      	adds	r1, #1
 800679e:	0052      	lsls	r2, r2, #1
 80067a0:	e7d8      	b.n	8006754 <_dtoa_r+0x25c>
 80067a2:	bf00      	nop
 80067a4:	f3af 8000 	nop.w
 80067a8:	636f4361 	.word	0x636f4361
 80067ac:	3fd287a7 	.word	0x3fd287a7
 80067b0:	8b60c8b3 	.word	0x8b60c8b3
 80067b4:	3fc68a28 	.word	0x3fc68a28
 80067b8:	509f79fb 	.word	0x509f79fb
 80067bc:	3fd34413 	.word	0x3fd34413
 80067c0:	08008408 	.word	0x08008408
 80067c4:	080084c2 	.word	0x080084c2
 80067c8:	7ff00000 	.word	0x7ff00000
 80067cc:	080083e5 	.word	0x080083e5
 80067d0:	3ff80000 	.word	0x3ff80000
 80067d4:	080085b8 	.word	0x080085b8
 80067d8:	0800851a 	.word	0x0800851a
 80067dc:	080084be 	.word	0x080084be
 80067e0:	080083e4 	.word	0x080083e4
 80067e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067e8:	6018      	str	r0, [r3, #0]
 80067ea:	9b07      	ldr	r3, [sp, #28]
 80067ec:	2b0e      	cmp	r3, #14
 80067ee:	f200 80a4 	bhi.w	800693a <_dtoa_r+0x442>
 80067f2:	2c00      	cmp	r4, #0
 80067f4:	f000 80a1 	beq.w	800693a <_dtoa_r+0x442>
 80067f8:	2f00      	cmp	r7, #0
 80067fa:	dd33      	ble.n	8006864 <_dtoa_r+0x36c>
 80067fc:	4bad      	ldr	r3, [pc, #692]	@ (8006ab4 <_dtoa_r+0x5bc>)
 80067fe:	f007 020f 	and.w	r2, r7, #15
 8006802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006806:	ed93 7b00 	vldr	d7, [r3]
 800680a:	05f8      	lsls	r0, r7, #23
 800680c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006810:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006814:	d516      	bpl.n	8006844 <_dtoa_r+0x34c>
 8006816:	4ba8      	ldr	r3, [pc, #672]	@ (8006ab8 <_dtoa_r+0x5c0>)
 8006818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800681c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006820:	f7fa f82c 	bl	800087c <__aeabi_ddiv>
 8006824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006828:	f004 040f 	and.w	r4, r4, #15
 800682c:	2603      	movs	r6, #3
 800682e:	4da2      	ldr	r5, [pc, #648]	@ (8006ab8 <_dtoa_r+0x5c0>)
 8006830:	b954      	cbnz	r4, 8006848 <_dtoa_r+0x350>
 8006832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800683a:	f7fa f81f 	bl	800087c <__aeabi_ddiv>
 800683e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006842:	e028      	b.n	8006896 <_dtoa_r+0x39e>
 8006844:	2602      	movs	r6, #2
 8006846:	e7f2      	b.n	800682e <_dtoa_r+0x336>
 8006848:	07e1      	lsls	r1, r4, #31
 800684a:	d508      	bpl.n	800685e <_dtoa_r+0x366>
 800684c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006850:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006854:	f7f9 fee8 	bl	8000628 <__aeabi_dmul>
 8006858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800685c:	3601      	adds	r6, #1
 800685e:	1064      	asrs	r4, r4, #1
 8006860:	3508      	adds	r5, #8
 8006862:	e7e5      	b.n	8006830 <_dtoa_r+0x338>
 8006864:	f000 80d2 	beq.w	8006a0c <_dtoa_r+0x514>
 8006868:	427c      	negs	r4, r7
 800686a:	4b92      	ldr	r3, [pc, #584]	@ (8006ab4 <_dtoa_r+0x5bc>)
 800686c:	4d92      	ldr	r5, [pc, #584]	@ (8006ab8 <_dtoa_r+0x5c0>)
 800686e:	f004 020f 	and.w	r2, r4, #15
 8006872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800687e:	f7f9 fed3 	bl	8000628 <__aeabi_dmul>
 8006882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006886:	1124      	asrs	r4, r4, #4
 8006888:	2300      	movs	r3, #0
 800688a:	2602      	movs	r6, #2
 800688c:	2c00      	cmp	r4, #0
 800688e:	f040 80b2 	bne.w	80069f6 <_dtoa_r+0x4fe>
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1d3      	bne.n	800683e <_dtoa_r+0x346>
 8006896:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006898:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 80b7 	beq.w	8006a10 <_dtoa_r+0x518>
 80068a2:	4b86      	ldr	r3, [pc, #536]	@ (8006abc <_dtoa_r+0x5c4>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	4620      	mov	r0, r4
 80068a8:	4629      	mov	r1, r5
 80068aa:	f7fa f92f 	bl	8000b0c <__aeabi_dcmplt>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f000 80ae 	beq.w	8006a10 <_dtoa_r+0x518>
 80068b4:	9b07      	ldr	r3, [sp, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 80aa 	beq.w	8006a10 <_dtoa_r+0x518>
 80068bc:	9b00      	ldr	r3, [sp, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	dd37      	ble.n	8006932 <_dtoa_r+0x43a>
 80068c2:	1e7b      	subs	r3, r7, #1
 80068c4:	9304      	str	r3, [sp, #16]
 80068c6:	4620      	mov	r0, r4
 80068c8:	4b7d      	ldr	r3, [pc, #500]	@ (8006ac0 <_dtoa_r+0x5c8>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	4629      	mov	r1, r5
 80068ce:	f7f9 feab 	bl	8000628 <__aeabi_dmul>
 80068d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068d6:	9c00      	ldr	r4, [sp, #0]
 80068d8:	3601      	adds	r6, #1
 80068da:	4630      	mov	r0, r6
 80068dc:	f7f9 fe3a 	bl	8000554 <__aeabi_i2d>
 80068e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068e4:	f7f9 fea0 	bl	8000628 <__aeabi_dmul>
 80068e8:	4b76      	ldr	r3, [pc, #472]	@ (8006ac4 <_dtoa_r+0x5cc>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	f7f9 fce6 	bl	80002bc <__adddf3>
 80068f0:	4605      	mov	r5, r0
 80068f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068f6:	2c00      	cmp	r4, #0
 80068f8:	f040 808d 	bne.w	8006a16 <_dtoa_r+0x51e>
 80068fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006900:	4b71      	ldr	r3, [pc, #452]	@ (8006ac8 <_dtoa_r+0x5d0>)
 8006902:	2200      	movs	r2, #0
 8006904:	f7f9 fcd8 	bl	80002b8 <__aeabi_dsub>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006910:	462a      	mov	r2, r5
 8006912:	4633      	mov	r3, r6
 8006914:	f7fa f918 	bl	8000b48 <__aeabi_dcmpgt>
 8006918:	2800      	cmp	r0, #0
 800691a:	f040 828b 	bne.w	8006e34 <_dtoa_r+0x93c>
 800691e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006922:	462a      	mov	r2, r5
 8006924:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006928:	f7fa f8f0 	bl	8000b0c <__aeabi_dcmplt>
 800692c:	2800      	cmp	r0, #0
 800692e:	f040 8128 	bne.w	8006b82 <_dtoa_r+0x68a>
 8006932:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006936:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800693a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800693c:	2b00      	cmp	r3, #0
 800693e:	f2c0 815a 	blt.w	8006bf6 <_dtoa_r+0x6fe>
 8006942:	2f0e      	cmp	r7, #14
 8006944:	f300 8157 	bgt.w	8006bf6 <_dtoa_r+0x6fe>
 8006948:	4b5a      	ldr	r3, [pc, #360]	@ (8006ab4 <_dtoa_r+0x5bc>)
 800694a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800694e:	ed93 7b00 	vldr	d7, [r3]
 8006952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006954:	2b00      	cmp	r3, #0
 8006956:	ed8d 7b00 	vstr	d7, [sp]
 800695a:	da03      	bge.n	8006964 <_dtoa_r+0x46c>
 800695c:	9b07      	ldr	r3, [sp, #28]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f340 8101 	ble.w	8006b66 <_dtoa_r+0x66e>
 8006964:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006968:	4656      	mov	r6, sl
 800696a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800696e:	4620      	mov	r0, r4
 8006970:	4629      	mov	r1, r5
 8006972:	f7f9 ff83 	bl	800087c <__aeabi_ddiv>
 8006976:	f7fa f907 	bl	8000b88 <__aeabi_d2iz>
 800697a:	4680      	mov	r8, r0
 800697c:	f7f9 fdea 	bl	8000554 <__aeabi_i2d>
 8006980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006984:	f7f9 fe50 	bl	8000628 <__aeabi_dmul>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006994:	f7f9 fc90 	bl	80002b8 <__aeabi_dsub>
 8006998:	f806 4b01 	strb.w	r4, [r6], #1
 800699c:	9d07      	ldr	r5, [sp, #28]
 800699e:	eba6 040a 	sub.w	r4, r6, sl
 80069a2:	42a5      	cmp	r5, r4
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	f040 8117 	bne.w	8006bda <_dtoa_r+0x6e2>
 80069ac:	f7f9 fc86 	bl	80002bc <__adddf3>
 80069b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069b4:	4604      	mov	r4, r0
 80069b6:	460d      	mov	r5, r1
 80069b8:	f7fa f8c6 	bl	8000b48 <__aeabi_dcmpgt>
 80069bc:	2800      	cmp	r0, #0
 80069be:	f040 80f9 	bne.w	8006bb4 <_dtoa_r+0x6bc>
 80069c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069c6:	4620      	mov	r0, r4
 80069c8:	4629      	mov	r1, r5
 80069ca:	f7fa f895 	bl	8000af8 <__aeabi_dcmpeq>
 80069ce:	b118      	cbz	r0, 80069d8 <_dtoa_r+0x4e0>
 80069d0:	f018 0f01 	tst.w	r8, #1
 80069d4:	f040 80ee 	bne.w	8006bb4 <_dtoa_r+0x6bc>
 80069d8:	4649      	mov	r1, r9
 80069da:	4658      	mov	r0, fp
 80069dc:	f000 fc90 	bl	8007300 <_Bfree>
 80069e0:	2300      	movs	r3, #0
 80069e2:	7033      	strb	r3, [r6, #0]
 80069e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80069e6:	3701      	adds	r7, #1
 80069e8:	601f      	str	r7, [r3, #0]
 80069ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 831d 	beq.w	800702c <_dtoa_r+0xb34>
 80069f2:	601e      	str	r6, [r3, #0]
 80069f4:	e31a      	b.n	800702c <_dtoa_r+0xb34>
 80069f6:	07e2      	lsls	r2, r4, #31
 80069f8:	d505      	bpl.n	8006a06 <_dtoa_r+0x50e>
 80069fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069fe:	f7f9 fe13 	bl	8000628 <__aeabi_dmul>
 8006a02:	3601      	adds	r6, #1
 8006a04:	2301      	movs	r3, #1
 8006a06:	1064      	asrs	r4, r4, #1
 8006a08:	3508      	adds	r5, #8
 8006a0a:	e73f      	b.n	800688c <_dtoa_r+0x394>
 8006a0c:	2602      	movs	r6, #2
 8006a0e:	e742      	b.n	8006896 <_dtoa_r+0x39e>
 8006a10:	9c07      	ldr	r4, [sp, #28]
 8006a12:	9704      	str	r7, [sp, #16]
 8006a14:	e761      	b.n	80068da <_dtoa_r+0x3e2>
 8006a16:	4b27      	ldr	r3, [pc, #156]	@ (8006ab4 <_dtoa_r+0x5bc>)
 8006a18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a22:	4454      	add	r4, sl
 8006a24:	2900      	cmp	r1, #0
 8006a26:	d053      	beq.n	8006ad0 <_dtoa_r+0x5d8>
 8006a28:	4928      	ldr	r1, [pc, #160]	@ (8006acc <_dtoa_r+0x5d4>)
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	f7f9 ff26 	bl	800087c <__aeabi_ddiv>
 8006a30:	4633      	mov	r3, r6
 8006a32:	462a      	mov	r2, r5
 8006a34:	f7f9 fc40 	bl	80002b8 <__aeabi_dsub>
 8006a38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a3c:	4656      	mov	r6, sl
 8006a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a42:	f7fa f8a1 	bl	8000b88 <__aeabi_d2iz>
 8006a46:	4605      	mov	r5, r0
 8006a48:	f7f9 fd84 	bl	8000554 <__aeabi_i2d>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a54:	f7f9 fc30 	bl	80002b8 <__aeabi_dsub>
 8006a58:	3530      	adds	r5, #48	@ 0x30
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a62:	f806 5b01 	strb.w	r5, [r6], #1
 8006a66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a6a:	f7fa f84f 	bl	8000b0c <__aeabi_dcmplt>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d171      	bne.n	8006b56 <_dtoa_r+0x65e>
 8006a72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a76:	4911      	ldr	r1, [pc, #68]	@ (8006abc <_dtoa_r+0x5c4>)
 8006a78:	2000      	movs	r0, #0
 8006a7a:	f7f9 fc1d 	bl	80002b8 <__aeabi_dsub>
 8006a7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a82:	f7fa f843 	bl	8000b0c <__aeabi_dcmplt>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	f040 8095 	bne.w	8006bb6 <_dtoa_r+0x6be>
 8006a8c:	42a6      	cmp	r6, r4
 8006a8e:	f43f af50 	beq.w	8006932 <_dtoa_r+0x43a>
 8006a92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a96:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac0 <_dtoa_r+0x5c8>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f7f9 fdc5 	bl	8000628 <__aeabi_dmul>
 8006a9e:	4b08      	ldr	r3, [pc, #32]	@ (8006ac0 <_dtoa_r+0x5c8>)
 8006aa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aaa:	f7f9 fdbd 	bl	8000628 <__aeabi_dmul>
 8006aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ab2:	e7c4      	b.n	8006a3e <_dtoa_r+0x546>
 8006ab4:	080085b8 	.word	0x080085b8
 8006ab8:	08008590 	.word	0x08008590
 8006abc:	3ff00000 	.word	0x3ff00000
 8006ac0:	40240000 	.word	0x40240000
 8006ac4:	401c0000 	.word	0x401c0000
 8006ac8:	40140000 	.word	0x40140000
 8006acc:	3fe00000 	.word	0x3fe00000
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f7f9 fda8 	bl	8000628 <__aeabi_dmul>
 8006ad8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006adc:	9415      	str	r4, [sp, #84]	@ 0x54
 8006ade:	4656      	mov	r6, sl
 8006ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ae4:	f7fa f850 	bl	8000b88 <__aeabi_d2iz>
 8006ae8:	4605      	mov	r5, r0
 8006aea:	f7f9 fd33 	bl	8000554 <__aeabi_i2d>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006af6:	f7f9 fbdf 	bl	80002b8 <__aeabi_dsub>
 8006afa:	3530      	adds	r5, #48	@ 0x30
 8006afc:	f806 5b01 	strb.w	r5, [r6], #1
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	42a6      	cmp	r6, r4
 8006b06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	d124      	bne.n	8006b5a <_dtoa_r+0x662>
 8006b10:	4bac      	ldr	r3, [pc, #688]	@ (8006dc4 <_dtoa_r+0x8cc>)
 8006b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b16:	f7f9 fbd1 	bl	80002bc <__adddf3>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b22:	f7fa f811 	bl	8000b48 <__aeabi_dcmpgt>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d145      	bne.n	8006bb6 <_dtoa_r+0x6be>
 8006b2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b2e:	49a5      	ldr	r1, [pc, #660]	@ (8006dc4 <_dtoa_r+0x8cc>)
 8006b30:	2000      	movs	r0, #0
 8006b32:	f7f9 fbc1 	bl	80002b8 <__aeabi_dsub>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b3e:	f7f9 ffe5 	bl	8000b0c <__aeabi_dcmplt>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	f43f aef5 	beq.w	8006932 <_dtoa_r+0x43a>
 8006b48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006b4a:	1e73      	subs	r3, r6, #1
 8006b4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006b4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b52:	2b30      	cmp	r3, #48	@ 0x30
 8006b54:	d0f8      	beq.n	8006b48 <_dtoa_r+0x650>
 8006b56:	9f04      	ldr	r7, [sp, #16]
 8006b58:	e73e      	b.n	80069d8 <_dtoa_r+0x4e0>
 8006b5a:	4b9b      	ldr	r3, [pc, #620]	@ (8006dc8 <_dtoa_r+0x8d0>)
 8006b5c:	f7f9 fd64 	bl	8000628 <__aeabi_dmul>
 8006b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b64:	e7bc      	b.n	8006ae0 <_dtoa_r+0x5e8>
 8006b66:	d10c      	bne.n	8006b82 <_dtoa_r+0x68a>
 8006b68:	4b98      	ldr	r3, [pc, #608]	@ (8006dcc <_dtoa_r+0x8d4>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b70:	f7f9 fd5a 	bl	8000628 <__aeabi_dmul>
 8006b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b78:	f7f9 ffdc 	bl	8000b34 <__aeabi_dcmpge>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	f000 8157 	beq.w	8006e30 <_dtoa_r+0x938>
 8006b82:	2400      	movs	r4, #0
 8006b84:	4625      	mov	r5, r4
 8006b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	9304      	str	r3, [sp, #16]
 8006b8c:	4656      	mov	r6, sl
 8006b8e:	2700      	movs	r7, #0
 8006b90:	4621      	mov	r1, r4
 8006b92:	4658      	mov	r0, fp
 8006b94:	f000 fbb4 	bl	8007300 <_Bfree>
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	d0dc      	beq.n	8006b56 <_dtoa_r+0x65e>
 8006b9c:	b12f      	cbz	r7, 8006baa <_dtoa_r+0x6b2>
 8006b9e:	42af      	cmp	r7, r5
 8006ba0:	d003      	beq.n	8006baa <_dtoa_r+0x6b2>
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	4658      	mov	r0, fp
 8006ba6:	f000 fbab 	bl	8007300 <_Bfree>
 8006baa:	4629      	mov	r1, r5
 8006bac:	4658      	mov	r0, fp
 8006bae:	f000 fba7 	bl	8007300 <_Bfree>
 8006bb2:	e7d0      	b.n	8006b56 <_dtoa_r+0x65e>
 8006bb4:	9704      	str	r7, [sp, #16]
 8006bb6:	4633      	mov	r3, r6
 8006bb8:	461e      	mov	r6, r3
 8006bba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bbe:	2a39      	cmp	r2, #57	@ 0x39
 8006bc0:	d107      	bne.n	8006bd2 <_dtoa_r+0x6da>
 8006bc2:	459a      	cmp	sl, r3
 8006bc4:	d1f8      	bne.n	8006bb8 <_dtoa_r+0x6c0>
 8006bc6:	9a04      	ldr	r2, [sp, #16]
 8006bc8:	3201      	adds	r2, #1
 8006bca:	9204      	str	r2, [sp, #16]
 8006bcc:	2230      	movs	r2, #48	@ 0x30
 8006bce:	f88a 2000 	strb.w	r2, [sl]
 8006bd2:	781a      	ldrb	r2, [r3, #0]
 8006bd4:	3201      	adds	r2, #1
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	e7bd      	b.n	8006b56 <_dtoa_r+0x65e>
 8006bda:	4b7b      	ldr	r3, [pc, #492]	@ (8006dc8 <_dtoa_r+0x8d0>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f7f9 fd23 	bl	8000628 <__aeabi_dmul>
 8006be2:	2200      	movs	r2, #0
 8006be4:	2300      	movs	r3, #0
 8006be6:	4604      	mov	r4, r0
 8006be8:	460d      	mov	r5, r1
 8006bea:	f7f9 ff85 	bl	8000af8 <__aeabi_dcmpeq>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f43f aebb 	beq.w	800696a <_dtoa_r+0x472>
 8006bf4:	e6f0      	b.n	80069d8 <_dtoa_r+0x4e0>
 8006bf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006bf8:	2a00      	cmp	r2, #0
 8006bfa:	f000 80db 	beq.w	8006db4 <_dtoa_r+0x8bc>
 8006bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c00:	2a01      	cmp	r2, #1
 8006c02:	f300 80bf 	bgt.w	8006d84 <_dtoa_r+0x88c>
 8006c06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006c08:	2a00      	cmp	r2, #0
 8006c0a:	f000 80b7 	beq.w	8006d7c <_dtoa_r+0x884>
 8006c0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c14:	4646      	mov	r6, r8
 8006c16:	9a08      	ldr	r2, [sp, #32]
 8006c18:	2101      	movs	r1, #1
 8006c1a:	441a      	add	r2, r3
 8006c1c:	4658      	mov	r0, fp
 8006c1e:	4498      	add	r8, r3
 8006c20:	9208      	str	r2, [sp, #32]
 8006c22:	f000 fc21 	bl	8007468 <__i2b>
 8006c26:	4605      	mov	r5, r0
 8006c28:	b15e      	cbz	r6, 8006c42 <_dtoa_r+0x74a>
 8006c2a:	9b08      	ldr	r3, [sp, #32]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	dd08      	ble.n	8006c42 <_dtoa_r+0x74a>
 8006c30:	42b3      	cmp	r3, r6
 8006c32:	9a08      	ldr	r2, [sp, #32]
 8006c34:	bfa8      	it	ge
 8006c36:	4633      	movge	r3, r6
 8006c38:	eba8 0803 	sub.w	r8, r8, r3
 8006c3c:	1af6      	subs	r6, r6, r3
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	9308      	str	r3, [sp, #32]
 8006c42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c44:	b1f3      	cbz	r3, 8006c84 <_dtoa_r+0x78c>
 8006c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 80b7 	beq.w	8006dbc <_dtoa_r+0x8c4>
 8006c4e:	b18c      	cbz	r4, 8006c74 <_dtoa_r+0x77c>
 8006c50:	4629      	mov	r1, r5
 8006c52:	4622      	mov	r2, r4
 8006c54:	4658      	mov	r0, fp
 8006c56:	f000 fcc7 	bl	80075e8 <__pow5mult>
 8006c5a:	464a      	mov	r2, r9
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	4605      	mov	r5, r0
 8006c60:	4658      	mov	r0, fp
 8006c62:	f000 fc17 	bl	8007494 <__multiply>
 8006c66:	4649      	mov	r1, r9
 8006c68:	9004      	str	r0, [sp, #16]
 8006c6a:	4658      	mov	r0, fp
 8006c6c:	f000 fb48 	bl	8007300 <_Bfree>
 8006c70:	9b04      	ldr	r3, [sp, #16]
 8006c72:	4699      	mov	r9, r3
 8006c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c76:	1b1a      	subs	r2, r3, r4
 8006c78:	d004      	beq.n	8006c84 <_dtoa_r+0x78c>
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	4658      	mov	r0, fp
 8006c7e:	f000 fcb3 	bl	80075e8 <__pow5mult>
 8006c82:	4681      	mov	r9, r0
 8006c84:	2101      	movs	r1, #1
 8006c86:	4658      	mov	r0, fp
 8006c88:	f000 fbee 	bl	8007468 <__i2b>
 8006c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c8e:	4604      	mov	r4, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 81cf 	beq.w	8007034 <_dtoa_r+0xb3c>
 8006c96:	461a      	mov	r2, r3
 8006c98:	4601      	mov	r1, r0
 8006c9a:	4658      	mov	r0, fp
 8006c9c:	f000 fca4 	bl	80075e8 <__pow5mult>
 8006ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	f300 8095 	bgt.w	8006dd4 <_dtoa_r+0x8dc>
 8006caa:	9b02      	ldr	r3, [sp, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f040 8087 	bne.w	8006dc0 <_dtoa_r+0x8c8>
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f040 8089 	bne.w	8006dd0 <_dtoa_r+0x8d8>
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cc4:	0d1b      	lsrs	r3, r3, #20
 8006cc6:	051b      	lsls	r3, r3, #20
 8006cc8:	b12b      	cbz	r3, 8006cd6 <_dtoa_r+0x7de>
 8006cca:	9b08      	ldr	r3, [sp, #32]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	9308      	str	r3, [sp, #32]
 8006cd0:	f108 0801 	add.w	r8, r8, #1
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 81b0 	beq.w	8007040 <_dtoa_r+0xb48>
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ce6:	6918      	ldr	r0, [r3, #16]
 8006ce8:	f000 fb72 	bl	80073d0 <__hi0bits>
 8006cec:	f1c0 0020 	rsb	r0, r0, #32
 8006cf0:	9b08      	ldr	r3, [sp, #32]
 8006cf2:	4418      	add	r0, r3
 8006cf4:	f010 001f 	ands.w	r0, r0, #31
 8006cf8:	d077      	beq.n	8006dea <_dtoa_r+0x8f2>
 8006cfa:	f1c0 0320 	rsb	r3, r0, #32
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	dd6b      	ble.n	8006dda <_dtoa_r+0x8e2>
 8006d02:	9b08      	ldr	r3, [sp, #32]
 8006d04:	f1c0 001c 	rsb	r0, r0, #28
 8006d08:	4403      	add	r3, r0
 8006d0a:	4480      	add	r8, r0
 8006d0c:	4406      	add	r6, r0
 8006d0e:	9308      	str	r3, [sp, #32]
 8006d10:	f1b8 0f00 	cmp.w	r8, #0
 8006d14:	dd05      	ble.n	8006d22 <_dtoa_r+0x82a>
 8006d16:	4649      	mov	r1, r9
 8006d18:	4642      	mov	r2, r8
 8006d1a:	4658      	mov	r0, fp
 8006d1c:	f000 fcbe 	bl	800769c <__lshift>
 8006d20:	4681      	mov	r9, r0
 8006d22:	9b08      	ldr	r3, [sp, #32]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	dd05      	ble.n	8006d34 <_dtoa_r+0x83c>
 8006d28:	4621      	mov	r1, r4
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	4658      	mov	r0, fp
 8006d2e:	f000 fcb5 	bl	800769c <__lshift>
 8006d32:	4604      	mov	r4, r0
 8006d34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d059      	beq.n	8006dee <_dtoa_r+0x8f6>
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	4648      	mov	r0, r9
 8006d3e:	f000 fd19 	bl	8007774 <__mcmp>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	da53      	bge.n	8006dee <_dtoa_r+0x8f6>
 8006d46:	1e7b      	subs	r3, r7, #1
 8006d48:	9304      	str	r3, [sp, #16]
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	220a      	movs	r2, #10
 8006d50:	4658      	mov	r0, fp
 8006d52:	f000 faf7 	bl	8007344 <__multadd>
 8006d56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d58:	4681      	mov	r9, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8172 	beq.w	8007044 <_dtoa_r+0xb4c>
 8006d60:	2300      	movs	r3, #0
 8006d62:	4629      	mov	r1, r5
 8006d64:	220a      	movs	r2, #10
 8006d66:	4658      	mov	r0, fp
 8006d68:	f000 faec 	bl	8007344 <__multadd>
 8006d6c:	9b00      	ldr	r3, [sp, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	4605      	mov	r5, r0
 8006d72:	dc67      	bgt.n	8006e44 <_dtoa_r+0x94c>
 8006d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	dc41      	bgt.n	8006dfe <_dtoa_r+0x906>
 8006d7a:	e063      	b.n	8006e44 <_dtoa_r+0x94c>
 8006d7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d82:	e746      	b.n	8006c12 <_dtoa_r+0x71a>
 8006d84:	9b07      	ldr	r3, [sp, #28]
 8006d86:	1e5c      	subs	r4, r3, #1
 8006d88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d8a:	42a3      	cmp	r3, r4
 8006d8c:	bfbf      	itttt	lt
 8006d8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006d90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006d92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006d94:	1ae3      	sublt	r3, r4, r3
 8006d96:	bfb4      	ite	lt
 8006d98:	18d2      	addlt	r2, r2, r3
 8006d9a:	1b1c      	subge	r4, r3, r4
 8006d9c:	9b07      	ldr	r3, [sp, #28]
 8006d9e:	bfbc      	itt	lt
 8006da0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006da2:	2400      	movlt	r4, #0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bfb5      	itete	lt
 8006da8:	eba8 0603 	sublt.w	r6, r8, r3
 8006dac:	9b07      	ldrge	r3, [sp, #28]
 8006dae:	2300      	movlt	r3, #0
 8006db0:	4646      	movge	r6, r8
 8006db2:	e730      	b.n	8006c16 <_dtoa_r+0x71e>
 8006db4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006db6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006db8:	4646      	mov	r6, r8
 8006dba:	e735      	b.n	8006c28 <_dtoa_r+0x730>
 8006dbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dbe:	e75c      	b.n	8006c7a <_dtoa_r+0x782>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e788      	b.n	8006cd6 <_dtoa_r+0x7de>
 8006dc4:	3fe00000 	.word	0x3fe00000
 8006dc8:	40240000 	.word	0x40240000
 8006dcc:	40140000 	.word	0x40140000
 8006dd0:	9b02      	ldr	r3, [sp, #8]
 8006dd2:	e780      	b.n	8006cd6 <_dtoa_r+0x7de>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dd8:	e782      	b.n	8006ce0 <_dtoa_r+0x7e8>
 8006dda:	d099      	beq.n	8006d10 <_dtoa_r+0x818>
 8006ddc:	9a08      	ldr	r2, [sp, #32]
 8006dde:	331c      	adds	r3, #28
 8006de0:	441a      	add	r2, r3
 8006de2:	4498      	add	r8, r3
 8006de4:	441e      	add	r6, r3
 8006de6:	9208      	str	r2, [sp, #32]
 8006de8:	e792      	b.n	8006d10 <_dtoa_r+0x818>
 8006dea:	4603      	mov	r3, r0
 8006dec:	e7f6      	b.n	8006ddc <_dtoa_r+0x8e4>
 8006dee:	9b07      	ldr	r3, [sp, #28]
 8006df0:	9704      	str	r7, [sp, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	dc20      	bgt.n	8006e38 <_dtoa_r+0x940>
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	dd1e      	ble.n	8006e3c <_dtoa_r+0x944>
 8006dfe:	9b00      	ldr	r3, [sp, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f47f aec0 	bne.w	8006b86 <_dtoa_r+0x68e>
 8006e06:	4621      	mov	r1, r4
 8006e08:	2205      	movs	r2, #5
 8006e0a:	4658      	mov	r0, fp
 8006e0c:	f000 fa9a 	bl	8007344 <__multadd>
 8006e10:	4601      	mov	r1, r0
 8006e12:	4604      	mov	r4, r0
 8006e14:	4648      	mov	r0, r9
 8006e16:	f000 fcad 	bl	8007774 <__mcmp>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	f77f aeb3 	ble.w	8006b86 <_dtoa_r+0x68e>
 8006e20:	4656      	mov	r6, sl
 8006e22:	2331      	movs	r3, #49	@ 0x31
 8006e24:	f806 3b01 	strb.w	r3, [r6], #1
 8006e28:	9b04      	ldr	r3, [sp, #16]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	9304      	str	r3, [sp, #16]
 8006e2e:	e6ae      	b.n	8006b8e <_dtoa_r+0x696>
 8006e30:	9c07      	ldr	r4, [sp, #28]
 8006e32:	9704      	str	r7, [sp, #16]
 8006e34:	4625      	mov	r5, r4
 8006e36:	e7f3      	b.n	8006e20 <_dtoa_r+0x928>
 8006e38:	9b07      	ldr	r3, [sp, #28]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 8104 	beq.w	800704c <_dtoa_r+0xb54>
 8006e44:	2e00      	cmp	r6, #0
 8006e46:	dd05      	ble.n	8006e54 <_dtoa_r+0x95c>
 8006e48:	4629      	mov	r1, r5
 8006e4a:	4632      	mov	r2, r6
 8006e4c:	4658      	mov	r0, fp
 8006e4e:	f000 fc25 	bl	800769c <__lshift>
 8006e52:	4605      	mov	r5, r0
 8006e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d05a      	beq.n	8006f10 <_dtoa_r+0xa18>
 8006e5a:	6869      	ldr	r1, [r5, #4]
 8006e5c:	4658      	mov	r0, fp
 8006e5e:	f000 fa0f 	bl	8007280 <_Balloc>
 8006e62:	4606      	mov	r6, r0
 8006e64:	b928      	cbnz	r0, 8006e72 <_dtoa_r+0x97a>
 8006e66:	4b84      	ldr	r3, [pc, #528]	@ (8007078 <_dtoa_r+0xb80>)
 8006e68:	4602      	mov	r2, r0
 8006e6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e6e:	f7ff bb5a 	b.w	8006526 <_dtoa_r+0x2e>
 8006e72:	692a      	ldr	r2, [r5, #16]
 8006e74:	3202      	adds	r2, #2
 8006e76:	0092      	lsls	r2, r2, #2
 8006e78:	f105 010c 	add.w	r1, r5, #12
 8006e7c:	300c      	adds	r0, #12
 8006e7e:	f001 f987 	bl	8008190 <memcpy>
 8006e82:	2201      	movs	r2, #1
 8006e84:	4631      	mov	r1, r6
 8006e86:	4658      	mov	r0, fp
 8006e88:	f000 fc08 	bl	800769c <__lshift>
 8006e8c:	f10a 0301 	add.w	r3, sl, #1
 8006e90:	9307      	str	r3, [sp, #28]
 8006e92:	9b00      	ldr	r3, [sp, #0]
 8006e94:	4453      	add	r3, sl
 8006e96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e98:	9b02      	ldr	r3, [sp, #8]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	462f      	mov	r7, r5
 8006ea0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	9b07      	ldr	r3, [sp, #28]
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	4648      	mov	r0, r9
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	f7ff fa9b 	bl	80063e8 <quorem>
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	9002      	str	r0, [sp, #8]
 8006eb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006eba:	4648      	mov	r0, r9
 8006ebc:	f000 fc5a 	bl	8007774 <__mcmp>
 8006ec0:	462a      	mov	r2, r5
 8006ec2:	9008      	str	r0, [sp, #32]
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	4658      	mov	r0, fp
 8006ec8:	f000 fc70 	bl	80077ac <__mdiff>
 8006ecc:	68c2      	ldr	r2, [r0, #12]
 8006ece:	4606      	mov	r6, r0
 8006ed0:	bb02      	cbnz	r2, 8006f14 <_dtoa_r+0xa1c>
 8006ed2:	4601      	mov	r1, r0
 8006ed4:	4648      	mov	r0, r9
 8006ed6:	f000 fc4d 	bl	8007774 <__mcmp>
 8006eda:	4602      	mov	r2, r0
 8006edc:	4631      	mov	r1, r6
 8006ede:	4658      	mov	r0, fp
 8006ee0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ee2:	f000 fa0d 	bl	8007300 <_Bfree>
 8006ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006eea:	9e07      	ldr	r6, [sp, #28]
 8006eec:	ea43 0102 	orr.w	r1, r3, r2
 8006ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ef2:	4319      	orrs	r1, r3
 8006ef4:	d110      	bne.n	8006f18 <_dtoa_r+0xa20>
 8006ef6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006efa:	d029      	beq.n	8006f50 <_dtoa_r+0xa58>
 8006efc:	9b08      	ldr	r3, [sp, #32]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	dd02      	ble.n	8006f08 <_dtoa_r+0xa10>
 8006f02:	9b02      	ldr	r3, [sp, #8]
 8006f04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f08:	9b00      	ldr	r3, [sp, #0]
 8006f0a:	f883 8000 	strb.w	r8, [r3]
 8006f0e:	e63f      	b.n	8006b90 <_dtoa_r+0x698>
 8006f10:	4628      	mov	r0, r5
 8006f12:	e7bb      	b.n	8006e8c <_dtoa_r+0x994>
 8006f14:	2201      	movs	r2, #1
 8006f16:	e7e1      	b.n	8006edc <_dtoa_r+0x9e4>
 8006f18:	9b08      	ldr	r3, [sp, #32]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	db04      	blt.n	8006f28 <_dtoa_r+0xa30>
 8006f1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f20:	430b      	orrs	r3, r1
 8006f22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f24:	430b      	orrs	r3, r1
 8006f26:	d120      	bne.n	8006f6a <_dtoa_r+0xa72>
 8006f28:	2a00      	cmp	r2, #0
 8006f2a:	dded      	ble.n	8006f08 <_dtoa_r+0xa10>
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4658      	mov	r0, fp
 8006f32:	f000 fbb3 	bl	800769c <__lshift>
 8006f36:	4621      	mov	r1, r4
 8006f38:	4681      	mov	r9, r0
 8006f3a:	f000 fc1b 	bl	8007774 <__mcmp>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	dc03      	bgt.n	8006f4a <_dtoa_r+0xa52>
 8006f42:	d1e1      	bne.n	8006f08 <_dtoa_r+0xa10>
 8006f44:	f018 0f01 	tst.w	r8, #1
 8006f48:	d0de      	beq.n	8006f08 <_dtoa_r+0xa10>
 8006f4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f4e:	d1d8      	bne.n	8006f02 <_dtoa_r+0xa0a>
 8006f50:	9a00      	ldr	r2, [sp, #0]
 8006f52:	2339      	movs	r3, #57	@ 0x39
 8006f54:	7013      	strb	r3, [r2, #0]
 8006f56:	4633      	mov	r3, r6
 8006f58:	461e      	mov	r6, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f60:	2a39      	cmp	r2, #57	@ 0x39
 8006f62:	d052      	beq.n	800700a <_dtoa_r+0xb12>
 8006f64:	3201      	adds	r2, #1
 8006f66:	701a      	strb	r2, [r3, #0]
 8006f68:	e612      	b.n	8006b90 <_dtoa_r+0x698>
 8006f6a:	2a00      	cmp	r2, #0
 8006f6c:	dd07      	ble.n	8006f7e <_dtoa_r+0xa86>
 8006f6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f72:	d0ed      	beq.n	8006f50 <_dtoa_r+0xa58>
 8006f74:	9a00      	ldr	r2, [sp, #0]
 8006f76:	f108 0301 	add.w	r3, r8, #1
 8006f7a:	7013      	strb	r3, [r2, #0]
 8006f7c:	e608      	b.n	8006b90 <_dtoa_r+0x698>
 8006f7e:	9b07      	ldr	r3, [sp, #28]
 8006f80:	9a07      	ldr	r2, [sp, #28]
 8006f82:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d028      	beq.n	8006fde <_dtoa_r+0xae6>
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	2300      	movs	r3, #0
 8006f90:	220a      	movs	r2, #10
 8006f92:	4658      	mov	r0, fp
 8006f94:	f000 f9d6 	bl	8007344 <__multadd>
 8006f98:	42af      	cmp	r7, r5
 8006f9a:	4681      	mov	r9, r0
 8006f9c:	f04f 0300 	mov.w	r3, #0
 8006fa0:	f04f 020a 	mov.w	r2, #10
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4658      	mov	r0, fp
 8006fa8:	d107      	bne.n	8006fba <_dtoa_r+0xac2>
 8006faa:	f000 f9cb 	bl	8007344 <__multadd>
 8006fae:	4607      	mov	r7, r0
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	9b07      	ldr	r3, [sp, #28]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	9307      	str	r3, [sp, #28]
 8006fb8:	e774      	b.n	8006ea4 <_dtoa_r+0x9ac>
 8006fba:	f000 f9c3 	bl	8007344 <__multadd>
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	4607      	mov	r7, r0
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	220a      	movs	r2, #10
 8006fc6:	4658      	mov	r0, fp
 8006fc8:	f000 f9bc 	bl	8007344 <__multadd>
 8006fcc:	4605      	mov	r5, r0
 8006fce:	e7f0      	b.n	8006fb2 <_dtoa_r+0xaba>
 8006fd0:	9b00      	ldr	r3, [sp, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bfcc      	ite	gt
 8006fd6:	461e      	movgt	r6, r3
 8006fd8:	2601      	movle	r6, #1
 8006fda:	4456      	add	r6, sl
 8006fdc:	2700      	movs	r7, #0
 8006fde:	4649      	mov	r1, r9
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	4658      	mov	r0, fp
 8006fe4:	f000 fb5a 	bl	800769c <__lshift>
 8006fe8:	4621      	mov	r1, r4
 8006fea:	4681      	mov	r9, r0
 8006fec:	f000 fbc2 	bl	8007774 <__mcmp>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	dcb0      	bgt.n	8006f56 <_dtoa_r+0xa5e>
 8006ff4:	d102      	bne.n	8006ffc <_dtoa_r+0xb04>
 8006ff6:	f018 0f01 	tst.w	r8, #1
 8006ffa:	d1ac      	bne.n	8006f56 <_dtoa_r+0xa5e>
 8006ffc:	4633      	mov	r3, r6
 8006ffe:	461e      	mov	r6, r3
 8007000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007004:	2a30      	cmp	r2, #48	@ 0x30
 8007006:	d0fa      	beq.n	8006ffe <_dtoa_r+0xb06>
 8007008:	e5c2      	b.n	8006b90 <_dtoa_r+0x698>
 800700a:	459a      	cmp	sl, r3
 800700c:	d1a4      	bne.n	8006f58 <_dtoa_r+0xa60>
 800700e:	9b04      	ldr	r3, [sp, #16]
 8007010:	3301      	adds	r3, #1
 8007012:	9304      	str	r3, [sp, #16]
 8007014:	2331      	movs	r3, #49	@ 0x31
 8007016:	f88a 3000 	strb.w	r3, [sl]
 800701a:	e5b9      	b.n	8006b90 <_dtoa_r+0x698>
 800701c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800701e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800707c <_dtoa_r+0xb84>
 8007022:	b11b      	cbz	r3, 800702c <_dtoa_r+0xb34>
 8007024:	f10a 0308 	add.w	r3, sl, #8
 8007028:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	4650      	mov	r0, sl
 800702e:	b019      	add	sp, #100	@ 0x64
 8007030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007036:	2b01      	cmp	r3, #1
 8007038:	f77f ae37 	ble.w	8006caa <_dtoa_r+0x7b2>
 800703c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800703e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007040:	2001      	movs	r0, #1
 8007042:	e655      	b.n	8006cf0 <_dtoa_r+0x7f8>
 8007044:	9b00      	ldr	r3, [sp, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f77f aed6 	ble.w	8006df8 <_dtoa_r+0x900>
 800704c:	4656      	mov	r6, sl
 800704e:	4621      	mov	r1, r4
 8007050:	4648      	mov	r0, r9
 8007052:	f7ff f9c9 	bl	80063e8 <quorem>
 8007056:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800705a:	f806 8b01 	strb.w	r8, [r6], #1
 800705e:	9b00      	ldr	r3, [sp, #0]
 8007060:	eba6 020a 	sub.w	r2, r6, sl
 8007064:	4293      	cmp	r3, r2
 8007066:	ddb3      	ble.n	8006fd0 <_dtoa_r+0xad8>
 8007068:	4649      	mov	r1, r9
 800706a:	2300      	movs	r3, #0
 800706c:	220a      	movs	r2, #10
 800706e:	4658      	mov	r0, fp
 8007070:	f000 f968 	bl	8007344 <__multadd>
 8007074:	4681      	mov	r9, r0
 8007076:	e7ea      	b.n	800704e <_dtoa_r+0xb56>
 8007078:	0800851a 	.word	0x0800851a
 800707c:	080084b5 	.word	0x080084b5

08007080 <_free_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4605      	mov	r5, r0
 8007084:	2900      	cmp	r1, #0
 8007086:	d041      	beq.n	800710c <_free_r+0x8c>
 8007088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800708c:	1f0c      	subs	r4, r1, #4
 800708e:	2b00      	cmp	r3, #0
 8007090:	bfb8      	it	lt
 8007092:	18e4      	addlt	r4, r4, r3
 8007094:	f000 f8e8 	bl	8007268 <__malloc_lock>
 8007098:	4a1d      	ldr	r2, [pc, #116]	@ (8007110 <_free_r+0x90>)
 800709a:	6813      	ldr	r3, [r2, #0]
 800709c:	b933      	cbnz	r3, 80070ac <_free_r+0x2c>
 800709e:	6063      	str	r3, [r4, #4]
 80070a0:	6014      	str	r4, [r2, #0]
 80070a2:	4628      	mov	r0, r5
 80070a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070a8:	f000 b8e4 	b.w	8007274 <__malloc_unlock>
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	d908      	bls.n	80070c2 <_free_r+0x42>
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	1821      	adds	r1, r4, r0
 80070b4:	428b      	cmp	r3, r1
 80070b6:	bf01      	itttt	eq
 80070b8:	6819      	ldreq	r1, [r3, #0]
 80070ba:	685b      	ldreq	r3, [r3, #4]
 80070bc:	1809      	addeq	r1, r1, r0
 80070be:	6021      	streq	r1, [r4, #0]
 80070c0:	e7ed      	b.n	800709e <_free_r+0x1e>
 80070c2:	461a      	mov	r2, r3
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	b10b      	cbz	r3, 80070cc <_free_r+0x4c>
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	d9fa      	bls.n	80070c2 <_free_r+0x42>
 80070cc:	6811      	ldr	r1, [r2, #0]
 80070ce:	1850      	adds	r0, r2, r1
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d10b      	bne.n	80070ec <_free_r+0x6c>
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	4401      	add	r1, r0
 80070d8:	1850      	adds	r0, r2, r1
 80070da:	4283      	cmp	r3, r0
 80070dc:	6011      	str	r1, [r2, #0]
 80070de:	d1e0      	bne.n	80070a2 <_free_r+0x22>
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	6053      	str	r3, [r2, #4]
 80070e6:	4408      	add	r0, r1
 80070e8:	6010      	str	r0, [r2, #0]
 80070ea:	e7da      	b.n	80070a2 <_free_r+0x22>
 80070ec:	d902      	bls.n	80070f4 <_free_r+0x74>
 80070ee:	230c      	movs	r3, #12
 80070f0:	602b      	str	r3, [r5, #0]
 80070f2:	e7d6      	b.n	80070a2 <_free_r+0x22>
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	1821      	adds	r1, r4, r0
 80070f8:	428b      	cmp	r3, r1
 80070fa:	bf04      	itt	eq
 80070fc:	6819      	ldreq	r1, [r3, #0]
 80070fe:	685b      	ldreq	r3, [r3, #4]
 8007100:	6063      	str	r3, [r4, #4]
 8007102:	bf04      	itt	eq
 8007104:	1809      	addeq	r1, r1, r0
 8007106:	6021      	streq	r1, [r4, #0]
 8007108:	6054      	str	r4, [r2, #4]
 800710a:	e7ca      	b.n	80070a2 <_free_r+0x22>
 800710c:	bd38      	pop	{r3, r4, r5, pc}
 800710e:	bf00      	nop
 8007110:	20000584 	.word	0x20000584

08007114 <malloc>:
 8007114:	4b02      	ldr	r3, [pc, #8]	@ (8007120 <malloc+0xc>)
 8007116:	4601      	mov	r1, r0
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	f000 b825 	b.w	8007168 <_malloc_r>
 800711e:	bf00      	nop
 8007120:	20000018 	.word	0x20000018

08007124 <sbrk_aligned>:
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	4e0f      	ldr	r6, [pc, #60]	@ (8007164 <sbrk_aligned+0x40>)
 8007128:	460c      	mov	r4, r1
 800712a:	6831      	ldr	r1, [r6, #0]
 800712c:	4605      	mov	r5, r0
 800712e:	b911      	cbnz	r1, 8007136 <sbrk_aligned+0x12>
 8007130:	f001 f81e 	bl	8008170 <_sbrk_r>
 8007134:	6030      	str	r0, [r6, #0]
 8007136:	4621      	mov	r1, r4
 8007138:	4628      	mov	r0, r5
 800713a:	f001 f819 	bl	8008170 <_sbrk_r>
 800713e:	1c43      	adds	r3, r0, #1
 8007140:	d103      	bne.n	800714a <sbrk_aligned+0x26>
 8007142:	f04f 34ff 	mov.w	r4, #4294967295
 8007146:	4620      	mov	r0, r4
 8007148:	bd70      	pop	{r4, r5, r6, pc}
 800714a:	1cc4      	adds	r4, r0, #3
 800714c:	f024 0403 	bic.w	r4, r4, #3
 8007150:	42a0      	cmp	r0, r4
 8007152:	d0f8      	beq.n	8007146 <sbrk_aligned+0x22>
 8007154:	1a21      	subs	r1, r4, r0
 8007156:	4628      	mov	r0, r5
 8007158:	f001 f80a 	bl	8008170 <_sbrk_r>
 800715c:	3001      	adds	r0, #1
 800715e:	d1f2      	bne.n	8007146 <sbrk_aligned+0x22>
 8007160:	e7ef      	b.n	8007142 <sbrk_aligned+0x1e>
 8007162:	bf00      	nop
 8007164:	20000580 	.word	0x20000580

08007168 <_malloc_r>:
 8007168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800716c:	1ccd      	adds	r5, r1, #3
 800716e:	f025 0503 	bic.w	r5, r5, #3
 8007172:	3508      	adds	r5, #8
 8007174:	2d0c      	cmp	r5, #12
 8007176:	bf38      	it	cc
 8007178:	250c      	movcc	r5, #12
 800717a:	2d00      	cmp	r5, #0
 800717c:	4606      	mov	r6, r0
 800717e:	db01      	blt.n	8007184 <_malloc_r+0x1c>
 8007180:	42a9      	cmp	r1, r5
 8007182:	d904      	bls.n	800718e <_malloc_r+0x26>
 8007184:	230c      	movs	r3, #12
 8007186:	6033      	str	r3, [r6, #0]
 8007188:	2000      	movs	r0, #0
 800718a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007264 <_malloc_r+0xfc>
 8007192:	f000 f869 	bl	8007268 <__malloc_lock>
 8007196:	f8d8 3000 	ldr.w	r3, [r8]
 800719a:	461c      	mov	r4, r3
 800719c:	bb44      	cbnz	r4, 80071f0 <_malloc_r+0x88>
 800719e:	4629      	mov	r1, r5
 80071a0:	4630      	mov	r0, r6
 80071a2:	f7ff ffbf 	bl	8007124 <sbrk_aligned>
 80071a6:	1c43      	adds	r3, r0, #1
 80071a8:	4604      	mov	r4, r0
 80071aa:	d158      	bne.n	800725e <_malloc_r+0xf6>
 80071ac:	f8d8 4000 	ldr.w	r4, [r8]
 80071b0:	4627      	mov	r7, r4
 80071b2:	2f00      	cmp	r7, #0
 80071b4:	d143      	bne.n	800723e <_malloc_r+0xd6>
 80071b6:	2c00      	cmp	r4, #0
 80071b8:	d04b      	beq.n	8007252 <_malloc_r+0xea>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	4639      	mov	r1, r7
 80071be:	4630      	mov	r0, r6
 80071c0:	eb04 0903 	add.w	r9, r4, r3
 80071c4:	f000 ffd4 	bl	8008170 <_sbrk_r>
 80071c8:	4581      	cmp	r9, r0
 80071ca:	d142      	bne.n	8007252 <_malloc_r+0xea>
 80071cc:	6821      	ldr	r1, [r4, #0]
 80071ce:	1a6d      	subs	r5, r5, r1
 80071d0:	4629      	mov	r1, r5
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7ff ffa6 	bl	8007124 <sbrk_aligned>
 80071d8:	3001      	adds	r0, #1
 80071da:	d03a      	beq.n	8007252 <_malloc_r+0xea>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	442b      	add	r3, r5
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	f8d8 3000 	ldr.w	r3, [r8]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	bb62      	cbnz	r2, 8007244 <_malloc_r+0xdc>
 80071ea:	f8c8 7000 	str.w	r7, [r8]
 80071ee:	e00f      	b.n	8007210 <_malloc_r+0xa8>
 80071f0:	6822      	ldr	r2, [r4, #0]
 80071f2:	1b52      	subs	r2, r2, r5
 80071f4:	d420      	bmi.n	8007238 <_malloc_r+0xd0>
 80071f6:	2a0b      	cmp	r2, #11
 80071f8:	d917      	bls.n	800722a <_malloc_r+0xc2>
 80071fa:	1961      	adds	r1, r4, r5
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	6025      	str	r5, [r4, #0]
 8007200:	bf18      	it	ne
 8007202:	6059      	strne	r1, [r3, #4]
 8007204:	6863      	ldr	r3, [r4, #4]
 8007206:	bf08      	it	eq
 8007208:	f8c8 1000 	streq.w	r1, [r8]
 800720c:	5162      	str	r2, [r4, r5]
 800720e:	604b      	str	r3, [r1, #4]
 8007210:	4630      	mov	r0, r6
 8007212:	f000 f82f 	bl	8007274 <__malloc_unlock>
 8007216:	f104 000b 	add.w	r0, r4, #11
 800721a:	1d23      	adds	r3, r4, #4
 800721c:	f020 0007 	bic.w	r0, r0, #7
 8007220:	1ac2      	subs	r2, r0, r3
 8007222:	bf1c      	itt	ne
 8007224:	1a1b      	subne	r3, r3, r0
 8007226:	50a3      	strne	r3, [r4, r2]
 8007228:	e7af      	b.n	800718a <_malloc_r+0x22>
 800722a:	6862      	ldr	r2, [r4, #4]
 800722c:	42a3      	cmp	r3, r4
 800722e:	bf0c      	ite	eq
 8007230:	f8c8 2000 	streq.w	r2, [r8]
 8007234:	605a      	strne	r2, [r3, #4]
 8007236:	e7eb      	b.n	8007210 <_malloc_r+0xa8>
 8007238:	4623      	mov	r3, r4
 800723a:	6864      	ldr	r4, [r4, #4]
 800723c:	e7ae      	b.n	800719c <_malloc_r+0x34>
 800723e:	463c      	mov	r4, r7
 8007240:	687f      	ldr	r7, [r7, #4]
 8007242:	e7b6      	b.n	80071b2 <_malloc_r+0x4a>
 8007244:	461a      	mov	r2, r3
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	42a3      	cmp	r3, r4
 800724a:	d1fb      	bne.n	8007244 <_malloc_r+0xdc>
 800724c:	2300      	movs	r3, #0
 800724e:	6053      	str	r3, [r2, #4]
 8007250:	e7de      	b.n	8007210 <_malloc_r+0xa8>
 8007252:	230c      	movs	r3, #12
 8007254:	6033      	str	r3, [r6, #0]
 8007256:	4630      	mov	r0, r6
 8007258:	f000 f80c 	bl	8007274 <__malloc_unlock>
 800725c:	e794      	b.n	8007188 <_malloc_r+0x20>
 800725e:	6005      	str	r5, [r0, #0]
 8007260:	e7d6      	b.n	8007210 <_malloc_r+0xa8>
 8007262:	bf00      	nop
 8007264:	20000584 	.word	0x20000584

08007268 <__malloc_lock>:
 8007268:	4801      	ldr	r0, [pc, #4]	@ (8007270 <__malloc_lock+0x8>)
 800726a:	f7ff b894 	b.w	8006396 <__retarget_lock_acquire_recursive>
 800726e:	bf00      	nop
 8007270:	2000057c 	.word	0x2000057c

08007274 <__malloc_unlock>:
 8007274:	4801      	ldr	r0, [pc, #4]	@ (800727c <__malloc_unlock+0x8>)
 8007276:	f7ff b88f 	b.w	8006398 <__retarget_lock_release_recursive>
 800727a:	bf00      	nop
 800727c:	2000057c 	.word	0x2000057c

08007280 <_Balloc>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	69c6      	ldr	r6, [r0, #28]
 8007284:	4604      	mov	r4, r0
 8007286:	460d      	mov	r5, r1
 8007288:	b976      	cbnz	r6, 80072a8 <_Balloc+0x28>
 800728a:	2010      	movs	r0, #16
 800728c:	f7ff ff42 	bl	8007114 <malloc>
 8007290:	4602      	mov	r2, r0
 8007292:	61e0      	str	r0, [r4, #28]
 8007294:	b920      	cbnz	r0, 80072a0 <_Balloc+0x20>
 8007296:	4b18      	ldr	r3, [pc, #96]	@ (80072f8 <_Balloc+0x78>)
 8007298:	4818      	ldr	r0, [pc, #96]	@ (80072fc <_Balloc+0x7c>)
 800729a:	216b      	movs	r1, #107	@ 0x6b
 800729c:	f7ff f886 	bl	80063ac <__assert_func>
 80072a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072a4:	6006      	str	r6, [r0, #0]
 80072a6:	60c6      	str	r6, [r0, #12]
 80072a8:	69e6      	ldr	r6, [r4, #28]
 80072aa:	68f3      	ldr	r3, [r6, #12]
 80072ac:	b183      	cbz	r3, 80072d0 <_Balloc+0x50>
 80072ae:	69e3      	ldr	r3, [r4, #28]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072b6:	b9b8      	cbnz	r0, 80072e8 <_Balloc+0x68>
 80072b8:	2101      	movs	r1, #1
 80072ba:	fa01 f605 	lsl.w	r6, r1, r5
 80072be:	1d72      	adds	r2, r6, #5
 80072c0:	0092      	lsls	r2, r2, #2
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 ff79 	bl	80081ba <_calloc_r>
 80072c8:	b160      	cbz	r0, 80072e4 <_Balloc+0x64>
 80072ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072ce:	e00e      	b.n	80072ee <_Balloc+0x6e>
 80072d0:	2221      	movs	r2, #33	@ 0x21
 80072d2:	2104      	movs	r1, #4
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 ff70 	bl	80081ba <_calloc_r>
 80072da:	69e3      	ldr	r3, [r4, #28]
 80072dc:	60f0      	str	r0, [r6, #12]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e4      	bne.n	80072ae <_Balloc+0x2e>
 80072e4:	2000      	movs	r0, #0
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	6802      	ldr	r2, [r0, #0]
 80072ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ee:	2300      	movs	r3, #0
 80072f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072f4:	e7f7      	b.n	80072e6 <_Balloc+0x66>
 80072f6:	bf00      	nop
 80072f8:	08008408 	.word	0x08008408
 80072fc:	0800852b 	.word	0x0800852b

08007300 <_Bfree>:
 8007300:	b570      	push	{r4, r5, r6, lr}
 8007302:	69c6      	ldr	r6, [r0, #28]
 8007304:	4605      	mov	r5, r0
 8007306:	460c      	mov	r4, r1
 8007308:	b976      	cbnz	r6, 8007328 <_Bfree+0x28>
 800730a:	2010      	movs	r0, #16
 800730c:	f7ff ff02 	bl	8007114 <malloc>
 8007310:	4602      	mov	r2, r0
 8007312:	61e8      	str	r0, [r5, #28]
 8007314:	b920      	cbnz	r0, 8007320 <_Bfree+0x20>
 8007316:	4b09      	ldr	r3, [pc, #36]	@ (800733c <_Bfree+0x3c>)
 8007318:	4809      	ldr	r0, [pc, #36]	@ (8007340 <_Bfree+0x40>)
 800731a:	218f      	movs	r1, #143	@ 0x8f
 800731c:	f7ff f846 	bl	80063ac <__assert_func>
 8007320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007324:	6006      	str	r6, [r0, #0]
 8007326:	60c6      	str	r6, [r0, #12]
 8007328:	b13c      	cbz	r4, 800733a <_Bfree+0x3a>
 800732a:	69eb      	ldr	r3, [r5, #28]
 800732c:	6862      	ldr	r2, [r4, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007334:	6021      	str	r1, [r4, #0]
 8007336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	08008408 	.word	0x08008408
 8007340:	0800852b 	.word	0x0800852b

08007344 <__multadd>:
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	690d      	ldr	r5, [r1, #16]
 800734a:	4607      	mov	r7, r0
 800734c:	460c      	mov	r4, r1
 800734e:	461e      	mov	r6, r3
 8007350:	f101 0c14 	add.w	ip, r1, #20
 8007354:	2000      	movs	r0, #0
 8007356:	f8dc 3000 	ldr.w	r3, [ip]
 800735a:	b299      	uxth	r1, r3
 800735c:	fb02 6101 	mla	r1, r2, r1, r6
 8007360:	0c1e      	lsrs	r6, r3, #16
 8007362:	0c0b      	lsrs	r3, r1, #16
 8007364:	fb02 3306 	mla	r3, r2, r6, r3
 8007368:	b289      	uxth	r1, r1
 800736a:	3001      	adds	r0, #1
 800736c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007370:	4285      	cmp	r5, r0
 8007372:	f84c 1b04 	str.w	r1, [ip], #4
 8007376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800737a:	dcec      	bgt.n	8007356 <__multadd+0x12>
 800737c:	b30e      	cbz	r6, 80073c2 <__multadd+0x7e>
 800737e:	68a3      	ldr	r3, [r4, #8]
 8007380:	42ab      	cmp	r3, r5
 8007382:	dc19      	bgt.n	80073b8 <__multadd+0x74>
 8007384:	6861      	ldr	r1, [r4, #4]
 8007386:	4638      	mov	r0, r7
 8007388:	3101      	adds	r1, #1
 800738a:	f7ff ff79 	bl	8007280 <_Balloc>
 800738e:	4680      	mov	r8, r0
 8007390:	b928      	cbnz	r0, 800739e <__multadd+0x5a>
 8007392:	4602      	mov	r2, r0
 8007394:	4b0c      	ldr	r3, [pc, #48]	@ (80073c8 <__multadd+0x84>)
 8007396:	480d      	ldr	r0, [pc, #52]	@ (80073cc <__multadd+0x88>)
 8007398:	21ba      	movs	r1, #186	@ 0xba
 800739a:	f7ff f807 	bl	80063ac <__assert_func>
 800739e:	6922      	ldr	r2, [r4, #16]
 80073a0:	3202      	adds	r2, #2
 80073a2:	f104 010c 	add.w	r1, r4, #12
 80073a6:	0092      	lsls	r2, r2, #2
 80073a8:	300c      	adds	r0, #12
 80073aa:	f000 fef1 	bl	8008190 <memcpy>
 80073ae:	4621      	mov	r1, r4
 80073b0:	4638      	mov	r0, r7
 80073b2:	f7ff ffa5 	bl	8007300 <_Bfree>
 80073b6:	4644      	mov	r4, r8
 80073b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073bc:	3501      	adds	r5, #1
 80073be:	615e      	str	r6, [r3, #20]
 80073c0:	6125      	str	r5, [r4, #16]
 80073c2:	4620      	mov	r0, r4
 80073c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c8:	0800851a 	.word	0x0800851a
 80073cc:	0800852b 	.word	0x0800852b

080073d0 <__hi0bits>:
 80073d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80073d4:	4603      	mov	r3, r0
 80073d6:	bf36      	itet	cc
 80073d8:	0403      	lslcc	r3, r0, #16
 80073da:	2000      	movcs	r0, #0
 80073dc:	2010      	movcc	r0, #16
 80073de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073e2:	bf3c      	itt	cc
 80073e4:	021b      	lslcc	r3, r3, #8
 80073e6:	3008      	addcc	r0, #8
 80073e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ec:	bf3c      	itt	cc
 80073ee:	011b      	lslcc	r3, r3, #4
 80073f0:	3004      	addcc	r0, #4
 80073f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f6:	bf3c      	itt	cc
 80073f8:	009b      	lslcc	r3, r3, #2
 80073fa:	3002      	addcc	r0, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	db05      	blt.n	800740c <__hi0bits+0x3c>
 8007400:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007404:	f100 0001 	add.w	r0, r0, #1
 8007408:	bf08      	it	eq
 800740a:	2020      	moveq	r0, #32
 800740c:	4770      	bx	lr

0800740e <__lo0bits>:
 800740e:	6803      	ldr	r3, [r0, #0]
 8007410:	4602      	mov	r2, r0
 8007412:	f013 0007 	ands.w	r0, r3, #7
 8007416:	d00b      	beq.n	8007430 <__lo0bits+0x22>
 8007418:	07d9      	lsls	r1, r3, #31
 800741a:	d421      	bmi.n	8007460 <__lo0bits+0x52>
 800741c:	0798      	lsls	r0, r3, #30
 800741e:	bf49      	itett	mi
 8007420:	085b      	lsrmi	r3, r3, #1
 8007422:	089b      	lsrpl	r3, r3, #2
 8007424:	2001      	movmi	r0, #1
 8007426:	6013      	strmi	r3, [r2, #0]
 8007428:	bf5c      	itt	pl
 800742a:	6013      	strpl	r3, [r2, #0]
 800742c:	2002      	movpl	r0, #2
 800742e:	4770      	bx	lr
 8007430:	b299      	uxth	r1, r3
 8007432:	b909      	cbnz	r1, 8007438 <__lo0bits+0x2a>
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	2010      	movs	r0, #16
 8007438:	b2d9      	uxtb	r1, r3
 800743a:	b909      	cbnz	r1, 8007440 <__lo0bits+0x32>
 800743c:	3008      	adds	r0, #8
 800743e:	0a1b      	lsrs	r3, r3, #8
 8007440:	0719      	lsls	r1, r3, #28
 8007442:	bf04      	itt	eq
 8007444:	091b      	lsreq	r3, r3, #4
 8007446:	3004      	addeq	r0, #4
 8007448:	0799      	lsls	r1, r3, #30
 800744a:	bf04      	itt	eq
 800744c:	089b      	lsreq	r3, r3, #2
 800744e:	3002      	addeq	r0, #2
 8007450:	07d9      	lsls	r1, r3, #31
 8007452:	d403      	bmi.n	800745c <__lo0bits+0x4e>
 8007454:	085b      	lsrs	r3, r3, #1
 8007456:	f100 0001 	add.w	r0, r0, #1
 800745a:	d003      	beq.n	8007464 <__lo0bits+0x56>
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	4770      	bx	lr
 8007460:	2000      	movs	r0, #0
 8007462:	4770      	bx	lr
 8007464:	2020      	movs	r0, #32
 8007466:	4770      	bx	lr

08007468 <__i2b>:
 8007468:	b510      	push	{r4, lr}
 800746a:	460c      	mov	r4, r1
 800746c:	2101      	movs	r1, #1
 800746e:	f7ff ff07 	bl	8007280 <_Balloc>
 8007472:	4602      	mov	r2, r0
 8007474:	b928      	cbnz	r0, 8007482 <__i2b+0x1a>
 8007476:	4b05      	ldr	r3, [pc, #20]	@ (800748c <__i2b+0x24>)
 8007478:	4805      	ldr	r0, [pc, #20]	@ (8007490 <__i2b+0x28>)
 800747a:	f240 1145 	movw	r1, #325	@ 0x145
 800747e:	f7fe ff95 	bl	80063ac <__assert_func>
 8007482:	2301      	movs	r3, #1
 8007484:	6144      	str	r4, [r0, #20]
 8007486:	6103      	str	r3, [r0, #16]
 8007488:	bd10      	pop	{r4, pc}
 800748a:	bf00      	nop
 800748c:	0800851a 	.word	0x0800851a
 8007490:	0800852b 	.word	0x0800852b

08007494 <__multiply>:
 8007494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007498:	4614      	mov	r4, r2
 800749a:	690a      	ldr	r2, [r1, #16]
 800749c:	6923      	ldr	r3, [r4, #16]
 800749e:	429a      	cmp	r2, r3
 80074a0:	bfa8      	it	ge
 80074a2:	4623      	movge	r3, r4
 80074a4:	460f      	mov	r7, r1
 80074a6:	bfa4      	itt	ge
 80074a8:	460c      	movge	r4, r1
 80074aa:	461f      	movge	r7, r3
 80074ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80074b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80074b4:	68a3      	ldr	r3, [r4, #8]
 80074b6:	6861      	ldr	r1, [r4, #4]
 80074b8:	eb0a 0609 	add.w	r6, sl, r9
 80074bc:	42b3      	cmp	r3, r6
 80074be:	b085      	sub	sp, #20
 80074c0:	bfb8      	it	lt
 80074c2:	3101      	addlt	r1, #1
 80074c4:	f7ff fedc 	bl	8007280 <_Balloc>
 80074c8:	b930      	cbnz	r0, 80074d8 <__multiply+0x44>
 80074ca:	4602      	mov	r2, r0
 80074cc:	4b44      	ldr	r3, [pc, #272]	@ (80075e0 <__multiply+0x14c>)
 80074ce:	4845      	ldr	r0, [pc, #276]	@ (80075e4 <__multiply+0x150>)
 80074d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80074d4:	f7fe ff6a 	bl	80063ac <__assert_func>
 80074d8:	f100 0514 	add.w	r5, r0, #20
 80074dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074e0:	462b      	mov	r3, r5
 80074e2:	2200      	movs	r2, #0
 80074e4:	4543      	cmp	r3, r8
 80074e6:	d321      	bcc.n	800752c <__multiply+0x98>
 80074e8:	f107 0114 	add.w	r1, r7, #20
 80074ec:	f104 0214 	add.w	r2, r4, #20
 80074f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80074f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80074f8:	9302      	str	r3, [sp, #8]
 80074fa:	1b13      	subs	r3, r2, r4
 80074fc:	3b15      	subs	r3, #21
 80074fe:	f023 0303 	bic.w	r3, r3, #3
 8007502:	3304      	adds	r3, #4
 8007504:	f104 0715 	add.w	r7, r4, #21
 8007508:	42ba      	cmp	r2, r7
 800750a:	bf38      	it	cc
 800750c:	2304      	movcc	r3, #4
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	9b02      	ldr	r3, [sp, #8]
 8007512:	9103      	str	r1, [sp, #12]
 8007514:	428b      	cmp	r3, r1
 8007516:	d80c      	bhi.n	8007532 <__multiply+0x9e>
 8007518:	2e00      	cmp	r6, #0
 800751a:	dd03      	ble.n	8007524 <__multiply+0x90>
 800751c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007520:	2b00      	cmp	r3, #0
 8007522:	d05b      	beq.n	80075dc <__multiply+0x148>
 8007524:	6106      	str	r6, [r0, #16]
 8007526:	b005      	add	sp, #20
 8007528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752c:	f843 2b04 	str.w	r2, [r3], #4
 8007530:	e7d8      	b.n	80074e4 <__multiply+0x50>
 8007532:	f8b1 a000 	ldrh.w	sl, [r1]
 8007536:	f1ba 0f00 	cmp.w	sl, #0
 800753a:	d024      	beq.n	8007586 <__multiply+0xf2>
 800753c:	f104 0e14 	add.w	lr, r4, #20
 8007540:	46a9      	mov	r9, r5
 8007542:	f04f 0c00 	mov.w	ip, #0
 8007546:	f85e 7b04 	ldr.w	r7, [lr], #4
 800754a:	f8d9 3000 	ldr.w	r3, [r9]
 800754e:	fa1f fb87 	uxth.w	fp, r7
 8007552:	b29b      	uxth	r3, r3
 8007554:	fb0a 330b 	mla	r3, sl, fp, r3
 8007558:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800755c:	f8d9 7000 	ldr.w	r7, [r9]
 8007560:	4463      	add	r3, ip
 8007562:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007566:	fb0a c70b 	mla	r7, sl, fp, ip
 800756a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800756e:	b29b      	uxth	r3, r3
 8007570:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007574:	4572      	cmp	r2, lr
 8007576:	f849 3b04 	str.w	r3, [r9], #4
 800757a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800757e:	d8e2      	bhi.n	8007546 <__multiply+0xb2>
 8007580:	9b01      	ldr	r3, [sp, #4]
 8007582:	f845 c003 	str.w	ip, [r5, r3]
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800758c:	3104      	adds	r1, #4
 800758e:	f1b9 0f00 	cmp.w	r9, #0
 8007592:	d021      	beq.n	80075d8 <__multiply+0x144>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	f104 0c14 	add.w	ip, r4, #20
 800759a:	46ae      	mov	lr, r5
 800759c:	f04f 0a00 	mov.w	sl, #0
 80075a0:	f8bc b000 	ldrh.w	fp, [ip]
 80075a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80075a8:	fb09 770b 	mla	r7, r9, fp, r7
 80075ac:	4457      	add	r7, sl
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80075b4:	f84e 3b04 	str.w	r3, [lr], #4
 80075b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075c0:	f8be 3000 	ldrh.w	r3, [lr]
 80075c4:	fb09 330a 	mla	r3, r9, sl, r3
 80075c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80075cc:	4562      	cmp	r2, ip
 80075ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075d2:	d8e5      	bhi.n	80075a0 <__multiply+0x10c>
 80075d4:	9f01      	ldr	r7, [sp, #4]
 80075d6:	51eb      	str	r3, [r5, r7]
 80075d8:	3504      	adds	r5, #4
 80075da:	e799      	b.n	8007510 <__multiply+0x7c>
 80075dc:	3e01      	subs	r6, #1
 80075de:	e79b      	b.n	8007518 <__multiply+0x84>
 80075e0:	0800851a 	.word	0x0800851a
 80075e4:	0800852b 	.word	0x0800852b

080075e8 <__pow5mult>:
 80075e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ec:	4615      	mov	r5, r2
 80075ee:	f012 0203 	ands.w	r2, r2, #3
 80075f2:	4607      	mov	r7, r0
 80075f4:	460e      	mov	r6, r1
 80075f6:	d007      	beq.n	8007608 <__pow5mult+0x20>
 80075f8:	4c25      	ldr	r4, [pc, #148]	@ (8007690 <__pow5mult+0xa8>)
 80075fa:	3a01      	subs	r2, #1
 80075fc:	2300      	movs	r3, #0
 80075fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007602:	f7ff fe9f 	bl	8007344 <__multadd>
 8007606:	4606      	mov	r6, r0
 8007608:	10ad      	asrs	r5, r5, #2
 800760a:	d03d      	beq.n	8007688 <__pow5mult+0xa0>
 800760c:	69fc      	ldr	r4, [r7, #28]
 800760e:	b97c      	cbnz	r4, 8007630 <__pow5mult+0x48>
 8007610:	2010      	movs	r0, #16
 8007612:	f7ff fd7f 	bl	8007114 <malloc>
 8007616:	4602      	mov	r2, r0
 8007618:	61f8      	str	r0, [r7, #28]
 800761a:	b928      	cbnz	r0, 8007628 <__pow5mult+0x40>
 800761c:	4b1d      	ldr	r3, [pc, #116]	@ (8007694 <__pow5mult+0xac>)
 800761e:	481e      	ldr	r0, [pc, #120]	@ (8007698 <__pow5mult+0xb0>)
 8007620:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007624:	f7fe fec2 	bl	80063ac <__assert_func>
 8007628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800762c:	6004      	str	r4, [r0, #0]
 800762e:	60c4      	str	r4, [r0, #12]
 8007630:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007638:	b94c      	cbnz	r4, 800764e <__pow5mult+0x66>
 800763a:	f240 2171 	movw	r1, #625	@ 0x271
 800763e:	4638      	mov	r0, r7
 8007640:	f7ff ff12 	bl	8007468 <__i2b>
 8007644:	2300      	movs	r3, #0
 8007646:	f8c8 0008 	str.w	r0, [r8, #8]
 800764a:	4604      	mov	r4, r0
 800764c:	6003      	str	r3, [r0, #0]
 800764e:	f04f 0900 	mov.w	r9, #0
 8007652:	07eb      	lsls	r3, r5, #31
 8007654:	d50a      	bpl.n	800766c <__pow5mult+0x84>
 8007656:	4631      	mov	r1, r6
 8007658:	4622      	mov	r2, r4
 800765a:	4638      	mov	r0, r7
 800765c:	f7ff ff1a 	bl	8007494 <__multiply>
 8007660:	4631      	mov	r1, r6
 8007662:	4680      	mov	r8, r0
 8007664:	4638      	mov	r0, r7
 8007666:	f7ff fe4b 	bl	8007300 <_Bfree>
 800766a:	4646      	mov	r6, r8
 800766c:	106d      	asrs	r5, r5, #1
 800766e:	d00b      	beq.n	8007688 <__pow5mult+0xa0>
 8007670:	6820      	ldr	r0, [r4, #0]
 8007672:	b938      	cbnz	r0, 8007684 <__pow5mult+0x9c>
 8007674:	4622      	mov	r2, r4
 8007676:	4621      	mov	r1, r4
 8007678:	4638      	mov	r0, r7
 800767a:	f7ff ff0b 	bl	8007494 <__multiply>
 800767e:	6020      	str	r0, [r4, #0]
 8007680:	f8c0 9000 	str.w	r9, [r0]
 8007684:	4604      	mov	r4, r0
 8007686:	e7e4      	b.n	8007652 <__pow5mult+0x6a>
 8007688:	4630      	mov	r0, r6
 800768a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800768e:	bf00      	nop
 8007690:	08008584 	.word	0x08008584
 8007694:	08008408 	.word	0x08008408
 8007698:	0800852b 	.word	0x0800852b

0800769c <__lshift>:
 800769c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a0:	460c      	mov	r4, r1
 80076a2:	6849      	ldr	r1, [r1, #4]
 80076a4:	6923      	ldr	r3, [r4, #16]
 80076a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076aa:	68a3      	ldr	r3, [r4, #8]
 80076ac:	4607      	mov	r7, r0
 80076ae:	4691      	mov	r9, r2
 80076b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076b4:	f108 0601 	add.w	r6, r8, #1
 80076b8:	42b3      	cmp	r3, r6
 80076ba:	db0b      	blt.n	80076d4 <__lshift+0x38>
 80076bc:	4638      	mov	r0, r7
 80076be:	f7ff fddf 	bl	8007280 <_Balloc>
 80076c2:	4605      	mov	r5, r0
 80076c4:	b948      	cbnz	r0, 80076da <__lshift+0x3e>
 80076c6:	4602      	mov	r2, r0
 80076c8:	4b28      	ldr	r3, [pc, #160]	@ (800776c <__lshift+0xd0>)
 80076ca:	4829      	ldr	r0, [pc, #164]	@ (8007770 <__lshift+0xd4>)
 80076cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80076d0:	f7fe fe6c 	bl	80063ac <__assert_func>
 80076d4:	3101      	adds	r1, #1
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	e7ee      	b.n	80076b8 <__lshift+0x1c>
 80076da:	2300      	movs	r3, #0
 80076dc:	f100 0114 	add.w	r1, r0, #20
 80076e0:	f100 0210 	add.w	r2, r0, #16
 80076e4:	4618      	mov	r0, r3
 80076e6:	4553      	cmp	r3, sl
 80076e8:	db33      	blt.n	8007752 <__lshift+0xb6>
 80076ea:	6920      	ldr	r0, [r4, #16]
 80076ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076f0:	f104 0314 	add.w	r3, r4, #20
 80076f4:	f019 091f 	ands.w	r9, r9, #31
 80076f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007700:	d02b      	beq.n	800775a <__lshift+0xbe>
 8007702:	f1c9 0e20 	rsb	lr, r9, #32
 8007706:	468a      	mov	sl, r1
 8007708:	2200      	movs	r2, #0
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	fa00 f009 	lsl.w	r0, r0, r9
 8007710:	4310      	orrs	r0, r2
 8007712:	f84a 0b04 	str.w	r0, [sl], #4
 8007716:	f853 2b04 	ldr.w	r2, [r3], #4
 800771a:	459c      	cmp	ip, r3
 800771c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007720:	d8f3      	bhi.n	800770a <__lshift+0x6e>
 8007722:	ebac 0304 	sub.w	r3, ip, r4
 8007726:	3b15      	subs	r3, #21
 8007728:	f023 0303 	bic.w	r3, r3, #3
 800772c:	3304      	adds	r3, #4
 800772e:	f104 0015 	add.w	r0, r4, #21
 8007732:	4584      	cmp	ip, r0
 8007734:	bf38      	it	cc
 8007736:	2304      	movcc	r3, #4
 8007738:	50ca      	str	r2, [r1, r3]
 800773a:	b10a      	cbz	r2, 8007740 <__lshift+0xa4>
 800773c:	f108 0602 	add.w	r6, r8, #2
 8007740:	3e01      	subs	r6, #1
 8007742:	4638      	mov	r0, r7
 8007744:	612e      	str	r6, [r5, #16]
 8007746:	4621      	mov	r1, r4
 8007748:	f7ff fdda 	bl	8007300 <_Bfree>
 800774c:	4628      	mov	r0, r5
 800774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007752:	f842 0f04 	str.w	r0, [r2, #4]!
 8007756:	3301      	adds	r3, #1
 8007758:	e7c5      	b.n	80076e6 <__lshift+0x4a>
 800775a:	3904      	subs	r1, #4
 800775c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007760:	f841 2f04 	str.w	r2, [r1, #4]!
 8007764:	459c      	cmp	ip, r3
 8007766:	d8f9      	bhi.n	800775c <__lshift+0xc0>
 8007768:	e7ea      	b.n	8007740 <__lshift+0xa4>
 800776a:	bf00      	nop
 800776c:	0800851a 	.word	0x0800851a
 8007770:	0800852b 	.word	0x0800852b

08007774 <__mcmp>:
 8007774:	690a      	ldr	r2, [r1, #16]
 8007776:	4603      	mov	r3, r0
 8007778:	6900      	ldr	r0, [r0, #16]
 800777a:	1a80      	subs	r0, r0, r2
 800777c:	b530      	push	{r4, r5, lr}
 800777e:	d10e      	bne.n	800779e <__mcmp+0x2a>
 8007780:	3314      	adds	r3, #20
 8007782:	3114      	adds	r1, #20
 8007784:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007788:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800778c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007790:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007794:	4295      	cmp	r5, r2
 8007796:	d003      	beq.n	80077a0 <__mcmp+0x2c>
 8007798:	d205      	bcs.n	80077a6 <__mcmp+0x32>
 800779a:	f04f 30ff 	mov.w	r0, #4294967295
 800779e:	bd30      	pop	{r4, r5, pc}
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	d3f3      	bcc.n	800778c <__mcmp+0x18>
 80077a4:	e7fb      	b.n	800779e <__mcmp+0x2a>
 80077a6:	2001      	movs	r0, #1
 80077a8:	e7f9      	b.n	800779e <__mcmp+0x2a>
	...

080077ac <__mdiff>:
 80077ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	4689      	mov	r9, r1
 80077b2:	4606      	mov	r6, r0
 80077b4:	4611      	mov	r1, r2
 80077b6:	4648      	mov	r0, r9
 80077b8:	4614      	mov	r4, r2
 80077ba:	f7ff ffdb 	bl	8007774 <__mcmp>
 80077be:	1e05      	subs	r5, r0, #0
 80077c0:	d112      	bne.n	80077e8 <__mdiff+0x3c>
 80077c2:	4629      	mov	r1, r5
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7ff fd5b 	bl	8007280 <_Balloc>
 80077ca:	4602      	mov	r2, r0
 80077cc:	b928      	cbnz	r0, 80077da <__mdiff+0x2e>
 80077ce:	4b3f      	ldr	r3, [pc, #252]	@ (80078cc <__mdiff+0x120>)
 80077d0:	f240 2137 	movw	r1, #567	@ 0x237
 80077d4:	483e      	ldr	r0, [pc, #248]	@ (80078d0 <__mdiff+0x124>)
 80077d6:	f7fe fde9 	bl	80063ac <__assert_func>
 80077da:	2301      	movs	r3, #1
 80077dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077e0:	4610      	mov	r0, r2
 80077e2:	b003      	add	sp, #12
 80077e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e8:	bfbc      	itt	lt
 80077ea:	464b      	movlt	r3, r9
 80077ec:	46a1      	movlt	r9, r4
 80077ee:	4630      	mov	r0, r6
 80077f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077f4:	bfba      	itte	lt
 80077f6:	461c      	movlt	r4, r3
 80077f8:	2501      	movlt	r5, #1
 80077fa:	2500      	movge	r5, #0
 80077fc:	f7ff fd40 	bl	8007280 <_Balloc>
 8007800:	4602      	mov	r2, r0
 8007802:	b918      	cbnz	r0, 800780c <__mdiff+0x60>
 8007804:	4b31      	ldr	r3, [pc, #196]	@ (80078cc <__mdiff+0x120>)
 8007806:	f240 2145 	movw	r1, #581	@ 0x245
 800780a:	e7e3      	b.n	80077d4 <__mdiff+0x28>
 800780c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007810:	6926      	ldr	r6, [r4, #16]
 8007812:	60c5      	str	r5, [r0, #12]
 8007814:	f109 0310 	add.w	r3, r9, #16
 8007818:	f109 0514 	add.w	r5, r9, #20
 800781c:	f104 0e14 	add.w	lr, r4, #20
 8007820:	f100 0b14 	add.w	fp, r0, #20
 8007824:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007828:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	46d9      	mov	r9, fp
 8007830:	f04f 0c00 	mov.w	ip, #0
 8007834:	9b01      	ldr	r3, [sp, #4]
 8007836:	f85e 0b04 	ldr.w	r0, [lr], #4
 800783a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	fa1f f38a 	uxth.w	r3, sl
 8007844:	4619      	mov	r1, r3
 8007846:	b283      	uxth	r3, r0
 8007848:	1acb      	subs	r3, r1, r3
 800784a:	0c00      	lsrs	r0, r0, #16
 800784c:	4463      	add	r3, ip
 800784e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007852:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007856:	b29b      	uxth	r3, r3
 8007858:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800785c:	4576      	cmp	r6, lr
 800785e:	f849 3b04 	str.w	r3, [r9], #4
 8007862:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007866:	d8e5      	bhi.n	8007834 <__mdiff+0x88>
 8007868:	1b33      	subs	r3, r6, r4
 800786a:	3b15      	subs	r3, #21
 800786c:	f023 0303 	bic.w	r3, r3, #3
 8007870:	3415      	adds	r4, #21
 8007872:	3304      	adds	r3, #4
 8007874:	42a6      	cmp	r6, r4
 8007876:	bf38      	it	cc
 8007878:	2304      	movcc	r3, #4
 800787a:	441d      	add	r5, r3
 800787c:	445b      	add	r3, fp
 800787e:	461e      	mov	r6, r3
 8007880:	462c      	mov	r4, r5
 8007882:	4544      	cmp	r4, r8
 8007884:	d30e      	bcc.n	80078a4 <__mdiff+0xf8>
 8007886:	f108 0103 	add.w	r1, r8, #3
 800788a:	1b49      	subs	r1, r1, r5
 800788c:	f021 0103 	bic.w	r1, r1, #3
 8007890:	3d03      	subs	r5, #3
 8007892:	45a8      	cmp	r8, r5
 8007894:	bf38      	it	cc
 8007896:	2100      	movcc	r1, #0
 8007898:	440b      	add	r3, r1
 800789a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800789e:	b191      	cbz	r1, 80078c6 <__mdiff+0x11a>
 80078a0:	6117      	str	r7, [r2, #16]
 80078a2:	e79d      	b.n	80077e0 <__mdiff+0x34>
 80078a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80078a8:	46e6      	mov	lr, ip
 80078aa:	0c08      	lsrs	r0, r1, #16
 80078ac:	fa1c fc81 	uxtah	ip, ip, r1
 80078b0:	4471      	add	r1, lr
 80078b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078b6:	b289      	uxth	r1, r1
 80078b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078bc:	f846 1b04 	str.w	r1, [r6], #4
 80078c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078c4:	e7dd      	b.n	8007882 <__mdiff+0xd6>
 80078c6:	3f01      	subs	r7, #1
 80078c8:	e7e7      	b.n	800789a <__mdiff+0xee>
 80078ca:	bf00      	nop
 80078cc:	0800851a 	.word	0x0800851a
 80078d0:	0800852b 	.word	0x0800852b

080078d4 <__d2b>:
 80078d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078d8:	460f      	mov	r7, r1
 80078da:	2101      	movs	r1, #1
 80078dc:	ec59 8b10 	vmov	r8, r9, d0
 80078e0:	4616      	mov	r6, r2
 80078e2:	f7ff fccd 	bl	8007280 <_Balloc>
 80078e6:	4604      	mov	r4, r0
 80078e8:	b930      	cbnz	r0, 80078f8 <__d2b+0x24>
 80078ea:	4602      	mov	r2, r0
 80078ec:	4b23      	ldr	r3, [pc, #140]	@ (800797c <__d2b+0xa8>)
 80078ee:	4824      	ldr	r0, [pc, #144]	@ (8007980 <__d2b+0xac>)
 80078f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80078f4:	f7fe fd5a 	bl	80063ac <__assert_func>
 80078f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007900:	b10d      	cbz	r5, 8007906 <__d2b+0x32>
 8007902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007906:	9301      	str	r3, [sp, #4]
 8007908:	f1b8 0300 	subs.w	r3, r8, #0
 800790c:	d023      	beq.n	8007956 <__d2b+0x82>
 800790e:	4668      	mov	r0, sp
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	f7ff fd7c 	bl	800740e <__lo0bits>
 8007916:	e9dd 1200 	ldrd	r1, r2, [sp]
 800791a:	b1d0      	cbz	r0, 8007952 <__d2b+0x7e>
 800791c:	f1c0 0320 	rsb	r3, r0, #32
 8007920:	fa02 f303 	lsl.w	r3, r2, r3
 8007924:	430b      	orrs	r3, r1
 8007926:	40c2      	lsrs	r2, r0
 8007928:	6163      	str	r3, [r4, #20]
 800792a:	9201      	str	r2, [sp, #4]
 800792c:	9b01      	ldr	r3, [sp, #4]
 800792e:	61a3      	str	r3, [r4, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	bf0c      	ite	eq
 8007934:	2201      	moveq	r2, #1
 8007936:	2202      	movne	r2, #2
 8007938:	6122      	str	r2, [r4, #16]
 800793a:	b1a5      	cbz	r5, 8007966 <__d2b+0x92>
 800793c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007940:	4405      	add	r5, r0
 8007942:	603d      	str	r5, [r7, #0]
 8007944:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007948:	6030      	str	r0, [r6, #0]
 800794a:	4620      	mov	r0, r4
 800794c:	b003      	add	sp, #12
 800794e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007952:	6161      	str	r1, [r4, #20]
 8007954:	e7ea      	b.n	800792c <__d2b+0x58>
 8007956:	a801      	add	r0, sp, #4
 8007958:	f7ff fd59 	bl	800740e <__lo0bits>
 800795c:	9b01      	ldr	r3, [sp, #4]
 800795e:	6163      	str	r3, [r4, #20]
 8007960:	3020      	adds	r0, #32
 8007962:	2201      	movs	r2, #1
 8007964:	e7e8      	b.n	8007938 <__d2b+0x64>
 8007966:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800796a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800796e:	6038      	str	r0, [r7, #0]
 8007970:	6918      	ldr	r0, [r3, #16]
 8007972:	f7ff fd2d 	bl	80073d0 <__hi0bits>
 8007976:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800797a:	e7e5      	b.n	8007948 <__d2b+0x74>
 800797c:	0800851a 	.word	0x0800851a
 8007980:	0800852b 	.word	0x0800852b

08007984 <__ssputs_r>:
 8007984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007988:	688e      	ldr	r6, [r1, #8]
 800798a:	461f      	mov	r7, r3
 800798c:	42be      	cmp	r6, r7
 800798e:	680b      	ldr	r3, [r1, #0]
 8007990:	4682      	mov	sl, r0
 8007992:	460c      	mov	r4, r1
 8007994:	4690      	mov	r8, r2
 8007996:	d82d      	bhi.n	80079f4 <__ssputs_r+0x70>
 8007998:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800799c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079a0:	d026      	beq.n	80079f0 <__ssputs_r+0x6c>
 80079a2:	6965      	ldr	r5, [r4, #20]
 80079a4:	6909      	ldr	r1, [r1, #16]
 80079a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079aa:	eba3 0901 	sub.w	r9, r3, r1
 80079ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079b2:	1c7b      	adds	r3, r7, #1
 80079b4:	444b      	add	r3, r9
 80079b6:	106d      	asrs	r5, r5, #1
 80079b8:	429d      	cmp	r5, r3
 80079ba:	bf38      	it	cc
 80079bc:	461d      	movcc	r5, r3
 80079be:	0553      	lsls	r3, r2, #21
 80079c0:	d527      	bpl.n	8007a12 <__ssputs_r+0x8e>
 80079c2:	4629      	mov	r1, r5
 80079c4:	f7ff fbd0 	bl	8007168 <_malloc_r>
 80079c8:	4606      	mov	r6, r0
 80079ca:	b360      	cbz	r0, 8007a26 <__ssputs_r+0xa2>
 80079cc:	6921      	ldr	r1, [r4, #16]
 80079ce:	464a      	mov	r2, r9
 80079d0:	f000 fbde 	bl	8008190 <memcpy>
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80079da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079de:	81a3      	strh	r3, [r4, #12]
 80079e0:	6126      	str	r6, [r4, #16]
 80079e2:	6165      	str	r5, [r4, #20]
 80079e4:	444e      	add	r6, r9
 80079e6:	eba5 0509 	sub.w	r5, r5, r9
 80079ea:	6026      	str	r6, [r4, #0]
 80079ec:	60a5      	str	r5, [r4, #8]
 80079ee:	463e      	mov	r6, r7
 80079f0:	42be      	cmp	r6, r7
 80079f2:	d900      	bls.n	80079f6 <__ssputs_r+0x72>
 80079f4:	463e      	mov	r6, r7
 80079f6:	6820      	ldr	r0, [r4, #0]
 80079f8:	4632      	mov	r2, r6
 80079fa:	4641      	mov	r1, r8
 80079fc:	f000 fb7c 	bl	80080f8 <memmove>
 8007a00:	68a3      	ldr	r3, [r4, #8]
 8007a02:	1b9b      	subs	r3, r3, r6
 8007a04:	60a3      	str	r3, [r4, #8]
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	4433      	add	r3, r6
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a12:	462a      	mov	r2, r5
 8007a14:	f000 fbf7 	bl	8008206 <_realloc_r>
 8007a18:	4606      	mov	r6, r0
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d1e0      	bne.n	80079e0 <__ssputs_r+0x5c>
 8007a1e:	6921      	ldr	r1, [r4, #16]
 8007a20:	4650      	mov	r0, sl
 8007a22:	f7ff fb2d 	bl	8007080 <_free_r>
 8007a26:	230c      	movs	r3, #12
 8007a28:	f8ca 3000 	str.w	r3, [sl]
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	e7e9      	b.n	8007a0e <__ssputs_r+0x8a>
	...

08007a3c <_svfiprintf_r>:
 8007a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a40:	4698      	mov	r8, r3
 8007a42:	898b      	ldrh	r3, [r1, #12]
 8007a44:	061b      	lsls	r3, r3, #24
 8007a46:	b09d      	sub	sp, #116	@ 0x74
 8007a48:	4607      	mov	r7, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	4614      	mov	r4, r2
 8007a4e:	d510      	bpl.n	8007a72 <_svfiprintf_r+0x36>
 8007a50:	690b      	ldr	r3, [r1, #16]
 8007a52:	b973      	cbnz	r3, 8007a72 <_svfiprintf_r+0x36>
 8007a54:	2140      	movs	r1, #64	@ 0x40
 8007a56:	f7ff fb87 	bl	8007168 <_malloc_r>
 8007a5a:	6028      	str	r0, [r5, #0]
 8007a5c:	6128      	str	r0, [r5, #16]
 8007a5e:	b930      	cbnz	r0, 8007a6e <_svfiprintf_r+0x32>
 8007a60:	230c      	movs	r3, #12
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	b01d      	add	sp, #116	@ 0x74
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	2340      	movs	r3, #64	@ 0x40
 8007a70:	616b      	str	r3, [r5, #20]
 8007a72:	2300      	movs	r3, #0
 8007a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a76:	2320      	movs	r3, #32
 8007a78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a80:	2330      	movs	r3, #48	@ 0x30
 8007a82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c20 <_svfiprintf_r+0x1e4>
 8007a86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a8a:	f04f 0901 	mov.w	r9, #1
 8007a8e:	4623      	mov	r3, r4
 8007a90:	469a      	mov	sl, r3
 8007a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a96:	b10a      	cbz	r2, 8007a9c <_svfiprintf_r+0x60>
 8007a98:	2a25      	cmp	r2, #37	@ 0x25
 8007a9a:	d1f9      	bne.n	8007a90 <_svfiprintf_r+0x54>
 8007a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007aa0:	d00b      	beq.n	8007aba <_svfiprintf_r+0x7e>
 8007aa2:	465b      	mov	r3, fp
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7ff ff6b 	bl	8007984 <__ssputs_r>
 8007aae:	3001      	adds	r0, #1
 8007ab0:	f000 80a7 	beq.w	8007c02 <_svfiprintf_r+0x1c6>
 8007ab4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ab6:	445a      	add	r2, fp
 8007ab8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007aba:	f89a 3000 	ldrb.w	r3, [sl]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 809f 	beq.w	8007c02 <_svfiprintf_r+0x1c6>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ace:	f10a 0a01 	add.w	sl, sl, #1
 8007ad2:	9304      	str	r3, [sp, #16]
 8007ad4:	9307      	str	r3, [sp, #28]
 8007ad6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ada:	931a      	str	r3, [sp, #104]	@ 0x68
 8007adc:	4654      	mov	r4, sl
 8007ade:	2205      	movs	r2, #5
 8007ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae4:	484e      	ldr	r0, [pc, #312]	@ (8007c20 <_svfiprintf_r+0x1e4>)
 8007ae6:	f7f8 fb8b 	bl	8000200 <memchr>
 8007aea:	9a04      	ldr	r2, [sp, #16]
 8007aec:	b9d8      	cbnz	r0, 8007b26 <_svfiprintf_r+0xea>
 8007aee:	06d0      	lsls	r0, r2, #27
 8007af0:	bf44      	itt	mi
 8007af2:	2320      	movmi	r3, #32
 8007af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007af8:	0711      	lsls	r1, r2, #28
 8007afa:	bf44      	itt	mi
 8007afc:	232b      	movmi	r3, #43	@ 0x2b
 8007afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b02:	f89a 3000 	ldrb.w	r3, [sl]
 8007b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b08:	d015      	beq.n	8007b36 <_svfiprintf_r+0xfa>
 8007b0a:	9a07      	ldr	r2, [sp, #28]
 8007b0c:	4654      	mov	r4, sl
 8007b0e:	2000      	movs	r0, #0
 8007b10:	f04f 0c0a 	mov.w	ip, #10
 8007b14:	4621      	mov	r1, r4
 8007b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b1a:	3b30      	subs	r3, #48	@ 0x30
 8007b1c:	2b09      	cmp	r3, #9
 8007b1e:	d94b      	bls.n	8007bb8 <_svfiprintf_r+0x17c>
 8007b20:	b1b0      	cbz	r0, 8007b50 <_svfiprintf_r+0x114>
 8007b22:	9207      	str	r2, [sp, #28]
 8007b24:	e014      	b.n	8007b50 <_svfiprintf_r+0x114>
 8007b26:	eba0 0308 	sub.w	r3, r0, r8
 8007b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	9304      	str	r3, [sp, #16]
 8007b32:	46a2      	mov	sl, r4
 8007b34:	e7d2      	b.n	8007adc <_svfiprintf_r+0xa0>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	1d19      	adds	r1, r3, #4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	9103      	str	r1, [sp, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	bfbb      	ittet	lt
 8007b42:	425b      	neglt	r3, r3
 8007b44:	f042 0202 	orrlt.w	r2, r2, #2
 8007b48:	9307      	strge	r3, [sp, #28]
 8007b4a:	9307      	strlt	r3, [sp, #28]
 8007b4c:	bfb8      	it	lt
 8007b4e:	9204      	strlt	r2, [sp, #16]
 8007b50:	7823      	ldrb	r3, [r4, #0]
 8007b52:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b54:	d10a      	bne.n	8007b6c <_svfiprintf_r+0x130>
 8007b56:	7863      	ldrb	r3, [r4, #1]
 8007b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b5a:	d132      	bne.n	8007bc2 <_svfiprintf_r+0x186>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	1d1a      	adds	r2, r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	9203      	str	r2, [sp, #12]
 8007b64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b68:	3402      	adds	r4, #2
 8007b6a:	9305      	str	r3, [sp, #20]
 8007b6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c30 <_svfiprintf_r+0x1f4>
 8007b70:	7821      	ldrb	r1, [r4, #0]
 8007b72:	2203      	movs	r2, #3
 8007b74:	4650      	mov	r0, sl
 8007b76:	f7f8 fb43 	bl	8000200 <memchr>
 8007b7a:	b138      	cbz	r0, 8007b8c <_svfiprintf_r+0x150>
 8007b7c:	9b04      	ldr	r3, [sp, #16]
 8007b7e:	eba0 000a 	sub.w	r0, r0, sl
 8007b82:	2240      	movs	r2, #64	@ 0x40
 8007b84:	4082      	lsls	r2, r0
 8007b86:	4313      	orrs	r3, r2
 8007b88:	3401      	adds	r4, #1
 8007b8a:	9304      	str	r3, [sp, #16]
 8007b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b90:	4824      	ldr	r0, [pc, #144]	@ (8007c24 <_svfiprintf_r+0x1e8>)
 8007b92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b96:	2206      	movs	r2, #6
 8007b98:	f7f8 fb32 	bl	8000200 <memchr>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d036      	beq.n	8007c0e <_svfiprintf_r+0x1d2>
 8007ba0:	4b21      	ldr	r3, [pc, #132]	@ (8007c28 <_svfiprintf_r+0x1ec>)
 8007ba2:	bb1b      	cbnz	r3, 8007bec <_svfiprintf_r+0x1b0>
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	3307      	adds	r3, #7
 8007ba8:	f023 0307 	bic.w	r3, r3, #7
 8007bac:	3308      	adds	r3, #8
 8007bae:	9303      	str	r3, [sp, #12]
 8007bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb2:	4433      	add	r3, r6
 8007bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb6:	e76a      	b.n	8007a8e <_svfiprintf_r+0x52>
 8007bb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	e7a8      	b.n	8007b14 <_svfiprintf_r+0xd8>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	3401      	adds	r4, #1
 8007bc6:	9305      	str	r3, [sp, #20]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	f04f 0c0a 	mov.w	ip, #10
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd4:	3a30      	subs	r2, #48	@ 0x30
 8007bd6:	2a09      	cmp	r2, #9
 8007bd8:	d903      	bls.n	8007be2 <_svfiprintf_r+0x1a6>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0c6      	beq.n	8007b6c <_svfiprintf_r+0x130>
 8007bde:	9105      	str	r1, [sp, #20]
 8007be0:	e7c4      	b.n	8007b6c <_svfiprintf_r+0x130>
 8007be2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007be6:	4604      	mov	r4, r0
 8007be8:	2301      	movs	r3, #1
 8007bea:	e7f0      	b.n	8007bce <_svfiprintf_r+0x192>
 8007bec:	ab03      	add	r3, sp, #12
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8007c2c <_svfiprintf_r+0x1f0>)
 8007bf4:	a904      	add	r1, sp, #16
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	f7fd fcde 	bl	80055b8 <_printf_float>
 8007bfc:	1c42      	adds	r2, r0, #1
 8007bfe:	4606      	mov	r6, r0
 8007c00:	d1d6      	bne.n	8007bb0 <_svfiprintf_r+0x174>
 8007c02:	89ab      	ldrh	r3, [r5, #12]
 8007c04:	065b      	lsls	r3, r3, #25
 8007c06:	f53f af2d 	bmi.w	8007a64 <_svfiprintf_r+0x28>
 8007c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c0c:	e72c      	b.n	8007a68 <_svfiprintf_r+0x2c>
 8007c0e:	ab03      	add	r3, sp, #12
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	462a      	mov	r2, r5
 8007c14:	4b05      	ldr	r3, [pc, #20]	@ (8007c2c <_svfiprintf_r+0x1f0>)
 8007c16:	a904      	add	r1, sp, #16
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f7fd ff65 	bl	8005ae8 <_printf_i>
 8007c1e:	e7ed      	b.n	8007bfc <_svfiprintf_r+0x1c0>
 8007c20:	08008680 	.word	0x08008680
 8007c24:	0800868a 	.word	0x0800868a
 8007c28:	080055b9 	.word	0x080055b9
 8007c2c:	08007985 	.word	0x08007985
 8007c30:	08008686 	.word	0x08008686

08007c34 <__sfputc_r>:
 8007c34:	6893      	ldr	r3, [r2, #8]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	b410      	push	{r4}
 8007c3c:	6093      	str	r3, [r2, #8]
 8007c3e:	da08      	bge.n	8007c52 <__sfputc_r+0x1e>
 8007c40:	6994      	ldr	r4, [r2, #24]
 8007c42:	42a3      	cmp	r3, r4
 8007c44:	db01      	blt.n	8007c4a <__sfputc_r+0x16>
 8007c46:	290a      	cmp	r1, #10
 8007c48:	d103      	bne.n	8007c52 <__sfputc_r+0x1e>
 8007c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c4e:	f7fe ba34 	b.w	80060ba <__swbuf_r>
 8007c52:	6813      	ldr	r3, [r2, #0]
 8007c54:	1c58      	adds	r0, r3, #1
 8007c56:	6010      	str	r0, [r2, #0]
 8007c58:	7019      	strb	r1, [r3, #0]
 8007c5a:	4608      	mov	r0, r1
 8007c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <__sfputs_r>:
 8007c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c64:	4606      	mov	r6, r0
 8007c66:	460f      	mov	r7, r1
 8007c68:	4614      	mov	r4, r2
 8007c6a:	18d5      	adds	r5, r2, r3
 8007c6c:	42ac      	cmp	r4, r5
 8007c6e:	d101      	bne.n	8007c74 <__sfputs_r+0x12>
 8007c70:	2000      	movs	r0, #0
 8007c72:	e007      	b.n	8007c84 <__sfputs_r+0x22>
 8007c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c78:	463a      	mov	r2, r7
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7ff ffda 	bl	8007c34 <__sfputc_r>
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	d1f3      	bne.n	8007c6c <__sfputs_r+0xa>
 8007c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c88 <_vfiprintf_r>:
 8007c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8c:	460d      	mov	r5, r1
 8007c8e:	b09d      	sub	sp, #116	@ 0x74
 8007c90:	4614      	mov	r4, r2
 8007c92:	4698      	mov	r8, r3
 8007c94:	4606      	mov	r6, r0
 8007c96:	b118      	cbz	r0, 8007ca0 <_vfiprintf_r+0x18>
 8007c98:	6a03      	ldr	r3, [r0, #32]
 8007c9a:	b90b      	cbnz	r3, 8007ca0 <_vfiprintf_r+0x18>
 8007c9c:	f7fe f8d0 	bl	8005e40 <__sinit>
 8007ca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ca2:	07d9      	lsls	r1, r3, #31
 8007ca4:	d405      	bmi.n	8007cb2 <_vfiprintf_r+0x2a>
 8007ca6:	89ab      	ldrh	r3, [r5, #12]
 8007ca8:	059a      	lsls	r2, r3, #22
 8007caa:	d402      	bmi.n	8007cb2 <_vfiprintf_r+0x2a>
 8007cac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cae:	f7fe fb72 	bl	8006396 <__retarget_lock_acquire_recursive>
 8007cb2:	89ab      	ldrh	r3, [r5, #12]
 8007cb4:	071b      	lsls	r3, r3, #28
 8007cb6:	d501      	bpl.n	8007cbc <_vfiprintf_r+0x34>
 8007cb8:	692b      	ldr	r3, [r5, #16]
 8007cba:	b99b      	cbnz	r3, 8007ce4 <_vfiprintf_r+0x5c>
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7fe fa3a 	bl	8006138 <__swsetup_r>
 8007cc4:	b170      	cbz	r0, 8007ce4 <_vfiprintf_r+0x5c>
 8007cc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cc8:	07dc      	lsls	r4, r3, #31
 8007cca:	d504      	bpl.n	8007cd6 <_vfiprintf_r+0x4e>
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd0:	b01d      	add	sp, #116	@ 0x74
 8007cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd6:	89ab      	ldrh	r3, [r5, #12]
 8007cd8:	0598      	lsls	r0, r3, #22
 8007cda:	d4f7      	bmi.n	8007ccc <_vfiprintf_r+0x44>
 8007cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cde:	f7fe fb5b 	bl	8006398 <__retarget_lock_release_recursive>
 8007ce2:	e7f3      	b.n	8007ccc <_vfiprintf_r+0x44>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ce8:	2320      	movs	r3, #32
 8007cea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cf2:	2330      	movs	r3, #48	@ 0x30
 8007cf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ea4 <_vfiprintf_r+0x21c>
 8007cf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cfc:	f04f 0901 	mov.w	r9, #1
 8007d00:	4623      	mov	r3, r4
 8007d02:	469a      	mov	sl, r3
 8007d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d08:	b10a      	cbz	r2, 8007d0e <_vfiprintf_r+0x86>
 8007d0a:	2a25      	cmp	r2, #37	@ 0x25
 8007d0c:	d1f9      	bne.n	8007d02 <_vfiprintf_r+0x7a>
 8007d0e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d12:	d00b      	beq.n	8007d2c <_vfiprintf_r+0xa4>
 8007d14:	465b      	mov	r3, fp
 8007d16:	4622      	mov	r2, r4
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f7ff ffa1 	bl	8007c62 <__sfputs_r>
 8007d20:	3001      	adds	r0, #1
 8007d22:	f000 80a7 	beq.w	8007e74 <_vfiprintf_r+0x1ec>
 8007d26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d28:	445a      	add	r2, fp
 8007d2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 809f 	beq.w	8007e74 <_vfiprintf_r+0x1ec>
 8007d36:	2300      	movs	r3, #0
 8007d38:	f04f 32ff 	mov.w	r2, #4294967295
 8007d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d40:	f10a 0a01 	add.w	sl, sl, #1
 8007d44:	9304      	str	r3, [sp, #16]
 8007d46:	9307      	str	r3, [sp, #28]
 8007d48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d4e:	4654      	mov	r4, sl
 8007d50:	2205      	movs	r2, #5
 8007d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d56:	4853      	ldr	r0, [pc, #332]	@ (8007ea4 <_vfiprintf_r+0x21c>)
 8007d58:	f7f8 fa52 	bl	8000200 <memchr>
 8007d5c:	9a04      	ldr	r2, [sp, #16]
 8007d5e:	b9d8      	cbnz	r0, 8007d98 <_vfiprintf_r+0x110>
 8007d60:	06d1      	lsls	r1, r2, #27
 8007d62:	bf44      	itt	mi
 8007d64:	2320      	movmi	r3, #32
 8007d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d6a:	0713      	lsls	r3, r2, #28
 8007d6c:	bf44      	itt	mi
 8007d6e:	232b      	movmi	r3, #43	@ 0x2b
 8007d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d74:	f89a 3000 	ldrb.w	r3, [sl]
 8007d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d7a:	d015      	beq.n	8007da8 <_vfiprintf_r+0x120>
 8007d7c:	9a07      	ldr	r2, [sp, #28]
 8007d7e:	4654      	mov	r4, sl
 8007d80:	2000      	movs	r0, #0
 8007d82:	f04f 0c0a 	mov.w	ip, #10
 8007d86:	4621      	mov	r1, r4
 8007d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d8c:	3b30      	subs	r3, #48	@ 0x30
 8007d8e:	2b09      	cmp	r3, #9
 8007d90:	d94b      	bls.n	8007e2a <_vfiprintf_r+0x1a2>
 8007d92:	b1b0      	cbz	r0, 8007dc2 <_vfiprintf_r+0x13a>
 8007d94:	9207      	str	r2, [sp, #28]
 8007d96:	e014      	b.n	8007dc2 <_vfiprintf_r+0x13a>
 8007d98:	eba0 0308 	sub.w	r3, r0, r8
 8007d9c:	fa09 f303 	lsl.w	r3, r9, r3
 8007da0:	4313      	orrs	r3, r2
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	46a2      	mov	sl, r4
 8007da6:	e7d2      	b.n	8007d4e <_vfiprintf_r+0xc6>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	1d19      	adds	r1, r3, #4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	9103      	str	r1, [sp, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bfbb      	ittet	lt
 8007db4:	425b      	neglt	r3, r3
 8007db6:	f042 0202 	orrlt.w	r2, r2, #2
 8007dba:	9307      	strge	r3, [sp, #28]
 8007dbc:	9307      	strlt	r3, [sp, #28]
 8007dbe:	bfb8      	it	lt
 8007dc0:	9204      	strlt	r2, [sp, #16]
 8007dc2:	7823      	ldrb	r3, [r4, #0]
 8007dc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007dc6:	d10a      	bne.n	8007dde <_vfiprintf_r+0x156>
 8007dc8:	7863      	ldrb	r3, [r4, #1]
 8007dca:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dcc:	d132      	bne.n	8007e34 <_vfiprintf_r+0x1ac>
 8007dce:	9b03      	ldr	r3, [sp, #12]
 8007dd0:	1d1a      	adds	r2, r3, #4
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	9203      	str	r2, [sp, #12]
 8007dd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007dda:	3402      	adds	r4, #2
 8007ddc:	9305      	str	r3, [sp, #20]
 8007dde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007eb4 <_vfiprintf_r+0x22c>
 8007de2:	7821      	ldrb	r1, [r4, #0]
 8007de4:	2203      	movs	r2, #3
 8007de6:	4650      	mov	r0, sl
 8007de8:	f7f8 fa0a 	bl	8000200 <memchr>
 8007dec:	b138      	cbz	r0, 8007dfe <_vfiprintf_r+0x176>
 8007dee:	9b04      	ldr	r3, [sp, #16]
 8007df0:	eba0 000a 	sub.w	r0, r0, sl
 8007df4:	2240      	movs	r2, #64	@ 0x40
 8007df6:	4082      	lsls	r2, r0
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	3401      	adds	r4, #1
 8007dfc:	9304      	str	r3, [sp, #16]
 8007dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e02:	4829      	ldr	r0, [pc, #164]	@ (8007ea8 <_vfiprintf_r+0x220>)
 8007e04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e08:	2206      	movs	r2, #6
 8007e0a:	f7f8 f9f9 	bl	8000200 <memchr>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d03f      	beq.n	8007e92 <_vfiprintf_r+0x20a>
 8007e12:	4b26      	ldr	r3, [pc, #152]	@ (8007eac <_vfiprintf_r+0x224>)
 8007e14:	bb1b      	cbnz	r3, 8007e5e <_vfiprintf_r+0x1d6>
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	3307      	adds	r3, #7
 8007e1a:	f023 0307 	bic.w	r3, r3, #7
 8007e1e:	3308      	adds	r3, #8
 8007e20:	9303      	str	r3, [sp, #12]
 8007e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e24:	443b      	add	r3, r7
 8007e26:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e28:	e76a      	b.n	8007d00 <_vfiprintf_r+0x78>
 8007e2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e2e:	460c      	mov	r4, r1
 8007e30:	2001      	movs	r0, #1
 8007e32:	e7a8      	b.n	8007d86 <_vfiprintf_r+0xfe>
 8007e34:	2300      	movs	r3, #0
 8007e36:	3401      	adds	r4, #1
 8007e38:	9305      	str	r3, [sp, #20]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	f04f 0c0a 	mov.w	ip, #10
 8007e40:	4620      	mov	r0, r4
 8007e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e46:	3a30      	subs	r2, #48	@ 0x30
 8007e48:	2a09      	cmp	r2, #9
 8007e4a:	d903      	bls.n	8007e54 <_vfiprintf_r+0x1cc>
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0c6      	beq.n	8007dde <_vfiprintf_r+0x156>
 8007e50:	9105      	str	r1, [sp, #20]
 8007e52:	e7c4      	b.n	8007dde <_vfiprintf_r+0x156>
 8007e54:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e58:	4604      	mov	r4, r0
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e7f0      	b.n	8007e40 <_vfiprintf_r+0x1b8>
 8007e5e:	ab03      	add	r3, sp, #12
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	462a      	mov	r2, r5
 8007e64:	4b12      	ldr	r3, [pc, #72]	@ (8007eb0 <_vfiprintf_r+0x228>)
 8007e66:	a904      	add	r1, sp, #16
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f7fd fba5 	bl	80055b8 <_printf_float>
 8007e6e:	4607      	mov	r7, r0
 8007e70:	1c78      	adds	r0, r7, #1
 8007e72:	d1d6      	bne.n	8007e22 <_vfiprintf_r+0x19a>
 8007e74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e76:	07d9      	lsls	r1, r3, #31
 8007e78:	d405      	bmi.n	8007e86 <_vfiprintf_r+0x1fe>
 8007e7a:	89ab      	ldrh	r3, [r5, #12]
 8007e7c:	059a      	lsls	r2, r3, #22
 8007e7e:	d402      	bmi.n	8007e86 <_vfiprintf_r+0x1fe>
 8007e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e82:	f7fe fa89 	bl	8006398 <__retarget_lock_release_recursive>
 8007e86:	89ab      	ldrh	r3, [r5, #12]
 8007e88:	065b      	lsls	r3, r3, #25
 8007e8a:	f53f af1f 	bmi.w	8007ccc <_vfiprintf_r+0x44>
 8007e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e90:	e71e      	b.n	8007cd0 <_vfiprintf_r+0x48>
 8007e92:	ab03      	add	r3, sp, #12
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	462a      	mov	r2, r5
 8007e98:	4b05      	ldr	r3, [pc, #20]	@ (8007eb0 <_vfiprintf_r+0x228>)
 8007e9a:	a904      	add	r1, sp, #16
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7fd fe23 	bl	8005ae8 <_printf_i>
 8007ea2:	e7e4      	b.n	8007e6e <_vfiprintf_r+0x1e6>
 8007ea4:	08008680 	.word	0x08008680
 8007ea8:	0800868a 	.word	0x0800868a
 8007eac:	080055b9 	.word	0x080055b9
 8007eb0:	08007c63 	.word	0x08007c63
 8007eb4:	08008686 	.word	0x08008686

08007eb8 <__sflush_r>:
 8007eb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec0:	0716      	lsls	r6, r2, #28
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	d454      	bmi.n	8007f72 <__sflush_r+0xba>
 8007ec8:	684b      	ldr	r3, [r1, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	dc02      	bgt.n	8007ed4 <__sflush_r+0x1c>
 8007ece:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	dd48      	ble.n	8007f66 <__sflush_r+0xae>
 8007ed4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ed6:	2e00      	cmp	r6, #0
 8007ed8:	d045      	beq.n	8007f66 <__sflush_r+0xae>
 8007eda:	2300      	movs	r3, #0
 8007edc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ee0:	682f      	ldr	r7, [r5, #0]
 8007ee2:	6a21      	ldr	r1, [r4, #32]
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	d030      	beq.n	8007f4a <__sflush_r+0x92>
 8007ee8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	0759      	lsls	r1, r3, #29
 8007eee:	d505      	bpl.n	8007efc <__sflush_r+0x44>
 8007ef0:	6863      	ldr	r3, [r4, #4]
 8007ef2:	1ad2      	subs	r2, r2, r3
 8007ef4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ef6:	b10b      	cbz	r3, 8007efc <__sflush_r+0x44>
 8007ef8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007efa:	1ad2      	subs	r2, r2, r3
 8007efc:	2300      	movs	r3, #0
 8007efe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f00:	6a21      	ldr	r1, [r4, #32]
 8007f02:	4628      	mov	r0, r5
 8007f04:	47b0      	blx	r6
 8007f06:	1c43      	adds	r3, r0, #1
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	d106      	bne.n	8007f1a <__sflush_r+0x62>
 8007f0c:	6829      	ldr	r1, [r5, #0]
 8007f0e:	291d      	cmp	r1, #29
 8007f10:	d82b      	bhi.n	8007f6a <__sflush_r+0xb2>
 8007f12:	4a2a      	ldr	r2, [pc, #168]	@ (8007fbc <__sflush_r+0x104>)
 8007f14:	410a      	asrs	r2, r1
 8007f16:	07d6      	lsls	r6, r2, #31
 8007f18:	d427      	bmi.n	8007f6a <__sflush_r+0xb2>
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	6062      	str	r2, [r4, #4]
 8007f1e:	04d9      	lsls	r1, r3, #19
 8007f20:	6922      	ldr	r2, [r4, #16]
 8007f22:	6022      	str	r2, [r4, #0]
 8007f24:	d504      	bpl.n	8007f30 <__sflush_r+0x78>
 8007f26:	1c42      	adds	r2, r0, #1
 8007f28:	d101      	bne.n	8007f2e <__sflush_r+0x76>
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	b903      	cbnz	r3, 8007f30 <__sflush_r+0x78>
 8007f2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f32:	602f      	str	r7, [r5, #0]
 8007f34:	b1b9      	cbz	r1, 8007f66 <__sflush_r+0xae>
 8007f36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f3a:	4299      	cmp	r1, r3
 8007f3c:	d002      	beq.n	8007f44 <__sflush_r+0x8c>
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f7ff f89e 	bl	8007080 <_free_r>
 8007f44:	2300      	movs	r3, #0
 8007f46:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f48:	e00d      	b.n	8007f66 <__sflush_r+0xae>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	47b0      	blx	r6
 8007f50:	4602      	mov	r2, r0
 8007f52:	1c50      	adds	r0, r2, #1
 8007f54:	d1c9      	bne.n	8007eea <__sflush_r+0x32>
 8007f56:	682b      	ldr	r3, [r5, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0c6      	beq.n	8007eea <__sflush_r+0x32>
 8007f5c:	2b1d      	cmp	r3, #29
 8007f5e:	d001      	beq.n	8007f64 <__sflush_r+0xac>
 8007f60:	2b16      	cmp	r3, #22
 8007f62:	d11e      	bne.n	8007fa2 <__sflush_r+0xea>
 8007f64:	602f      	str	r7, [r5, #0]
 8007f66:	2000      	movs	r0, #0
 8007f68:	e022      	b.n	8007fb0 <__sflush_r+0xf8>
 8007f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f6e:	b21b      	sxth	r3, r3
 8007f70:	e01b      	b.n	8007faa <__sflush_r+0xf2>
 8007f72:	690f      	ldr	r7, [r1, #16]
 8007f74:	2f00      	cmp	r7, #0
 8007f76:	d0f6      	beq.n	8007f66 <__sflush_r+0xae>
 8007f78:	0793      	lsls	r3, r2, #30
 8007f7a:	680e      	ldr	r6, [r1, #0]
 8007f7c:	bf08      	it	eq
 8007f7e:	694b      	ldreq	r3, [r1, #20]
 8007f80:	600f      	str	r7, [r1, #0]
 8007f82:	bf18      	it	ne
 8007f84:	2300      	movne	r3, #0
 8007f86:	eba6 0807 	sub.w	r8, r6, r7
 8007f8a:	608b      	str	r3, [r1, #8]
 8007f8c:	f1b8 0f00 	cmp.w	r8, #0
 8007f90:	dde9      	ble.n	8007f66 <__sflush_r+0xae>
 8007f92:	6a21      	ldr	r1, [r4, #32]
 8007f94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f96:	4643      	mov	r3, r8
 8007f98:	463a      	mov	r2, r7
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	47b0      	blx	r6
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	dc08      	bgt.n	8007fb4 <__sflush_r+0xfc>
 8007fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb4:	4407      	add	r7, r0
 8007fb6:	eba8 0800 	sub.w	r8, r8, r0
 8007fba:	e7e7      	b.n	8007f8c <__sflush_r+0xd4>
 8007fbc:	dfbffffe 	.word	0xdfbffffe

08007fc0 <_fflush_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	690b      	ldr	r3, [r1, #16]
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	b913      	cbnz	r3, 8007fd0 <_fflush_r+0x10>
 8007fca:	2500      	movs	r5, #0
 8007fcc:	4628      	mov	r0, r5
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	b118      	cbz	r0, 8007fda <_fflush_r+0x1a>
 8007fd2:	6a03      	ldr	r3, [r0, #32]
 8007fd4:	b90b      	cbnz	r3, 8007fda <_fflush_r+0x1a>
 8007fd6:	f7fd ff33 	bl	8005e40 <__sinit>
 8007fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0f3      	beq.n	8007fca <_fflush_r+0xa>
 8007fe2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fe4:	07d0      	lsls	r0, r2, #31
 8007fe6:	d404      	bmi.n	8007ff2 <_fflush_r+0x32>
 8007fe8:	0599      	lsls	r1, r3, #22
 8007fea:	d402      	bmi.n	8007ff2 <_fflush_r+0x32>
 8007fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fee:	f7fe f9d2 	bl	8006396 <__retarget_lock_acquire_recursive>
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	f7ff ff5f 	bl	8007eb8 <__sflush_r>
 8007ffa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ffc:	07da      	lsls	r2, r3, #31
 8007ffe:	4605      	mov	r5, r0
 8008000:	d4e4      	bmi.n	8007fcc <_fflush_r+0xc>
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	059b      	lsls	r3, r3, #22
 8008006:	d4e1      	bmi.n	8007fcc <_fflush_r+0xc>
 8008008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800800a:	f7fe f9c5 	bl	8006398 <__retarget_lock_release_recursive>
 800800e:	e7dd      	b.n	8007fcc <_fflush_r+0xc>

08008010 <fiprintf>:
 8008010:	b40e      	push	{r1, r2, r3}
 8008012:	b503      	push	{r0, r1, lr}
 8008014:	4601      	mov	r1, r0
 8008016:	ab03      	add	r3, sp, #12
 8008018:	4805      	ldr	r0, [pc, #20]	@ (8008030 <fiprintf+0x20>)
 800801a:	f853 2b04 	ldr.w	r2, [r3], #4
 800801e:	6800      	ldr	r0, [r0, #0]
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	f7ff fe31 	bl	8007c88 <_vfiprintf_r>
 8008026:	b002      	add	sp, #8
 8008028:	f85d eb04 	ldr.w	lr, [sp], #4
 800802c:	b003      	add	sp, #12
 800802e:	4770      	bx	lr
 8008030:	20000018 	.word	0x20000018

08008034 <__swhatbuf_r>:
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	460c      	mov	r4, r1
 8008038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803c:	2900      	cmp	r1, #0
 800803e:	b096      	sub	sp, #88	@ 0x58
 8008040:	4615      	mov	r5, r2
 8008042:	461e      	mov	r6, r3
 8008044:	da0d      	bge.n	8008062 <__swhatbuf_r+0x2e>
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800804c:	f04f 0100 	mov.w	r1, #0
 8008050:	bf14      	ite	ne
 8008052:	2340      	movne	r3, #64	@ 0x40
 8008054:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008058:	2000      	movs	r0, #0
 800805a:	6031      	str	r1, [r6, #0]
 800805c:	602b      	str	r3, [r5, #0]
 800805e:	b016      	add	sp, #88	@ 0x58
 8008060:	bd70      	pop	{r4, r5, r6, pc}
 8008062:	466a      	mov	r2, sp
 8008064:	f000 f862 	bl	800812c <_fstat_r>
 8008068:	2800      	cmp	r0, #0
 800806a:	dbec      	blt.n	8008046 <__swhatbuf_r+0x12>
 800806c:	9901      	ldr	r1, [sp, #4]
 800806e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008072:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008076:	4259      	negs	r1, r3
 8008078:	4159      	adcs	r1, r3
 800807a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800807e:	e7eb      	b.n	8008058 <__swhatbuf_r+0x24>

08008080 <__smakebuf_r>:
 8008080:	898b      	ldrh	r3, [r1, #12]
 8008082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008084:	079d      	lsls	r5, r3, #30
 8008086:	4606      	mov	r6, r0
 8008088:	460c      	mov	r4, r1
 800808a:	d507      	bpl.n	800809c <__smakebuf_r+0x1c>
 800808c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	6123      	str	r3, [r4, #16]
 8008094:	2301      	movs	r3, #1
 8008096:	6163      	str	r3, [r4, #20]
 8008098:	b003      	add	sp, #12
 800809a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800809c:	ab01      	add	r3, sp, #4
 800809e:	466a      	mov	r2, sp
 80080a0:	f7ff ffc8 	bl	8008034 <__swhatbuf_r>
 80080a4:	9f00      	ldr	r7, [sp, #0]
 80080a6:	4605      	mov	r5, r0
 80080a8:	4639      	mov	r1, r7
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff f85c 	bl	8007168 <_malloc_r>
 80080b0:	b948      	cbnz	r0, 80080c6 <__smakebuf_r+0x46>
 80080b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080b6:	059a      	lsls	r2, r3, #22
 80080b8:	d4ee      	bmi.n	8008098 <__smakebuf_r+0x18>
 80080ba:	f023 0303 	bic.w	r3, r3, #3
 80080be:	f043 0302 	orr.w	r3, r3, #2
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	e7e2      	b.n	800808c <__smakebuf_r+0xc>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	6020      	str	r0, [r4, #0]
 80080ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ce:	81a3      	strh	r3, [r4, #12]
 80080d0:	9b01      	ldr	r3, [sp, #4]
 80080d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80080d6:	b15b      	cbz	r3, 80080f0 <__smakebuf_r+0x70>
 80080d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080dc:	4630      	mov	r0, r6
 80080de:	f000 f837 	bl	8008150 <_isatty_r>
 80080e2:	b128      	cbz	r0, 80080f0 <__smakebuf_r+0x70>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	f023 0303 	bic.w	r3, r3, #3
 80080ea:	f043 0301 	orr.w	r3, r3, #1
 80080ee:	81a3      	strh	r3, [r4, #12]
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	431d      	orrs	r5, r3
 80080f4:	81a5      	strh	r5, [r4, #12]
 80080f6:	e7cf      	b.n	8008098 <__smakebuf_r+0x18>

080080f8 <memmove>:
 80080f8:	4288      	cmp	r0, r1
 80080fa:	b510      	push	{r4, lr}
 80080fc:	eb01 0402 	add.w	r4, r1, r2
 8008100:	d902      	bls.n	8008108 <memmove+0x10>
 8008102:	4284      	cmp	r4, r0
 8008104:	4623      	mov	r3, r4
 8008106:	d807      	bhi.n	8008118 <memmove+0x20>
 8008108:	1e43      	subs	r3, r0, #1
 800810a:	42a1      	cmp	r1, r4
 800810c:	d008      	beq.n	8008120 <memmove+0x28>
 800810e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008112:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008116:	e7f8      	b.n	800810a <memmove+0x12>
 8008118:	4402      	add	r2, r0
 800811a:	4601      	mov	r1, r0
 800811c:	428a      	cmp	r2, r1
 800811e:	d100      	bne.n	8008122 <memmove+0x2a>
 8008120:	bd10      	pop	{r4, pc}
 8008122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800812a:	e7f7      	b.n	800811c <memmove+0x24>

0800812c <_fstat_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d07      	ldr	r5, [pc, #28]	@ (800814c <_fstat_r+0x20>)
 8008130:	2300      	movs	r3, #0
 8008132:	4604      	mov	r4, r0
 8008134:	4608      	mov	r0, r1
 8008136:	4611      	mov	r1, r2
 8008138:	602b      	str	r3, [r5, #0]
 800813a:	f7f9 fdaf 	bl	8001c9c <_fstat>
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	d102      	bne.n	8008148 <_fstat_r+0x1c>
 8008142:	682b      	ldr	r3, [r5, #0]
 8008144:	b103      	cbz	r3, 8008148 <_fstat_r+0x1c>
 8008146:	6023      	str	r3, [r4, #0]
 8008148:	bd38      	pop	{r3, r4, r5, pc}
 800814a:	bf00      	nop
 800814c:	20000578 	.word	0x20000578

08008150 <_isatty_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d06      	ldr	r5, [pc, #24]	@ (800816c <_isatty_r+0x1c>)
 8008154:	2300      	movs	r3, #0
 8008156:	4604      	mov	r4, r0
 8008158:	4608      	mov	r0, r1
 800815a:	602b      	str	r3, [r5, #0]
 800815c:	f7f9 fdae 	bl	8001cbc <_isatty>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_isatty_r+0x1a>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_isatty_r+0x1a>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	20000578 	.word	0x20000578

08008170 <_sbrk_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d06      	ldr	r5, [pc, #24]	@ (800818c <_sbrk_r+0x1c>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	602b      	str	r3, [r5, #0]
 800817c:	f7f9 fdb6 	bl	8001cec <_sbrk>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d102      	bne.n	800818a <_sbrk_r+0x1a>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	b103      	cbz	r3, 800818a <_sbrk_r+0x1a>
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	20000578 	.word	0x20000578

08008190 <memcpy>:
 8008190:	440a      	add	r2, r1
 8008192:	4291      	cmp	r1, r2
 8008194:	f100 33ff 	add.w	r3, r0, #4294967295
 8008198:	d100      	bne.n	800819c <memcpy+0xc>
 800819a:	4770      	bx	lr
 800819c:	b510      	push	{r4, lr}
 800819e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081a6:	4291      	cmp	r1, r2
 80081a8:	d1f9      	bne.n	800819e <memcpy+0xe>
 80081aa:	bd10      	pop	{r4, pc}

080081ac <abort>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	2006      	movs	r0, #6
 80081b0:	f000 f88c 	bl	80082cc <raise>
 80081b4:	2001      	movs	r0, #1
 80081b6:	f7f9 fd21 	bl	8001bfc <_exit>

080081ba <_calloc_r>:
 80081ba:	b570      	push	{r4, r5, r6, lr}
 80081bc:	fba1 5402 	umull	r5, r4, r1, r2
 80081c0:	b93c      	cbnz	r4, 80081d2 <_calloc_r+0x18>
 80081c2:	4629      	mov	r1, r5
 80081c4:	f7fe ffd0 	bl	8007168 <_malloc_r>
 80081c8:	4606      	mov	r6, r0
 80081ca:	b928      	cbnz	r0, 80081d8 <_calloc_r+0x1e>
 80081cc:	2600      	movs	r6, #0
 80081ce:	4630      	mov	r0, r6
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	220c      	movs	r2, #12
 80081d4:	6002      	str	r2, [r0, #0]
 80081d6:	e7f9      	b.n	80081cc <_calloc_r+0x12>
 80081d8:	462a      	mov	r2, r5
 80081da:	4621      	mov	r1, r4
 80081dc:	f7fe f802 	bl	80061e4 <memset>
 80081e0:	e7f5      	b.n	80081ce <_calloc_r+0x14>

080081e2 <__ascii_mbtowc>:
 80081e2:	b082      	sub	sp, #8
 80081e4:	b901      	cbnz	r1, 80081e8 <__ascii_mbtowc+0x6>
 80081e6:	a901      	add	r1, sp, #4
 80081e8:	b142      	cbz	r2, 80081fc <__ascii_mbtowc+0x1a>
 80081ea:	b14b      	cbz	r3, 8008200 <__ascii_mbtowc+0x1e>
 80081ec:	7813      	ldrb	r3, [r2, #0]
 80081ee:	600b      	str	r3, [r1, #0]
 80081f0:	7812      	ldrb	r2, [r2, #0]
 80081f2:	1e10      	subs	r0, r2, #0
 80081f4:	bf18      	it	ne
 80081f6:	2001      	movne	r0, #1
 80081f8:	b002      	add	sp, #8
 80081fa:	4770      	bx	lr
 80081fc:	4610      	mov	r0, r2
 80081fe:	e7fb      	b.n	80081f8 <__ascii_mbtowc+0x16>
 8008200:	f06f 0001 	mvn.w	r0, #1
 8008204:	e7f8      	b.n	80081f8 <__ascii_mbtowc+0x16>

08008206 <_realloc_r>:
 8008206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800820a:	4680      	mov	r8, r0
 800820c:	4615      	mov	r5, r2
 800820e:	460c      	mov	r4, r1
 8008210:	b921      	cbnz	r1, 800821c <_realloc_r+0x16>
 8008212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008216:	4611      	mov	r1, r2
 8008218:	f7fe bfa6 	b.w	8007168 <_malloc_r>
 800821c:	b92a      	cbnz	r2, 800822a <_realloc_r+0x24>
 800821e:	f7fe ff2f 	bl	8007080 <_free_r>
 8008222:	2400      	movs	r4, #0
 8008224:	4620      	mov	r0, r4
 8008226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800822a:	f000 f86b 	bl	8008304 <_malloc_usable_size_r>
 800822e:	4285      	cmp	r5, r0
 8008230:	4606      	mov	r6, r0
 8008232:	d802      	bhi.n	800823a <_realloc_r+0x34>
 8008234:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008238:	d8f4      	bhi.n	8008224 <_realloc_r+0x1e>
 800823a:	4629      	mov	r1, r5
 800823c:	4640      	mov	r0, r8
 800823e:	f7fe ff93 	bl	8007168 <_malloc_r>
 8008242:	4607      	mov	r7, r0
 8008244:	2800      	cmp	r0, #0
 8008246:	d0ec      	beq.n	8008222 <_realloc_r+0x1c>
 8008248:	42b5      	cmp	r5, r6
 800824a:	462a      	mov	r2, r5
 800824c:	4621      	mov	r1, r4
 800824e:	bf28      	it	cs
 8008250:	4632      	movcs	r2, r6
 8008252:	f7ff ff9d 	bl	8008190 <memcpy>
 8008256:	4621      	mov	r1, r4
 8008258:	4640      	mov	r0, r8
 800825a:	f7fe ff11 	bl	8007080 <_free_r>
 800825e:	463c      	mov	r4, r7
 8008260:	e7e0      	b.n	8008224 <_realloc_r+0x1e>

08008262 <__ascii_wctomb>:
 8008262:	4603      	mov	r3, r0
 8008264:	4608      	mov	r0, r1
 8008266:	b141      	cbz	r1, 800827a <__ascii_wctomb+0x18>
 8008268:	2aff      	cmp	r2, #255	@ 0xff
 800826a:	d904      	bls.n	8008276 <__ascii_wctomb+0x14>
 800826c:	228a      	movs	r2, #138	@ 0x8a
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	4770      	bx	lr
 8008276:	700a      	strb	r2, [r1, #0]
 8008278:	2001      	movs	r0, #1
 800827a:	4770      	bx	lr

0800827c <_raise_r>:
 800827c:	291f      	cmp	r1, #31
 800827e:	b538      	push	{r3, r4, r5, lr}
 8008280:	4605      	mov	r5, r0
 8008282:	460c      	mov	r4, r1
 8008284:	d904      	bls.n	8008290 <_raise_r+0x14>
 8008286:	2316      	movs	r3, #22
 8008288:	6003      	str	r3, [r0, #0]
 800828a:	f04f 30ff 	mov.w	r0, #4294967295
 800828e:	bd38      	pop	{r3, r4, r5, pc}
 8008290:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008292:	b112      	cbz	r2, 800829a <_raise_r+0x1e>
 8008294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008298:	b94b      	cbnz	r3, 80082ae <_raise_r+0x32>
 800829a:	4628      	mov	r0, r5
 800829c:	f000 f830 	bl	8008300 <_getpid_r>
 80082a0:	4622      	mov	r2, r4
 80082a2:	4601      	mov	r1, r0
 80082a4:	4628      	mov	r0, r5
 80082a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082aa:	f000 b817 	b.w	80082dc <_kill_r>
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d00a      	beq.n	80082c8 <_raise_r+0x4c>
 80082b2:	1c59      	adds	r1, r3, #1
 80082b4:	d103      	bne.n	80082be <_raise_r+0x42>
 80082b6:	2316      	movs	r3, #22
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	2001      	movs	r0, #1
 80082bc:	e7e7      	b.n	800828e <_raise_r+0x12>
 80082be:	2100      	movs	r1, #0
 80082c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082c4:	4620      	mov	r0, r4
 80082c6:	4798      	blx	r3
 80082c8:	2000      	movs	r0, #0
 80082ca:	e7e0      	b.n	800828e <_raise_r+0x12>

080082cc <raise>:
 80082cc:	4b02      	ldr	r3, [pc, #8]	@ (80082d8 <raise+0xc>)
 80082ce:	4601      	mov	r1, r0
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	f7ff bfd3 	b.w	800827c <_raise_r>
 80082d6:	bf00      	nop
 80082d8:	20000018 	.word	0x20000018

080082dc <_kill_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4d07      	ldr	r5, [pc, #28]	@ (80082fc <_kill_r+0x20>)
 80082e0:	2300      	movs	r3, #0
 80082e2:	4604      	mov	r4, r0
 80082e4:	4608      	mov	r0, r1
 80082e6:	4611      	mov	r1, r2
 80082e8:	602b      	str	r3, [r5, #0]
 80082ea:	f7f9 fc77 	bl	8001bdc <_kill>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	d102      	bne.n	80082f8 <_kill_r+0x1c>
 80082f2:	682b      	ldr	r3, [r5, #0]
 80082f4:	b103      	cbz	r3, 80082f8 <_kill_r+0x1c>
 80082f6:	6023      	str	r3, [r4, #0]
 80082f8:	bd38      	pop	{r3, r4, r5, pc}
 80082fa:	bf00      	nop
 80082fc:	20000578 	.word	0x20000578

08008300 <_getpid_r>:
 8008300:	f7f9 bc64 	b.w	8001bcc <_getpid>

08008304 <_malloc_usable_size_r>:
 8008304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008308:	1f18      	subs	r0, r3, #4
 800830a:	2b00      	cmp	r3, #0
 800830c:	bfbc      	itt	lt
 800830e:	580b      	ldrlt	r3, [r1, r0]
 8008310:	18c0      	addlt	r0, r0, r3
 8008312:	4770      	bx	lr

08008314 <_init>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	bf00      	nop
 8008318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831a:	bc08      	pop	{r3}
 800831c:	469e      	mov	lr, r3
 800831e:	4770      	bx	lr

08008320 <_fini>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr
